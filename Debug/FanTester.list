
FanTester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08005500  08005500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058d8  080058d8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080058d8  080058d8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058d8  080058d8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058d8  080058d8  000158d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058dc  080058dc  000158dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080058e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c0  20000078  08005958  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  08005958  00020938  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eee8  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c4  00000000  00000000  0002ef89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00031450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  000324c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8c5  00000000  00000000  00033440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001089e  00000000  00000000  0004dd05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096762  00000000  00000000  0005e5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4d05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004954  00000000  00000000  000f4d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080054e8 	.word	0x080054e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080054e8 	.word	0x080054e8

0800014c <sign>:
uint16_t cdPin;
GPIO_TypeDef *rstPort;
uint16_t rstPin;
uint8_t biasRatio = 0x88;

int sign(int val) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (val >= 0)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	db01      	blt.n	800015e <sign+0x12>
		return 1;
 800015a:	2301      	movs	r3, #1
 800015c:	e001      	b.n	8000162 <sign+0x16>
	return -1;
 800015e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000162:	4618      	mov	r0, r3
 8000164:	370c      	adds	r7, #12
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr

0800016c <sendCommand>:

void sendCommand(uint8_t com) {
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0
 8000172:	4603      	mov	r3, r0
 8000174:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(csPort, csPin, 0);
 8000176:	4b11      	ldr	r3, [pc, #68]	; (80001bc <sendCommand+0x50>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a11      	ldr	r2, [pc, #68]	; (80001c0 <sendCommand+0x54>)
 800017c:	8811      	ldrh	r1, [r2, #0]
 800017e:	2200      	movs	r2, #0
 8000180:	4618      	mov	r0, r3
 8000182:	f002 fa3e 	bl	8002602 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cdPort, cdPin, 0);
 8000186:	4b0f      	ldr	r3, [pc, #60]	; (80001c4 <sendCommand+0x58>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	4a0f      	ldr	r2, [pc, #60]	; (80001c8 <sendCommand+0x5c>)
 800018c:	8811      	ldrh	r1, [r2, #0]
 800018e:	2200      	movs	r2, #0
 8000190:	4618      	mov	r0, r3
 8000192:	f002 fa36 	bl	8002602 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &com, 1, 10);
 8000196:	4b0d      	ldr	r3, [pc, #52]	; (80001cc <sendCommand+0x60>)
 8000198:	6818      	ldr	r0, [r3, #0]
 800019a:	1df9      	adds	r1, r7, #7
 800019c:	230a      	movs	r3, #10
 800019e:	2201      	movs	r2, #1
 80001a0:	f002 ff9c 	bl	80030dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(csPort, csPin, 1);
 80001a4:	4b05      	ldr	r3, [pc, #20]	; (80001bc <sendCommand+0x50>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a05      	ldr	r2, [pc, #20]	; (80001c0 <sendCommand+0x54>)
 80001aa:	8811      	ldrh	r1, [r2, #0]
 80001ac:	2201      	movs	r2, #1
 80001ae:	4618      	mov	r0, r3
 80001b0:	f002 fa27 	bl	8002602 <HAL_GPIO_WritePin>
}
 80001b4:	bf00      	nop
 80001b6:	3708      	adds	r7, #8
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	2000069c 	.word	0x2000069c
 80001c0:	200006a0 	.word	0x200006a0
 80001c4:	200006a4 	.word	0x200006a4
 80001c8:	200006a8 	.word	0x200006a8
 80001cc:	20000698 	.word	0x20000698

080001d0 <UC1609_SoftwareReset>:

void UC1609_SoftwareReset() {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	sendCommand(0b11100010);
 80001d4:	20e2      	movs	r0, #226	; 0xe2
 80001d6:	f7ff ffc9 	bl	800016c <sendCommand>
	HAL_Delay(20);
 80001da:	2014      	movs	r0, #20
 80001dc:	f001 ff4c 	bl	8002078 <HAL_Delay>
}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <UC1609_HardwareReset>:

void UC1609_HardwareReset() {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(rstPort, rstPin, 0);
 80001e8:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <UC1609_HardwareReset+0x34>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a0b      	ldr	r2, [pc, #44]	; (800021c <UC1609_HardwareReset+0x38>)
 80001ee:	8811      	ldrh	r1, [r2, #0]
 80001f0:	2200      	movs	r2, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f002 fa05 	bl	8002602 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001f8:	2001      	movs	r0, #1
 80001fa:	f001 ff3d 	bl	8002078 <HAL_Delay>
	HAL_GPIO_WritePin(rstPort, rstPin, 1);
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <UC1609_HardwareReset+0x34>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a06      	ldr	r2, [pc, #24]	; (800021c <UC1609_HardwareReset+0x38>)
 8000204:	8811      	ldrh	r1, [r2, #0]
 8000206:	2201      	movs	r2, #1
 8000208:	4618      	mov	r0, r3
 800020a:	f002 f9fa 	bl	8002602 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800020e:	2005      	movs	r0, #5
 8000210:	f001 ff32 	bl	8002078 <HAL_Delay>
}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}
 8000218:	200006ac 	.word	0x200006ac
 800021c:	200006b0 	.word	0x200006b0

08000220 <UC1609_Init>:
void UC1609_Init(SPI_HandleTypeDef *spiHandler, GPIO_TypeDef *csGpioPort,
		uint16_t csGpioPin, GPIO_TypeDef *cdGpioPort, uint16_t cdGpioPin,
		GPIO_TypeDef *rstGpioPort, uint16_t rstGpioPin) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	603b      	str	r3, [r7, #0]
 800022c:	4613      	mov	r3, r2
 800022e:	80fb      	strh	r3, [r7, #6]
	hspi = spiHandler;
 8000230:	4a1a      	ldr	r2, [pc, #104]	; (800029c <UC1609_Init+0x7c>)
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	6013      	str	r3, [r2, #0]
	csPort = csGpioPort;
 8000236:	4a1a      	ldr	r2, [pc, #104]	; (80002a0 <UC1609_Init+0x80>)
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	6013      	str	r3, [r2, #0]
	csPin = csGpioPin;
 800023c:	4a19      	ldr	r2, [pc, #100]	; (80002a4 <UC1609_Init+0x84>)
 800023e:	88fb      	ldrh	r3, [r7, #6]
 8000240:	8013      	strh	r3, [r2, #0]
	cdPort = cdGpioPort;
 8000242:	4a19      	ldr	r2, [pc, #100]	; (80002a8 <UC1609_Init+0x88>)
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	6013      	str	r3, [r2, #0]
	cdPin = cdGpioPin;
 8000248:	4a18      	ldr	r2, [pc, #96]	; (80002ac <UC1609_Init+0x8c>)
 800024a:	8b3b      	ldrh	r3, [r7, #24]
 800024c:	8013      	strh	r3, [r2, #0]
	rstPort = rstGpioPort;
 800024e:	4a18      	ldr	r2, [pc, #96]	; (80002b0 <UC1609_Init+0x90>)
 8000250:	69fb      	ldr	r3, [r7, #28]
 8000252:	6013      	str	r3, [r2, #0]
	rstPin = rstGpioPin;
 8000254:	4a17      	ldr	r2, [pc, #92]	; (80002b4 <UC1609_Init+0x94>)
 8000256:	8c3b      	ldrh	r3, [r7, #32]
 8000258:	8013      	strh	r3, [r2, #0]
	if (rstPin == 0 || rstPort == 0) {
 800025a:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <UC1609_Init+0x94>)
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d003      	beq.n	800026a <UC1609_Init+0x4a>
 8000262:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <UC1609_Init+0x90>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d102      	bne.n	8000270 <UC1609_Init+0x50>
		UC1609_SoftwareReset();
 800026a:	f7ff ffb1 	bl	80001d0 <UC1609_SoftwareReset>
 800026e:	e001      	b.n	8000274 <UC1609_Init+0x54>
	} else {
		UC1609_HardwareReset();
 8000270:	f7ff ffb8 	bl	80001e4 <UC1609_HardwareReset>
	}
	sendCommand(UC1609_CMD_MAPPING | MIRROR_X);
 8000274:	20c4      	movs	r0, #196	; 0xc4
 8000276:	f7ff ff79 	bl	800016c <sendCommand>
	sendCommand(UC1609_CMD_SET_BIAS_RATIO | DEFAULT_BIAS_RATIO);
 800027a:	20eb      	movs	r0, #235	; 0xeb
 800027c:	f7ff ff76 	bl	800016c <sendCommand>
	sendCommand(UC_1609_CMD_SET_BIAS_POTENTIOMETER);
 8000280:	2081      	movs	r0, #129	; 0x81
 8000282:	f7ff ff73 	bl	800016c <sendCommand>
	sendCommand(0xb0);
 8000286:	20b0      	movs	r0, #176	; 0xb0
 8000288:	f7ff ff70 	bl	800016c <sendCommand>
	UC1609_Scroll(0);
 800028c:	2000      	movs	r0, #0
 800028e:	f000 f947 	bl	8000520 <UC1609_Scroll>
}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	20000698 	.word	0x20000698
 80002a0:	2000069c 	.word	0x2000069c
 80002a4:	200006a0 	.word	0x200006a0
 80002a8:	200006a4 	.word	0x200006a4
 80002ac:	200006a8 	.word	0x200006a8
 80002b0:	200006ac 	.word	0x200006ac
 80002b4:	200006b0 	.word	0x200006b0

080002b8 <UC1609_SetXY>:

// HAL Func
void UC1609_SetXY(uint8_t x, uint8_t y) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	460a      	mov	r2, r1
 80002c2:	71fb      	strb	r3, [r7, #7]
 80002c4:	4613      	mov	r3, r2
 80002c6:	71bb      	strb	r3, [r7, #6]
	sendCommand(0b00000000 | (x & 0xF));
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	f003 030f 	and.w	r3, r3, #15
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	4618      	mov	r0, r3
 80002d2:	f7ff ff4b 	bl	800016c <sendCommand>
	sendCommand(0b00010000 | ((x >> 4) & 0xF));
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	091b      	lsrs	r3, r3, #4
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	b25b      	sxtb	r3, r3
 80002de:	f043 0310 	orr.w	r3, r3, #16
 80002e2:	b25b      	sxtb	r3, r3
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ff40 	bl	800016c <sendCommand>
	sendCommand(0b10110000 | y);
 80002ec:	79bb      	ldrb	r3, [r7, #6]
 80002ee:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	4618      	mov	r0, r3
 80002f6:	f7ff ff39 	bl	800016c <sendCommand>
}
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <UC1609_SetPos>:

// In uc_lcd_buffer
void UC1609_SetPos(uint8_t x, uint8_t y) {
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	460a      	mov	r2, r1
 800030e:	71fb      	strb	r3, [r7, #7]
 8000310:	4613      	mov	r3, r2
 8000312:	71bb      	strb	r3, [r7, #6]
	uc_cursor = x * 6 + UC1609_WIDTH * y;
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	b29b      	uxth	r3, r3
 8000318:	461a      	mov	r2, r3
 800031a:	0052      	lsls	r2, r2, #1
 800031c:	4413      	add	r3, r2
 800031e:	005b      	lsls	r3, r3, #1
 8000320:	b29a      	uxth	r2, r3
 8000322:	79bb      	ldrb	r3, [r7, #6]
 8000324:	b29b      	uxth	r3, r3
 8000326:	4619      	mov	r1, r3
 8000328:	0049      	lsls	r1, r1, #1
 800032a:	440b      	add	r3, r1
 800032c:	019b      	lsls	r3, r3, #6
 800032e:	b29b      	uxth	r3, r3
 8000330:	4413      	add	r3, r2
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <UC1609_SetPos+0x40>)
 8000336:	801a      	strh	r2, [r3, #0]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	20000694 	.word	0x20000694

08000348 <UC1609_UpdateScreen>:

void UC1609_UpdateScreen() {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0

	UC1609_SetXY(0, 0);
 800034c:	2100      	movs	r1, #0
 800034e:	2000      	movs	r0, #0
 8000350:	f7ff ffb2 	bl	80002b8 <UC1609_SetXY>
	HAL_GPIO_WritePin(csPort, csPin, 0);
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <UC1609_UpdateScreen+0x58>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a12      	ldr	r2, [pc, #72]	; (80003a4 <UC1609_UpdateScreen+0x5c>)
 800035a:	8811      	ldrh	r1, [r2, #0]
 800035c:	2200      	movs	r2, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f002 f94f 	bl	8002602 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cdPort, cdPin, 1);
 8000364:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <UC1609_UpdateScreen+0x60>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a10      	ldr	r2, [pc, #64]	; (80003ac <UC1609_UpdateScreen+0x64>)
 800036a:	8811      	ldrh	r1, [r2, #0]
 800036c:	2201      	movs	r2, #1
 800036e:	4618      	mov	r0, r3
 8000370:	f002 f947 	bl	8002602 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, uc_lcd_buffer, UC1609_BUFFER_SIZE, 1000);
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <UC1609_UpdateScreen+0x68>)
 8000376:	6818      	ldr	r0, [r3, #0]
 8000378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000380:	490c      	ldr	r1, [pc, #48]	; (80003b4 <UC1609_UpdateScreen+0x6c>)
 8000382:	f002 feab 	bl	80030dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(csPort, csPin, 1);
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <UC1609_UpdateScreen+0x58>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <UC1609_UpdateScreen+0x5c>)
 800038c:	8811      	ldrh	r1, [r2, #0]
 800038e:	2201      	movs	r2, #1
 8000390:	4618      	mov	r0, r3
 8000392:	f002 f936 	bl	8002602 <HAL_GPIO_WritePin>
	sendCommand(UC1609_CMD_ENABLE);
 8000396:	20af      	movs	r0, #175	; 0xaf
 8000398:	f7ff fee8 	bl	800016c <sendCommand>
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2000069c 	.word	0x2000069c
 80003a4:	200006a0 	.word	0x200006a0
 80003a8:	200006a4 	.word	0x200006a4
 80003ac:	200006a8 	.word	0x200006a8
 80003b0:	20000698 	.word	0x20000698
 80003b4:	20000094 	.word	0x20000094

080003b8 <UC1609_Clean>:

void UC1609_Clean() {
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < UC1609_BUFFER_SIZE; ++i)
 80003be:	2300      	movs	r3, #0
 80003c0:	80fb      	strh	r3, [r7, #6]
 80003c2:	e006      	b.n	80003d2 <UC1609_Clean+0x1a>
		uc_lcd_buffer[i] = 0;
 80003c4:	88fb      	ldrh	r3, [r7, #6]
 80003c6:	4a08      	ldr	r2, [pc, #32]	; (80003e8 <UC1609_Clean+0x30>)
 80003c8:	2100      	movs	r1, #0
 80003ca:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < UC1609_BUFFER_SIZE; ++i)
 80003cc:	88fb      	ldrh	r3, [r7, #6]
 80003ce:	3301      	adds	r3, #1
 80003d0:	80fb      	strh	r3, [r7, #6]
 80003d2:	88fb      	ldrh	r3, [r7, #6]
 80003d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80003d8:	d3f4      	bcc.n	80003c4 <UC1609_Clean+0xc>
}
 80003da:	bf00      	nop
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	20000094 	.word	0x20000094

080003ec <UC1609_PutRuC>:

void UC1609_PutRuC(char *c) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]

	uint8_t pos;
	if (*c == 0xD0)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2bd0      	cmp	r3, #208	; 0xd0
 80003fa:	d105      	bne.n	8000408 <UC1609_PutRuC+0x1c>
		pos = *(c + 1) - 144 + 101;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	3301      	adds	r3, #1
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	3b2b      	subs	r3, #43	; 0x2b
 8000404:	73fb      	strb	r3, [r7, #15]
 8000406:	e008      	b.n	800041a <UC1609_PutRuC+0x2e>
	else if (*c == 0xD1)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2bd1      	cmp	r3, #209	; 0xd1
 800040e:	d11a      	bne.n	8000446 <UC1609_PutRuC+0x5a>
		pos = *(c + 1) - 128 + 149;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3301      	adds	r3, #1
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	3315      	adds	r3, #21
 8000418:	73fb      	strb	r3, [r7, #15]
	else
		return;
	memcpy(uc_lcd_buffer + uc_cursor, &myFont[pos][0], 5);
 800041a:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <UC1609_PutRuC+0x64>)
 800041c:	881b      	ldrh	r3, [r3, #0]
 800041e:	461a      	mov	r2, r3
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <UC1609_PutRuC+0x68>)
 8000422:	18d0      	adds	r0, r2, r3
 8000424:	7bfa      	ldrb	r2, [r7, #15]
 8000426:	4613      	mov	r3, r2
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	4413      	add	r3, r2
 800042c:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <UC1609_PutRuC+0x6c>)
 800042e:	4413      	add	r3, r2
 8000430:	2205      	movs	r2, #5
 8000432:	4619      	mov	r1, r3
 8000434:	f004 fbd6 	bl	8004be4 <memcpy>
	uc_cursor += 5;
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <UC1609_PutRuC+0x64>)
 800043a:	881b      	ldrh	r3, [r3, #0]
 800043c:	3305      	adds	r3, #5
 800043e:	b29a      	uxth	r2, r3
 8000440:	4b03      	ldr	r3, [pc, #12]	; (8000450 <UC1609_PutRuC+0x64>)
 8000442:	801a      	strh	r2, [r3, #0]
 8000444:	e000      	b.n	8000448 <UC1609_PutRuC+0x5c>
		return;
 8000446:	bf00      	nop
}
 8000448:	3710      	adds	r7, #16
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000694 	.word	0x20000694
 8000454:	20000094 	.word	0x20000094
 8000458:	08005550 	.word	0x08005550

0800045c <UC1609_Put>:

void UC1609_Put(char c) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	71fb      	strb	r3, [r7, #7]
	memcpy(uc_lcd_buffer + uc_cursor, &myFont[c - 0x20][0], 5);
 8000466:	4b0d      	ldr	r3, [pc, #52]	; (800049c <UC1609_Put+0x40>)
 8000468:	881b      	ldrh	r3, [r3, #0]
 800046a:	461a      	mov	r2, r3
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <UC1609_Put+0x44>)
 800046e:	18d0      	adds	r0, r2, r3
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	f1a3 0220 	sub.w	r2, r3, #32
 8000476:	4613      	mov	r3, r2
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	4413      	add	r3, r2
 800047c:	4a09      	ldr	r2, [pc, #36]	; (80004a4 <UC1609_Put+0x48>)
 800047e:	4413      	add	r3, r2
 8000480:	2205      	movs	r2, #5
 8000482:	4619      	mov	r1, r3
 8000484:	f004 fbae 	bl	8004be4 <memcpy>
	uc_cursor += 5;
 8000488:	4b04      	ldr	r3, [pc, #16]	; (800049c <UC1609_Put+0x40>)
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	3305      	adds	r3, #5
 800048e:	b29a      	uxth	r2, r3
 8000490:	4b02      	ldr	r3, [pc, #8]	; (800049c <UC1609_Put+0x40>)
 8000492:	801a      	strh	r2, [r3, #0]
}
 8000494:	bf00      	nop
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000694 	.word	0x20000694
 80004a0:	20000094 	.word	0x20000094
 80004a4:	08005550 	.word	0x08005550

080004a8 <UC1609_PutString>:

void UC1609_PutString(char *c) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	while (*c) {
 80004b0:	e029      	b.n	8000506 <UC1609_PutString+0x5e>
		uc_cursor %= UC1609_BUFFER_SIZE;
 80004b2:	4b19      	ldr	r3, [pc, #100]	; (8000518 <UC1609_PutString+0x70>)
 80004b4:	881a      	ldrh	r2, [r3, #0]
 80004b6:	4b19      	ldr	r3, [pc, #100]	; (800051c <UC1609_PutString+0x74>)
 80004b8:	fba3 1302 	umull	r1, r3, r3, r2
 80004bc:	0a99      	lsrs	r1, r3, #10
 80004be:	460b      	mov	r3, r1
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	440b      	add	r3, r1
 80004c4:	025b      	lsls	r3, r3, #9
 80004c6:	1ad3      	subs	r3, r2, r3
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	4b13      	ldr	r3, [pc, #76]	; (8000518 <UC1609_PutString+0x70>)
 80004cc:	801a      	strh	r2, [r3, #0]
		if (*c == 0xD0 || *c == 0xD1) {
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2bd0      	cmp	r3, #208	; 0xd0
 80004d4:	d003      	beq.n	80004de <UC1609_PutString+0x36>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2bd1      	cmp	r3, #209	; 0xd1
 80004dc:	d106      	bne.n	80004ec <UC1609_PutString+0x44>
			UC1609_PutRuC(c);
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f7ff ff84 	bl	80003ec <UC1609_PutRuC>
			c += 2;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	3302      	adds	r3, #2
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	e006      	b.n	80004fa <UC1609_PutString+0x52>
		} else
			UC1609_Put(*c++);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	1c5a      	adds	r2, r3, #1
 80004f0:	607a      	str	r2, [r7, #4]
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff ffb1 	bl	800045c <UC1609_Put>
		uc_cursor++;
 80004fa:	4b07      	ldr	r3, [pc, #28]	; (8000518 <UC1609_PutString+0x70>)
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	3301      	adds	r3, #1
 8000500:	b29a      	uxth	r2, r3
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <UC1609_PutString+0x70>)
 8000504:	801a      	strh	r2, [r3, #0]
	while (*c) {
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d1d1      	bne.n	80004b2 <UC1609_PutString+0xa>
	}
}
 800050e:	bf00      	nop
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000694 	.word	0x20000694
 800051c:	aaaaaaab 	.word	0xaaaaaaab

08000520 <UC1609_Scroll>:

void UC1609_SetInversion(uint8_t invert) {
	sendCommand(UC1609_CMD_INVERSION | invert);
}

void UC1609_Scroll(uint8_t lines) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
	lines %= 64;
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000530:	71fb      	strb	r3, [r7, #7]
	sendCommand(UC1609_CMD_SCROLL | lines);
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000538:	b2db      	uxtb	r3, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff fe16 	bl	800016c <sendCommand>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <UC1609_PutPixel>:

void UC1609_DrawBitmap(uint8_t *buf) {
	memcpy(uc_lcd_buffer, buf, sizeof(uc_lcd_buffer));
}

void UC1609_PutPixel(uint8_t x, uint8_t y) {
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	460a      	mov	r2, r1
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	4613      	mov	r3, r2
 8000556:	71bb      	strb	r3, [r7, #6]
	uc_lcd_buffer[(x + (y / 8) * UC1609_WIDTH) % UC1609_BUFFER_SIZE] |= 1
 8000558:	79fa      	ldrb	r2, [r7, #7]
 800055a:	79bb      	ldrb	r3, [r7, #6]
 800055c:	08db      	lsrs	r3, r3, #3
 800055e:	b2db      	uxtb	r3, r3
 8000560:	4619      	mov	r1, r3
 8000562:	460b      	mov	r3, r1
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	440b      	add	r3, r1
 8000568:	019b      	lsls	r3, r3, #6
 800056a:	18d1      	adds	r1, r2, r3
 800056c:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <UC1609_PutPixel+0x64>)
 800056e:	fb83 2301 	smull	r2, r3, r3, r1
 8000572:	121a      	asrs	r2, r3, #8
 8000574:	17cb      	asrs	r3, r1, #31
 8000576:	1ad2      	subs	r2, r2, r3
 8000578:	4613      	mov	r3, r2
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	4413      	add	r3, r2
 800057e:	025b      	lsls	r3, r3, #9
 8000580:	1aca      	subs	r2, r1, r3
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <UC1609_PutPixel+0x68>)
 8000584:	5c9b      	ldrb	r3, [r3, r2]
 8000586:	b259      	sxtb	r1, r3
			<< (y % 8);
 8000588:	79bb      	ldrb	r3, [r7, #6]
 800058a:	f003 0307 	and.w	r3, r3, #7
 800058e:	2001      	movs	r0, #1
 8000590:	fa00 f303 	lsl.w	r3, r0, r3
	uc_lcd_buffer[(x + (y / 8) * UC1609_WIDTH) % UC1609_BUFFER_SIZE] |= 1
 8000594:	b25b      	sxtb	r3, r3
 8000596:	430b      	orrs	r3, r1
 8000598:	b25b      	sxtb	r3, r3
 800059a:	b2d9      	uxtb	r1, r3
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <UC1609_PutPixel+0x68>)
 800059e:	5499      	strb	r1, [r3, r2]
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	2aaaaaab 	.word	0x2aaaaaab
 80005b0:	20000094 	.word	0x20000094

080005b4 <UC1609_DrawLine>:

void UC1609_DrawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b087      	sub	sp, #28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4604      	mov	r4, r0
 80005bc:	4608      	mov	r0, r1
 80005be:	4611      	mov	r1, r2
 80005c0:	461a      	mov	r2, r3
 80005c2:	4623      	mov	r3, r4
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	4603      	mov	r3, r0
 80005c8:	71bb      	strb	r3, [r7, #6]
 80005ca:	460b      	mov	r3, r1
 80005cc:	717b      	strb	r3, [r7, #5]
 80005ce:	4613      	mov	r3, r2
 80005d0:	713b      	strb	r3, [r7, #4]
	if (x2 == x1 && y2 == y1) {
 80005d2:	797a      	ldrb	r2, [r7, #5]
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d10a      	bne.n	80005f0 <UC1609_DrawLine+0x3c>
 80005da:	793a      	ldrb	r2, [r7, #4]
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d106      	bne.n	80005f0 <UC1609_DrawLine+0x3c>
		UC1609_PutPixel(x1, y1);
 80005e2:	79ba      	ldrb	r2, [r7, #6]
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	4611      	mov	r1, r2
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ffad 	bl	8000548 <UC1609_PutPixel>
		return;
 80005ee:	e063      	b.n	80006b8 <UC1609_DrawLine+0x104>
	 y2 = y1;
	 y1 = temp;
	 }
	 */

	if (abs(x2 - x1) > abs(y2 - y1)) {
 80005f0:	797a      	ldrb	r2, [r7, #5]
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005fa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005fe:	7939      	ldrb	r1, [r7, #4]
 8000600:	79bb      	ldrb	r3, [r7, #6]
 8000602:	1acb      	subs	r3, r1, r3
 8000604:	2b00      	cmp	r3, #0
 8000606:	bfb8      	it	lt
 8000608:	425b      	neglt	r3, r3
 800060a:	429a      	cmp	r2, r3
 800060c:	dd2a      	ble.n	8000664 <UC1609_DrawLine+0xb0>
		int step = sign(x2 - x1);
 800060e:	797a      	ldrb	r2, [r7, #5]
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff fd99 	bl	800014c <sign>
 800061a:	60f8      	str	r0, [r7, #12]
		for (uint8_t i = x1; i != x2 + 1; i+=step) {
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	75fb      	strb	r3, [r7, #23]
 8000620:	e01a      	b.n	8000658 <UC1609_DrawLine+0xa4>
			UC1609_PutPixel(i, y1 + (y2 - y1) * (i - x1) / (x2 - x1));
 8000622:	793a      	ldrb	r2, [r7, #4]
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	7df9      	ldrb	r1, [r7, #23]
 800062a:	79fa      	ldrb	r2, [r7, #7]
 800062c:	1a8a      	subs	r2, r1, r2
 800062e:	fb03 f202 	mul.w	r2, r3, r2
 8000632:	7979      	ldrb	r1, [r7, #5]
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	1acb      	subs	r3, r1, r3
 8000638:	fb92 f3f3 	sdiv	r3, r2, r3
 800063c:	b2da      	uxtb	r2, r3
 800063e:	79bb      	ldrb	r3, [r7, #6]
 8000640:	4413      	add	r3, r2
 8000642:	b2da      	uxtb	r2, r3
 8000644:	7dfb      	ldrb	r3, [r7, #23]
 8000646:	4611      	mov	r1, r2
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ff7d 	bl	8000548 <UC1609_PutPixel>
		for (uint8_t i = x1; i != x2 + 1; i+=step) {
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	b2da      	uxtb	r2, r3
 8000652:	7dfb      	ldrb	r3, [r7, #23]
 8000654:	4413      	add	r3, r2
 8000656:	75fb      	strb	r3, [r7, #23]
 8000658:	7dfa      	ldrb	r2, [r7, #23]
 800065a:	797b      	ldrb	r3, [r7, #5]
 800065c:	3301      	adds	r3, #1
 800065e:	429a      	cmp	r2, r3
 8000660:	d1df      	bne.n	8000622 <UC1609_DrawLine+0x6e>
 8000662:	e029      	b.n	80006b8 <UC1609_DrawLine+0x104>
		}
	} else {
		int step = sign(y2 - y1);
 8000664:	793a      	ldrb	r2, [r7, #4]
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fd6e 	bl	800014c <sign>
 8000670:	6138      	str	r0, [r7, #16]
		for (uint8_t i = y1; i != y2 + 1; i+=step) {
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	75bb      	strb	r3, [r7, #22]
 8000676:	e01a      	b.n	80006ae <UC1609_DrawLine+0xfa>
			UC1609_PutPixel(x1 + (x2 - x1) * (i - y1) / (y2 - y1), i);
 8000678:	797a      	ldrb	r2, [r7, #5]
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	7db9      	ldrb	r1, [r7, #22]
 8000680:	79ba      	ldrb	r2, [r7, #6]
 8000682:	1a8a      	subs	r2, r1, r2
 8000684:	fb03 f202 	mul.w	r2, r3, r2
 8000688:	7939      	ldrb	r1, [r7, #4]
 800068a:	79bb      	ldrb	r3, [r7, #6]
 800068c:	1acb      	subs	r3, r1, r3
 800068e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000692:	b2da      	uxtb	r2, r3
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	4413      	add	r3, r2
 8000698:	b2db      	uxtb	r3, r3
 800069a:	7dba      	ldrb	r2, [r7, #22]
 800069c:	4611      	mov	r1, r2
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ff52 	bl	8000548 <UC1609_PutPixel>
		for (uint8_t i = y1; i != y2 + 1; i+=step) {
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	7dbb      	ldrb	r3, [r7, #22]
 80006aa:	4413      	add	r3, r2
 80006ac:	75bb      	strb	r3, [r7, #22]
 80006ae:	7dba      	ldrb	r2, [r7, #22]
 80006b0:	793b      	ldrb	r3, [r7, #4]
 80006b2:	3301      	adds	r3, #1
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d1df      	bne.n	8000678 <UC1609_DrawLine+0xc4>
		}
	}
}
 80006b8:	371c      	adds	r7, #28
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd90      	pop	{r4, r7, pc}

080006be <UC1609_DrawDottedLine>:

void UC1609_DrawDottedLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 80006be:	b590      	push	{r4, r7, lr}
 80006c0:	b085      	sub	sp, #20
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	4604      	mov	r4, r0
 80006c6:	4608      	mov	r0, r1
 80006c8:	4611      	mov	r1, r2
 80006ca:	461a      	mov	r2, r3
 80006cc:	4623      	mov	r3, r4
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	4603      	mov	r3, r0
 80006d2:	71bb      	strb	r3, [r7, #6]
 80006d4:	460b      	mov	r3, r1
 80006d6:	717b      	strb	r3, [r7, #5]
 80006d8:	4613      	mov	r3, r2
 80006da:	713b      	strb	r3, [r7, #4]
	if (x2 == x1 && y2 == y1) {
 80006dc:	797a      	ldrb	r2, [r7, #5]
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d10a      	bne.n	80006fa <UC1609_DrawDottedLine+0x3c>
 80006e4:	793a      	ldrb	r2, [r7, #4]
 80006e6:	79bb      	ldrb	r3, [r7, #6]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d106      	bne.n	80006fa <UC1609_DrawDottedLine+0x3c>
		UC1609_PutPixel(x1, y1);
 80006ec:	79ba      	ldrb	r2, [r7, #6]
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4611      	mov	r1, r2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff28 	bl	8000548 <UC1609_PutPixel>
		return;
 80006f8:	e048      	b.n	800078c <UC1609_DrawDottedLine+0xce>
	}
	if (x2 - x1 > y2 - y1) {
 80006fa:	797a      	ldrb	r2, [r7, #5]
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	1ad2      	subs	r2, r2, r3
 8000700:	7939      	ldrb	r1, [r7, #4]
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	1acb      	subs	r3, r1, r3
 8000706:	429a      	cmp	r2, r3
 8000708:	dd20      	ble.n	800074c <UC1609_DrawDottedLine+0x8e>
		for (uint8_t i = x1; i < x2 + 1; i += 2) {
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	73fb      	strb	r3, [r7, #15]
 800070e:	e018      	b.n	8000742 <UC1609_DrawDottedLine+0x84>
			UC1609_PutPixel(i, y1 + (y2 - y1) * (i - x1) / (x2 - x1));
 8000710:	793a      	ldrb	r2, [r7, #4]
 8000712:	79bb      	ldrb	r3, [r7, #6]
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	7bf9      	ldrb	r1, [r7, #15]
 8000718:	79fa      	ldrb	r2, [r7, #7]
 800071a:	1a8a      	subs	r2, r1, r2
 800071c:	fb03 f202 	mul.w	r2, r3, r2
 8000720:	7979      	ldrb	r1, [r7, #5]
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	1acb      	subs	r3, r1, r3
 8000726:	fb92 f3f3 	sdiv	r3, r2, r3
 800072a:	b2da      	uxtb	r2, r3
 800072c:	79bb      	ldrb	r3, [r7, #6]
 800072e:	4413      	add	r3, r2
 8000730:	b2da      	uxtb	r2, r3
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	4611      	mov	r1, r2
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff06 	bl	8000548 <UC1609_PutPixel>
		for (uint8_t i = x1; i < x2 + 1; i += 2) {
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	3302      	adds	r3, #2
 8000740:	73fb      	strb	r3, [r7, #15]
 8000742:	797a      	ldrb	r2, [r7, #5]
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	429a      	cmp	r2, r3
 8000748:	d2e2      	bcs.n	8000710 <UC1609_DrawDottedLine+0x52>
 800074a:	e01f      	b.n	800078c <UC1609_DrawDottedLine+0xce>
		}
	} else {
		for (uint8_t i = y1; i < y2 + 1; i += 2) {
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	73bb      	strb	r3, [r7, #14]
 8000750:	e018      	b.n	8000784 <UC1609_DrawDottedLine+0xc6>
			UC1609_PutPixel(x1 + (x2 - x1) * (i - y1) / (y2 - y1), i);
 8000752:	797a      	ldrb	r2, [r7, #5]
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	7bb9      	ldrb	r1, [r7, #14]
 800075a:	79ba      	ldrb	r2, [r7, #6]
 800075c:	1a8a      	subs	r2, r1, r2
 800075e:	fb03 f202 	mul.w	r2, r3, r2
 8000762:	7939      	ldrb	r1, [r7, #4]
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	1acb      	subs	r3, r1, r3
 8000768:	fb92 f3f3 	sdiv	r3, r2, r3
 800076c:	b2da      	uxtb	r2, r3
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	4413      	add	r3, r2
 8000772:	b2db      	uxtb	r3, r3
 8000774:	7bba      	ldrb	r2, [r7, #14]
 8000776:	4611      	mov	r1, r2
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fee5 	bl	8000548 <UC1609_PutPixel>
		for (uint8_t i = y1; i < y2 + 1; i += 2) {
 800077e:	7bbb      	ldrb	r3, [r7, #14]
 8000780:	3302      	adds	r3, #2
 8000782:	73bb      	strb	r3, [r7, #14]
 8000784:	793a      	ldrb	r2, [r7, #4]
 8000786:	7bbb      	ldrb	r3, [r7, #14]
 8000788:	429a      	cmp	r2, r3
 800078a:	d2e2      	bcs.n	8000752 <UC1609_DrawDottedLine+0x94>
		}
	}
}
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bd90      	pop	{r4, r7, pc}
	...

08000794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <__NVIC_GetPriorityGrouping+0x18>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	f003 0307 	and.w	r3, r3, #7
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	db0b      	blt.n	80007da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f003 021f 	and.w	r2, r3, #31
 80007c8:	4906      	ldr	r1, [pc, #24]	; (80007e4 <__NVIC_EnableIRQ+0x34>)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	095b      	lsrs	r3, r3, #5
 80007d0:	2001      	movs	r0, #1
 80007d2:	fa00 f202 	lsl.w	r2, r0, r2
 80007d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	e000e100 	.word	0xe000e100

080007e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	6039      	str	r1, [r7, #0]
 80007f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	db0a      	blt.n	8000812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	490c      	ldr	r1, [pc, #48]	; (8000834 <__NVIC_SetPriority+0x4c>)
 8000802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000806:	0112      	lsls	r2, r2, #4
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	440b      	add	r3, r1
 800080c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000810:	e00a      	b.n	8000828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4908      	ldr	r1, [pc, #32]	; (8000838 <__NVIC_SetPriority+0x50>)
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	f003 030f 	and.w	r3, r3, #15
 800081e:	3b04      	subs	r3, #4
 8000820:	0112      	lsls	r2, r2, #4
 8000822:	b2d2      	uxtb	r2, r2
 8000824:	440b      	add	r3, r1
 8000826:	761a      	strb	r2, [r3, #24]
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000e100 	.word	0xe000e100
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800083c:	b480      	push	{r7}
 800083e:	b089      	sub	sp, #36	; 0x24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	f1c3 0307 	rsb	r3, r3, #7
 8000856:	2b04      	cmp	r3, #4
 8000858:	bf28      	it	cs
 800085a:	2304      	movcs	r3, #4
 800085c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3304      	adds	r3, #4
 8000862:	2b06      	cmp	r3, #6
 8000864:	d902      	bls.n	800086c <NVIC_EncodePriority+0x30>
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3b03      	subs	r3, #3
 800086a:	e000      	b.n	800086e <NVIC_EncodePriority+0x32>
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000870:	f04f 32ff 	mov.w	r2, #4294967295
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43da      	mvns	r2, r3
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	401a      	ands	r2, r3
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000884:	f04f 31ff 	mov.w	r1, #4294967295
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	fa01 f303 	lsl.w	r3, r1, r3
 800088e:	43d9      	mvns	r1, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000894:	4313      	orrs	r3, r2
         );
}
 8000896:	4618      	mov	r0, r3
 8000898:	3724      	adds	r7, #36	; 0x24
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0U;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d103      	bne.n	80008bc <LL_ADC_DMA_GetRegAddr+0x1c>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t)&(ADCx->DR);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	334c      	adds	r3, #76	; 0x4c
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	e001      	b.n	80008c0 <LL_ADC_DMA_GetRegAddr+0x20>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register of multimode data */
    data_reg_addr = (uint32_t)&(ADC12_COMMON->DR);
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <LL_ADC_DMA_GetRegAddr+0x2c>)
 80008be:	60fb      	str	r3, [r7, #12]
  }
  
  return data_reg_addr;
 80008c0:	68fb      	ldr	r3, [r7, #12]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	4001244c 	.word	0x4001244c

080008d0 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b089      	sub	sp, #36	; 0x24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	332c      	adds	r3, #44	; 0x2c
 80008e0:	4619      	mov	r1, r3
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80008e8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008ec:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	fa92 f2a2 	rbit	r2, r2
 80008f4:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	fab2 f282 	clz	r2, r2
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	40d3      	lsrs	r3, r2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	440b      	add	r3, r1
 8000904:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	f003 031f 	and.w	r3, r3, #31
 8000910:	211f      	movs	r1, #31
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	401a      	ands	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f003 011f 	and.w	r1, r3, #31
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	f003 031f 	and.w	r3, r3, #31
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	431a      	orrs	r2, r3
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000930:	bf00      	nop
 8000932:	3724      	adds	r7, #36	; 0x24
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr

0800093a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800093a:	b480      	push	{r7}
 800093c:	b08d      	sub	sp, #52	; 0x34
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	330c      	adds	r3, #12
 800094a:	4619      	mov	r1, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000952:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000956:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	fa92 f2a2 	rbit	r2, r2
 800095e:	617a      	str	r2, [r7, #20]
  return result;
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	fab2 f282 	clz	r2, r2
 8000966:	b2d2      	uxtb	r2, r2
 8000968:	40d3      	lsrs	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	440b      	add	r3, r1
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 8000970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800097a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800097e:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000980:	6a39      	ldr	r1, [r7, #32]
 8000982:	fa91 f1a1 	rbit	r1, r1
 8000986:	61f9      	str	r1, [r7, #28]
  return result;
 8000988:	69f9      	ldr	r1, [r7, #28]
 800098a:	fab1 f181 	clz	r1, r1
 800098e:	b2c9      	uxtb	r1, r1
 8000990:	40cb      	lsrs	r3, r1
 8000992:	2107      	movs	r1, #7
 8000994:	fa01 f303 	lsl.w	r3, r1, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	401a      	ands	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80009a2:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80009a6:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80009aa:	fa91 f1a1 	rbit	r1, r1
 80009ae:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80009b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009b2:	fab1 f181 	clz	r1, r1
 80009b6:	b2c9      	uxtb	r1, r1
 80009b8:	40cb      	lsrs	r3, r1
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	fa01 f303 	lsl.w	r3, r1, r3
 80009c0:	431a      	orrs	r2, r3
 80009c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80009c6:	bf00      	nop
 80009c8:	3734      	adds	r7, #52	; 0x34
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	f043 0201 	orr.w	r2, r3, #1
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	609a      	str	r2, [r3, #8]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	f043 0204 	orr.w	r2, r3, #4
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	609a      	str	r2, [r3, #8]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
	...

08000a2c <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <LL_DMA_EnableChannel+0x38>)
 8000a3c:	5cd3      	ldrb	r3, [r2, r3]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4413      	add	r3, r2
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	683a      	ldr	r2, [r7, #0]
 8000a48:	3a01      	subs	r2, #1
 8000a4a:	4906      	ldr	r1, [pc, #24]	; (8000a64 <LL_DMA_EnableChannel+0x38>)
 8000a4c:	5c8a      	ldrb	r2, [r1, r2]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	440a      	add	r2, r1
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6013      	str	r3, [r2, #0]
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr
 8000a64:	08005548 	.word	0x08005548

08000a68 <LL_DMA_ConfigTransfer>:
  *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDATAALIGN_WORD
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configuration)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	4a0c      	ldr	r2, [pc, #48]	; (8000aac <LL_DMA_ConfigTransfer+0x44>)
 8000a7a:	5cd3      	ldrb	r3, [r2, r3]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	4413      	add	r3, r2
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a8c:	68ba      	ldr	r2, [r7, #8]
 8000a8e:	3a01      	subs	r2, #1
 8000a90:	4906      	ldr	r1, [pc, #24]	; (8000aac <LL_DMA_ConfigTransfer+0x44>)
 8000a92:	5c8a      	ldrb	r2, [r1, r2]
 8000a94:	4611      	mov	r1, r2
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	440a      	add	r2, r1
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_PSIZE | DMA_CCR_MSIZE | DMA_CCR_PL,
             Configuration);
}
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	08005548 	.word	0x08005548

08000ab0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <LL_DMA_SetDataTransferDirection+0x44>)
 8000ac2:	5cd3      	ldrb	r3, [r2, r3]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	4413      	add	r3, r2
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ad0:	f023 0310 	bic.w	r3, r3, #16
 8000ad4:	68ba      	ldr	r2, [r7, #8]
 8000ad6:	3a01      	subs	r2, #1
 8000ad8:	4906      	ldr	r1, [pc, #24]	; (8000af4 <LL_DMA_SetDataTransferDirection+0x44>)
 8000ada:	5c8a      	ldrb	r2, [r1, r2]
 8000adc:	4611      	mov	r1, r2
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	440a      	add	r2, r1
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	08005548 	.word	0x08005548

08000af8 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <LL_DMA_SetMode+0x40>)
 8000b0a:	5cd3      	ldrb	r3, [r2, r3]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4413      	add	r3, r2
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f023 0220 	bic.w	r2, r3, #32
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	4906      	ldr	r1, [pc, #24]	; (8000b38 <LL_DMA_SetMode+0x40>)
 8000b1e:	5ccb      	ldrb	r3, [r1, r3]
 8000b20:	4619      	mov	r1, r3
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	440b      	add	r3, r1
 8000b26:	4619      	mov	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	08005548 	.word	0x08005548

08000b3c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <LL_DMA_SetPeriphIncMode+0x40>)
 8000b4e:	5cd3      	ldrb	r3, [r2, r3]
 8000b50:	461a      	mov	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4413      	add	r3, r2
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	4906      	ldr	r1, [pc, #24]	; (8000b7c <LL_DMA_SetPeriphIncMode+0x40>)
 8000b62:	5ccb      	ldrb	r3, [r1, r3]
 8000b64:	4619      	mov	r1, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	440b      	add	r3, r1
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	08005548 	.word	0x08005548

08000b80 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <LL_DMA_SetMemoryIncMode+0x40>)
 8000b92:	5cd3      	ldrb	r3, [r2, r3]
 8000b94:	461a      	mov	r2, r3
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4413      	add	r3, r2
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	4906      	ldr	r1, [pc, #24]	; (8000bc0 <LL_DMA_SetMemoryIncMode+0x40>)
 8000ba6:	5ccb      	ldrb	r3, [r1, r3]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	440b      	add	r3, r1
 8000bae:	4619      	mov	r1, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	08005548 	.word	0x08005548

08000bc4 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <LL_DMA_SetPeriphSize+0x40>)
 8000bd6:	5cd3      	ldrb	r3, [r2, r3]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	4413      	add	r3, r2
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	4906      	ldr	r1, [pc, #24]	; (8000c04 <LL_DMA_SetPeriphSize+0x40>)
 8000bea:	5ccb      	ldrb	r3, [r1, r3]
 8000bec:	4619      	mov	r1, r3
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	440b      	add	r3, r1
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000bfa:	bf00      	nop
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	08005548 	.word	0x08005548

08000c08 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <LL_DMA_SetMemorySize+0x40>)
 8000c1a:	5cd3      	ldrb	r3, [r2, r3]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4413      	add	r3, r2
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	4906      	ldr	r1, [pc, #24]	; (8000c48 <LL_DMA_SetMemorySize+0x40>)
 8000c2e:	5ccb      	ldrb	r3, [r1, r3]
 8000c30:	4619      	mov	r1, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	440b      	add	r3, r1
 8000c36:	4619      	mov	r1, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	08005548 	.word	0x08005548

08000c4c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000c5e:	5cd3      	ldrb	r3, [r2, r3]
 8000c60:	461a      	mov	r2, r3
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4413      	add	r3, r2
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	4906      	ldr	r1, [pc, #24]	; (8000c8c <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000c72:	5ccb      	ldrb	r3, [r1, r3]
 8000c74:	4619      	mov	r1, r3
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	440b      	add	r3, r1
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000c82:	bf00      	nop
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	08005548 	.word	0x08005548

08000c90 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <LL_DMA_SetDataLength+0x40>)
 8000ca2:	5cd3      	ldrb	r3, [r2, r3]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	4413      	add	r3, r2
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	0c1b      	lsrs	r3, r3, #16
 8000cae:	041b      	lsls	r3, r3, #16
 8000cb0:	68ba      	ldr	r2, [r7, #8]
 8000cb2:	3a01      	subs	r2, #1
 8000cb4:	4906      	ldr	r1, [pc, #24]	; (8000cd0 <LL_DMA_SetDataLength+0x40>)
 8000cb6:	5c8a      	ldrb	r2, [r1, r2]
 8000cb8:	4611      	mov	r1, r2
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	440a      	add	r2, r1
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	08005548 	.word	0x08005548

08000cd4 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
 8000ce0:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	2b10      	cmp	r3, #16
 8000ce6:	d114      	bne.n	8000d12 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	4a15      	ldr	r2, [pc, #84]	; (8000d44 <LL_DMA_ConfigAddresses+0x70>)
 8000cee:	5cd3      	ldrb	r3, [r2, r3]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <LL_DMA_ConfigAddresses+0x70>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	461a      	mov	r2, r3
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4413      	add	r3, r2
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 8000d10:	e013      	b.n	8000d3a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <LL_DMA_ConfigAddresses+0x70>)
 8000d18:	5cd3      	ldrb	r3, [r2, r3]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	461a      	mov	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <LL_DMA_ConfigAddresses+0x70>)
 8000d2c:	5cd3      	ldrb	r3, [r2, r3]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	461a      	mov	r2, r3
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	60d3      	str	r3, [r2, #12]
}
 8000d3a:	bf00      	nop
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr
 8000d44:	08005548 	.word	0x08005548

08000d48 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <LL_DMA_EnableIT_TC+0x38>)
 8000d58:	5cd3      	ldrb	r3, [r2, r3]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4413      	add	r3, r2
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	3a01      	subs	r2, #1
 8000d66:	4906      	ldr	r1, [pc, #24]	; (8000d80 <LL_DMA_EnableIT_TC+0x38>)
 8000d68:	5c8a      	ldrb	r2, [r1, r2]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	440a      	add	r2, r1
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6013      	str	r3, [r2, #0]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	08005548 	.word	0x08005548

08000d84 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <LL_DMA_EnableIT_TE+0x38>)
 8000d94:	5cd3      	ldrb	r3, [r2, r3]
 8000d96:	461a      	mov	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	3a01      	subs	r2, #1
 8000da2:	4906      	ldr	r1, [pc, #24]	; (8000dbc <LL_DMA_EnableIT_TE+0x38>)
 8000da4:	5c8a      	ldrb	r2, [r1, r2]
 8000da6:	4611      	mov	r1, r2
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	440a      	add	r2, r1
 8000dac:	f043 0308 	orr.w	r3, r3, #8
 8000db0:	6013      	str	r3, [r2, #0]
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	08005548 	.word	0x08005548

08000dc0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dca:	695a      	ldr	r2, [r3, #20]
 8000dcc:	4907      	ldr	r1, [pc, #28]	; (8000dec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dd6:	695a      	ldr	r2, [r3, #20]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000

08000df0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dfa:	699a      	ldr	r2, [r3, #24]
 8000dfc:	4907      	ldr	r1, [pc, #28]	; (8000e1c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e06:	699a      	ldr	r2, [r3, #24]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000

08000e20 <getPwm>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int getPwm(int period, int tick) {
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	ap = (period * a) / 100;
 8000e2a:	4b45      	ldr	r3, [pc, #276]	; (8000f40 <getPwm+0x120>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	fb02 f303 	mul.w	r3, r2, r3
 8000e34:	4a43      	ldr	r2, [pc, #268]	; (8000f44 <getPwm+0x124>)
 8000e36:	fb82 1203 	smull	r1, r2, r2, r3
 8000e3a:	1152      	asrs	r2, r2, #5
 8000e3c:	17db      	asrs	r3, r3, #31
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	4a41      	ldr	r2, [pc, #260]	; (8000f48 <getPwm+0x128>)
 8000e42:	6013      	str	r3, [r2, #0]
	bp = (period - ap) * b / 100;
 8000e44:	4b40      	ldr	r3, [pc, #256]	; (8000f48 <getPwm+0x128>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	4a3f      	ldr	r2, [pc, #252]	; (8000f4c <getPwm+0x12c>)
 8000e4e:	6812      	ldr	r2, [r2, #0]
 8000e50:	fb02 f303 	mul.w	r3, r2, r3
 8000e54:	4a3b      	ldr	r2, [pc, #236]	; (8000f44 <getPwm+0x124>)
 8000e56:	fb82 1203 	smull	r1, r2, r2, r3
 8000e5a:	1152      	asrs	r2, r2, #5
 8000e5c:	17db      	asrs	r3, r3, #31
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	4a3b      	ldr	r2, [pc, #236]	; (8000f50 <getPwm+0x130>)
 8000e62:	6013      	str	r3, [r2, #0]
	cp = ((period - ap - bp) * c) / 100;
 8000e64:	4b38      	ldr	r3, [pc, #224]	; (8000f48 <getPwm+0x128>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	1ad2      	subs	r2, r2, r3
 8000e6c:	4b38      	ldr	r3, [pc, #224]	; (8000f50 <getPwm+0x130>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	4a38      	ldr	r2, [pc, #224]	; (8000f54 <getPwm+0x134>)
 8000e74:	6812      	ldr	r2, [r2, #0]
 8000e76:	fb02 f303 	mul.w	r3, r2, r3
 8000e7a:	4a32      	ldr	r2, [pc, #200]	; (8000f44 <getPwm+0x124>)
 8000e7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e80:	1152      	asrs	r2, r2, #5
 8000e82:	17db      	asrs	r3, r3, #31
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	4a34      	ldr	r2, [pc, #208]	; (8000f58 <getPwm+0x138>)
 8000e88:	6013      	str	r3, [r2, #0]
	dp = ((period - ap - bp - cp) * d) / 100;
 8000e8a:	4b2f      	ldr	r3, [pc, #188]	; (8000f48 <getPwm+0x128>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	1ad2      	subs	r2, r2, r3
 8000e92:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <getPwm+0x130>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	1ad2      	subs	r2, r2, r3
 8000e98:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <getPwm+0x138>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	4a2f      	ldr	r2, [pc, #188]	; (8000f5c <getPwm+0x13c>)
 8000ea0:	6812      	ldr	r2, [r2, #0]
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	4a27      	ldr	r2, [pc, #156]	; (8000f44 <getPwm+0x124>)
 8000ea8:	fb82 1203 	smull	r1, r2, r2, r3
 8000eac:	1152      	asrs	r2, r2, #5
 8000eae:	17db      	asrs	r3, r3, #31
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	4a2b      	ldr	r2, [pc, #172]	; (8000f60 <getPwm+0x140>)
 8000eb4:	6013      	str	r3, [r2, #0]
	if (tick < ap)
 8000eb6:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <getPwm+0x128>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	da01      	bge.n	8000ec4 <getPwm+0xa4>
		return 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e038      	b.n	8000f36 <getPwm+0x116>
	if (tick < (ap + cp))
 8000ec4:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <getPwm+0x128>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <getPwm+0x138>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4413      	add	r3, r2
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	da0c      	bge.n	8000eee <getPwm+0xce>
		return pwm * (tick - ap) / cp;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <getPwm+0x128>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <getPwm+0x144>)
 8000ede:	6812      	ldr	r2, [r2, #0]
 8000ee0:	fb03 f202 	mul.w	r2, r3, r2
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <getPwm+0x138>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000eec:	e023      	b.n	8000f36 <getPwm+0x116>
	if (tick < (period - bp - dp))
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <getPwm+0x130>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	1ad2      	subs	r2, r2, r3
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <getPwm+0x140>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	da02      	bge.n	8000f08 <getPwm+0xe8>
		return pwm;
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <getPwm+0x144>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	e016      	b.n	8000f36 <getPwm+0x116>
	if (tick < (period - bp))
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <getPwm+0x130>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	da0e      	bge.n	8000f34 <getPwm+0x114>
		return pwm * (period - tick - bp) / dp;
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	1ad2      	subs	r2, r2, r3
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <getPwm+0x130>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	4a10      	ldr	r2, [pc, #64]	; (8000f64 <getPwm+0x144>)
 8000f24:	6812      	ldr	r2, [r2, #0]
 8000f26:	fb03 f202 	mul.w	r2, r3, r2
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <getPwm+0x140>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f32:	e000      	b.n	8000f36 <getPwm+0x116>
	return 0;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	200008f8 	.word	0x200008f8
 8000f44:	51eb851f 	.word	0x51eb851f
 8000f48:	2000090c 	.word	0x2000090c
 8000f4c:	200008fc 	.word	0x200008fc
 8000f50:	20000910 	.word	0x20000910
 8000f54:	20000900 	.word	0x20000900
 8000f58:	20000914 	.word	0x20000914
 8000f5c:	20000904 	.word	0x20000904
 8000f60:	20000918 	.word	0x20000918
 8000f64:	200008f4 	.word	0x200008f4

08000f68 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

	if (htim == &htim3) {
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a26      	ldr	r2, [pc, #152]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d145      	bne.n	8001004 <HAL_TIM_PeriodElapsedCallback+0x9c>
		if (hallSensor != HAL_GPIO_ReadPin(HALL_GPIO_Port, HALL_Pin)) {
 8000f78:	2101      	movs	r1, #1
 8000f7a:	4825      	ldr	r0, [pc, #148]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000f7c:	f001 fb2a 	bl	80025d4 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b23      	ldr	r3, [pc, #140]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d01b      	beq.n	8000fc4 <HAL_TIM_PeriodElapsedCallback+0x5c>
			hallSensor = HAL_GPIO_ReadPin(HALL_GPIO_Port, HALL_Pin);
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	4820      	ldr	r0, [pc, #128]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000f90:	f001 fb20 	bl	80025d4 <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f9a:	601a      	str	r2, [r3, #0]
			period = tick;
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a1e      	ldr	r2, [pc, #120]	; (800101c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000fa2:	6013      	str	r3, [r2, #0]
			tick = 0;
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]

			if (period)
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00d      	beq.n	8000fce <HAL_TIM_PeriodElapsedCallback+0x66>
				revMeas = 2500 / period;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	; (800101c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000fba:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fbe:	4a18      	ldr	r2, [pc, #96]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e004      	b.n	8000fce <HAL_TIM_PeriodElapsedCallback+0x66>
		} else {
			tick++;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4a13      	ldr	r2, [pc, #76]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000fcc:	6013      	str	r3, [r2, #0]
		}
		if (tick > 25000) {
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	dd09      	ble.n	8000fee <HAL_TIM_PeriodElapsedCallback+0x86>
			tick = 0;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
			period = 25000;
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000fe2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000fe6:	601a      	str	r2, [r3, #0]
			revMeas = 0;
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]

		}
		TIM1->CCR1 = getPwm(period, tick);
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a09      	ldr	r2, [pc, #36]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff11 	bl	8000e20 <getPwm>
 8000ffe:	4602      	mov	r2, r0
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001002:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2000079c 	.word	0x2000079c
 8001010:	40010c00 	.word	0x40010c00
 8001014:	2000091c 	.word	0x2000091c
 8001018:	20000004 	.word	0x20000004
 800101c:	20000000 	.word	0x20000000
 8001020:	20000908 	.word	0x20000908
 8001024:	40012c00 	.word	0x40012c00

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102e:	f000 ffc1 	bl	8001fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001032:	f000 fa4b 	bl	80014cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001036:	f000 fd0f 	bl	8001a58 <MX_GPIO_Init>
  MX_TIM1_Init();
 800103a:	f000 fba7 	bl	800178c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800103e:	f000 fcc9 	bl	80019d4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001042:	f000 fb6d 	bl	8001720 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001046:	f000 fa9d 	bl	8001584 <MX_ADC1_Init>
  MX_DMA_Init();
 800104a:	f000 fced 	bl	8001a28 <MX_DMA_Init>
  MX_TIM3_Init();
 800104e:	f000 fc73 	bl	8001938 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001052:	f000 fc1d 	bl	8001890 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	hallSensor = HAL_GPIO_ReadPin(HALL_GPIO_Port, HALL_Pin);
 8001056:	2101      	movs	r1, #1
 8001058:	48a9      	ldr	r0, [pc, #676]	; (8001300 <main+0x2d8>)
 800105a:	f001 fabb 	bl	80025d4 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4ba8      	ldr	r3, [pc, #672]	; (8001304 <main+0x2dc>)
 8001064:	601a      	str	r2, [r3, #0]

	LL_ADC_StartCalibration(ADC1);
 8001066:	48a8      	ldr	r0, [pc, #672]	; (8001308 <main+0x2e0>)
 8001068:	f7ff fcc1 	bl	80009ee <LL_ADC_StartCalibration>

	UC1609_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port,
 800106c:	2302      	movs	r3, #2
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	4ba3      	ldr	r3, [pc, #652]	; (8001300 <main+0x2d8>)
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	4ba1      	ldr	r3, [pc, #644]	; (8001300 <main+0x2d8>)
 800107c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001080:	499f      	ldr	r1, [pc, #636]	; (8001300 <main+0x2d8>)
 8001082:	48a2      	ldr	r0, [pc, #648]	; (800130c <main+0x2e4>)
 8001084:	f7ff f8cc 	bl	8000220 <UC1609_Init>
	LCD_DC_Pin,
	LCD_RESET_GPIO_Port, LCD_RESET_Pin);

	HAL_TIM_Base_Start_IT(&htim3);
 8001088:	48a1      	ldr	r0, [pc, #644]	; (8001310 <main+0x2e8>)
 800108a:	f002 fa59 	bl	8003540 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800108e:	2100      	movs	r1, #0
 8001090:	48a0      	ldr	r0, [pc, #640]	; (8001314 <main+0x2ec>)
 8001092:	f002 faf1 	bl	8003678 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001096:	213c      	movs	r1, #60	; 0x3c
 8001098:	489f      	ldr	r0, [pc, #636]	; (8001318 <main+0x2f0>)
 800109a:	f002 fc2b 	bl	80038f4 <HAL_TIM_Encoder_Start>

	LL_DMA_ConfigTransfer(DMA1,
 800109e:	f242 52a0 	movw	r2, #9632	; 0x25a0
 80010a2:	2101      	movs	r1, #1
 80010a4:	489d      	ldr	r0, [pc, #628]	; (800131c <main+0x2f4>)
 80010a6:	f7ff fcdf 	bl	8000a68 <LL_DMA_ConfigTransfer>
	LL_DMA_PERIPH_NOINCREMENT |
	LL_DMA_MEMORY_INCREMENT |
	LL_DMA_PDATAALIGN_HALFWORD |
	LL_DMA_MDATAALIGN_HALFWORD |
	LL_DMA_PRIORITY_HIGH);
	LL_DMA_ConfigAddresses(DMA1,
 80010aa:	2100      	movs	r1, #0
 80010ac:	4896      	ldr	r0, [pc, #600]	; (8001308 <main+0x2e0>)
 80010ae:	f7ff fbf7 	bl	80008a0 <LL_ADC_DMA_GetRegAddr>
 80010b2:	4602      	mov	r2, r0
 80010b4:	499a      	ldr	r1, [pc, #616]	; (8001320 <main+0x2f8>)
 80010b6:	2300      	movs	r3, #0
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	460b      	mov	r3, r1
 80010bc:	2101      	movs	r1, #1
 80010be:	4897      	ldr	r0, [pc, #604]	; (800131c <main+0x2f4>)
 80010c0:	f7ff fe08 	bl	8000cd4 <LL_DMA_ConfigAddresses>
	LL_DMA_CHANNEL_1, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
			(uint32_t) &adc,
			LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 6);
 80010c4:	2206      	movs	r2, #6
 80010c6:	2101      	movs	r1, #1
 80010c8:	4894      	ldr	r0, [pc, #592]	; (800131c <main+0x2f4>)
 80010ca:	f7ff fde1 	bl	8000c90 <LL_DMA_SetDataLength>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 80010ce:	2101      	movs	r1, #1
 80010d0:	4892      	ldr	r0, [pc, #584]	; (800131c <main+0x2f4>)
 80010d2:	f7ff fe39 	bl	8000d48 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
 80010d6:	2101      	movs	r1, #1
 80010d8:	4890      	ldr	r0, [pc, #576]	; (800131c <main+0x2f4>)
 80010da:	f7ff fe53 	bl	8000d84 <LL_DMA_EnableIT_TE>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 80010de:	2101      	movs	r1, #1
 80010e0:	488e      	ldr	r0, [pc, #568]	; (800131c <main+0x2f4>)
 80010e2:	f7ff fca3 	bl	8000a2c <LL_DMA_EnableChannel>

	LL_ADC_Enable(ADC1);
 80010e6:	4888      	ldr	r0, [pc, #544]	; (8001308 <main+0x2e0>)
 80010e8:	f7ff fc72 	bl	80009d0 <LL_ADC_Enable>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_ADC_REG_StartConversionSWStart(ADC1);
 80010ec:	4886      	ldr	r0, [pc, #536]	; (8001308 <main+0x2e0>)
 80010ee:	f7ff fc8d 	bl	8000a0c <LL_ADC_REG_StartConversionSWStart>

	while (1) {
		a = (adc[0] - 45) / 40;
 80010f2:	4b8b      	ldr	r3, [pc, #556]	; (8001320 <main+0x2f8>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	3b2d      	subs	r3, #45	; 0x2d
 80010fa:	4a8a      	ldr	r2, [pc, #552]	; (8001324 <main+0x2fc>)
 80010fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001100:	1112      	asrs	r2, r2, #4
 8001102:	17db      	asrs	r3, r3, #31
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	4a88      	ldr	r2, [pc, #544]	; (8001328 <main+0x300>)
 8001108:	6013      	str	r3, [r2, #0]
		b = (adc[1] - 45) / 40;
 800110a:	4b85      	ldr	r3, [pc, #532]	; (8001320 <main+0x2f8>)
 800110c:	885b      	ldrh	r3, [r3, #2]
 800110e:	b29b      	uxth	r3, r3
 8001110:	3b2d      	subs	r3, #45	; 0x2d
 8001112:	4a84      	ldr	r2, [pc, #528]	; (8001324 <main+0x2fc>)
 8001114:	fb82 1203 	smull	r1, r2, r2, r3
 8001118:	1112      	asrs	r2, r2, #4
 800111a:	17db      	asrs	r3, r3, #31
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	4a83      	ldr	r2, [pc, #524]	; (800132c <main+0x304>)
 8001120:	6013      	str	r3, [r2, #0]
		c = (adc[2] - 45) / 40;
 8001122:	4b7f      	ldr	r3, [pc, #508]	; (8001320 <main+0x2f8>)
 8001124:	889b      	ldrh	r3, [r3, #4]
 8001126:	b29b      	uxth	r3, r3
 8001128:	3b2d      	subs	r3, #45	; 0x2d
 800112a:	4a7e      	ldr	r2, [pc, #504]	; (8001324 <main+0x2fc>)
 800112c:	fb82 1203 	smull	r1, r2, r2, r3
 8001130:	1112      	asrs	r2, r2, #4
 8001132:	17db      	asrs	r3, r3, #31
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	4a7e      	ldr	r2, [pc, #504]	; (8001330 <main+0x308>)
 8001138:	6013      	str	r3, [r2, #0]
		d = (adc[3] - 45) / 40;
 800113a:	4b79      	ldr	r3, [pc, #484]	; (8001320 <main+0x2f8>)
 800113c:	88db      	ldrh	r3, [r3, #6]
 800113e:	b29b      	uxth	r3, r3
 8001140:	3b2d      	subs	r3, #45	; 0x2d
 8001142:	4a78      	ldr	r2, [pc, #480]	; (8001324 <main+0x2fc>)
 8001144:	fb82 1203 	smull	r1, r2, r2, r3
 8001148:	1112      	asrs	r2, r2, #4
 800114a:	17db      	asrs	r3, r3, #31
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	4a79      	ldr	r2, [pc, #484]	; (8001334 <main+0x30c>)
 8001150:	6013      	str	r3, [r2, #0]
		pwm = (adc[4] - 45) / 40;
 8001152:	4b73      	ldr	r3, [pc, #460]	; (8001320 <main+0x2f8>)
 8001154:	891b      	ldrh	r3, [r3, #8]
 8001156:	b29b      	uxth	r3, r3
 8001158:	3b2d      	subs	r3, #45	; 0x2d
 800115a:	4a72      	ldr	r2, [pc, #456]	; (8001324 <main+0x2fc>)
 800115c:	fb82 1203 	smull	r1, r2, r2, r3
 8001160:	1112      	asrs	r2, r2, #4
 8001162:	17db      	asrs	r3, r3, #31
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	4a74      	ldr	r2, [pc, #464]	; (8001338 <main+0x310>)
 8001168:	6013      	str	r3, [r2, #0]

		if (a < 0)
 800116a:	4b6f      	ldr	r3, [pc, #444]	; (8001328 <main+0x300>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	da02      	bge.n	8001178 <main+0x150>
			a = 0;
 8001172:	4b6d      	ldr	r3, [pc, #436]	; (8001328 <main+0x300>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
		if (a > 100)
 8001178:	4b6b      	ldr	r3, [pc, #428]	; (8001328 <main+0x300>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b64      	cmp	r3, #100	; 0x64
 800117e:	dd02      	ble.n	8001186 <main+0x15e>
			a = 100;
 8001180:	4b69      	ldr	r3, [pc, #420]	; (8001328 <main+0x300>)
 8001182:	2264      	movs	r2, #100	; 0x64
 8001184:	601a      	str	r2, [r3, #0]
		if (b < 0)
 8001186:	4b69      	ldr	r3, [pc, #420]	; (800132c <main+0x304>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	da02      	bge.n	8001194 <main+0x16c>
			b = 0;
 800118e:	4b67      	ldr	r3, [pc, #412]	; (800132c <main+0x304>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
		if (b > 100)
 8001194:	4b65      	ldr	r3, [pc, #404]	; (800132c <main+0x304>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b64      	cmp	r3, #100	; 0x64
 800119a:	dd02      	ble.n	80011a2 <main+0x17a>
			b = 100;
 800119c:	4b63      	ldr	r3, [pc, #396]	; (800132c <main+0x304>)
 800119e:	2264      	movs	r2, #100	; 0x64
 80011a0:	601a      	str	r2, [r3, #0]
		if (c < 0)
 80011a2:	4b63      	ldr	r3, [pc, #396]	; (8001330 <main+0x308>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	da02      	bge.n	80011b0 <main+0x188>
			c = 0;
 80011aa:	4b61      	ldr	r3, [pc, #388]	; (8001330 <main+0x308>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
		if (c > 100)
 80011b0:	4b5f      	ldr	r3, [pc, #380]	; (8001330 <main+0x308>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b64      	cmp	r3, #100	; 0x64
 80011b6:	dd02      	ble.n	80011be <main+0x196>
			c = 100;
 80011b8:	4b5d      	ldr	r3, [pc, #372]	; (8001330 <main+0x308>)
 80011ba:	2264      	movs	r2, #100	; 0x64
 80011bc:	601a      	str	r2, [r3, #0]
		if (d < 0)
 80011be:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <main+0x30c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	da02      	bge.n	80011cc <main+0x1a4>
			d = 0;
 80011c6:	4b5b      	ldr	r3, [pc, #364]	; (8001334 <main+0x30c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
		if (d > 100)
 80011cc:	4b59      	ldr	r3, [pc, #356]	; (8001334 <main+0x30c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b64      	cmp	r3, #100	; 0x64
 80011d2:	dd02      	ble.n	80011da <main+0x1b2>
			d = 100;
 80011d4:	4b57      	ldr	r3, [pc, #348]	; (8001334 <main+0x30c>)
 80011d6:	2264      	movs	r2, #100	; 0x64
 80011d8:	601a      	str	r2, [r3, #0]
		if (pwm < 0)
 80011da:	4b57      	ldr	r3, [pc, #348]	; (8001338 <main+0x310>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da02      	bge.n	80011e8 <main+0x1c0>
			pwm = 0;
 80011e2:	4b55      	ldr	r3, [pc, #340]	; (8001338 <main+0x310>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
		if (pwm > 100)
 80011e8:	4b53      	ldr	r3, [pc, #332]	; (8001338 <main+0x310>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b64      	cmp	r3, #100	; 0x64
 80011ee:	dd02      	ble.n	80011f6 <main+0x1ce>
			pwm = 100;
 80011f0:	4b51      	ldr	r3, [pc, #324]	; (8001338 <main+0x310>)
 80011f2:	2264      	movs	r2, #100	; 0x64
 80011f4:	601a      	str	r2, [r3, #0]

		UC1609_Clean();
 80011f6:	f7ff f8df 	bl	80003b8 <UC1609_Clean>

		int ax = (140 * a) / 100;
 80011fa:	4b4b      	ldr	r3, [pc, #300]	; (8001328 <main+0x300>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	228c      	movs	r2, #140	; 0x8c
 8001200:	fb02 f303 	mul.w	r3, r2, r3
 8001204:	4a4d      	ldr	r2, [pc, #308]	; (800133c <main+0x314>)
 8001206:	fb82 1203 	smull	r1, r2, r2, r3
 800120a:	1152      	asrs	r2, r2, #5
 800120c:	17db      	asrs	r3, r3, #31
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	60fb      	str	r3, [r7, #12]
		int bx = (140 - ax) * b / 100;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f1c3 038c 	rsb	r3, r3, #140	; 0x8c
 8001218:	4a44      	ldr	r2, [pc, #272]	; (800132c <main+0x304>)
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	fb02 f303 	mul.w	r3, r2, r3
 8001220:	4a46      	ldr	r2, [pc, #280]	; (800133c <main+0x314>)
 8001222:	fb82 1203 	smull	r1, r2, r2, r3
 8001226:	1152      	asrs	r2, r2, #5
 8001228:	17db      	asrs	r3, r3, #31
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	60bb      	str	r3, [r7, #8]
		int cx = ((140 - ax - bx) * c) / 100;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f1c3 028c 	rsb	r2, r3, #140	; 0x8c
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	4a3d      	ldr	r2, [pc, #244]	; (8001330 <main+0x308>)
 800123a:	6812      	ldr	r2, [r2, #0]
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	4a3e      	ldr	r2, [pc, #248]	; (800133c <main+0x314>)
 8001242:	fb82 1203 	smull	r1, r2, r2, r3
 8001246:	1152      	asrs	r2, r2, #5
 8001248:	17db      	asrs	r3, r3, #31
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	607b      	str	r3, [r7, #4]
		int dx = ((140 - ax - bx - cx) * d) / 100;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f1c3 028c 	rsb	r2, r3, #140	; 0x8c
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1ad2      	subs	r2, r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	4a35      	ldr	r2, [pc, #212]	; (8001334 <main+0x30c>)
 800125e:	6812      	ldr	r2, [r2, #0]
 8001260:	fb02 f303 	mul.w	r3, r2, r3
 8001264:	4a35      	ldr	r2, [pc, #212]	; (800133c <main+0x314>)
 8001266:	fb82 1203 	smull	r1, r2, r2, r3
 800126a:	1152      	asrs	r2, r2, #5
 800126c:	17db      	asrs	r3, r3, #31
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	603b      	str	r3, [r7, #0]

		UC1609_DrawLine(ax, 63, ax + cx, 63 - 63 * pwm / 100);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	b2d8      	uxtb	r0, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4413      	add	r3, r2
 8001280:	b2d9      	uxtb	r1, r3
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <main+0x310>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4613      	mov	r3, r2
 8001288:	019b      	lsls	r3, r3, #6
 800128a:	1a9b      	subs	r3, r3, r2
 800128c:	4a2b      	ldr	r2, [pc, #172]	; (800133c <main+0x314>)
 800128e:	fb82 4203 	smull	r4, r2, r2, r3
 8001292:	1152      	asrs	r2, r2, #5
 8001294:	17db      	asrs	r3, r3, #31
 8001296:	1a9b      	subs	r3, r3, r2
 8001298:	b2db      	uxtb	r3, r3
 800129a:	333f      	adds	r3, #63	; 0x3f
 800129c:	b2db      	uxtb	r3, r3
 800129e:	460a      	mov	r2, r1
 80012a0:	213f      	movs	r1, #63	; 0x3f
 80012a2:	f7ff f987 	bl	80005b4 <UC1609_DrawLine>
		UC1609_DrawLine(ax + cx, 63 - 63 * pwm / 100, 140 - bx - dx,
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	b2d8      	uxtb	r0, r3
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <main+0x310>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4613      	mov	r3, r2
 80012b8:	019b      	lsls	r3, r3, #6
 80012ba:	1a9b      	subs	r3, r3, r2
 80012bc:	4a1f      	ldr	r2, [pc, #124]	; (800133c <main+0x314>)
 80012be:	fb82 1203 	smull	r1, r2, r2, r3
 80012c2:	1152      	asrs	r2, r2, #5
 80012c4:	17db      	asrs	r3, r3, #31
 80012c6:	1a9b      	subs	r3, r3, r2
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	333f      	adds	r3, #63	; 0x3f
 80012cc:	b2d9      	uxtb	r1, r3
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	f06f 0373 	mvn.w	r3, #115	; 0x73
 80012de:	1a9b      	subs	r3, r3, r2
 80012e0:	b2dc      	uxtb	r4, r3
				63 - 63 * pwm / 100);
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <main+0x310>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4613      	mov	r3, r2
 80012e8:	019b      	lsls	r3, r3, #6
 80012ea:	1a9b      	subs	r3, r3, r2
 80012ec:	4a13      	ldr	r2, [pc, #76]	; (800133c <main+0x314>)
 80012ee:	fb82 c203 	smull	ip, r2, r2, r3
 80012f2:	1152      	asrs	r2, r2, #5
 80012f4:	17db      	asrs	r3, r3, #31
 80012f6:	1a9b      	subs	r3, r3, r2
		UC1609_DrawLine(ax + cx, 63 - 63 * pwm / 100, 140 - bx - dx,
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	333f      	adds	r3, #63	; 0x3f
 80012fc:	e020      	b.n	8001340 <main+0x318>
 80012fe:	bf00      	nop
 8001300:	40010c00 	.word	0x40010c00
 8001304:	2000091c 	.word	0x2000091c
 8001308:	40012400 	.word	0x40012400
 800130c:	200006b4 	.word	0x200006b4
 8001310:	2000079c 	.word	0x2000079c
 8001314:	2000070c 	.word	0x2000070c
 8001318:	20000754 	.word	0x20000754
 800131c:	40020000 	.word	0x40020000
 8001320:	200008e8 	.word	0x200008e8
 8001324:	66666667 	.word	0x66666667
 8001328:	200008f8 	.word	0x200008f8
 800132c:	200008fc 	.word	0x200008fc
 8001330:	20000900 	.word	0x20000900
 8001334:	20000904 	.word	0x20000904
 8001338:	200008f4 	.word	0x200008f4
 800133c:	51eb851f 	.word	0x51eb851f
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4622      	mov	r2, r4
 8001344:	f7ff f936 	bl	80005b4 <UC1609_DrawLine>
		UC1609_DrawLine(140 - dx - bx, 63 - 63 * pwm / 100, 140 - bx, 63);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	4413      	add	r3, r2
 8001352:	b2da      	uxtb	r2, r3
 8001354:	f06f 0373 	mvn.w	r3, #115	; 0x73
 8001358:	1a9b      	subs	r3, r3, r2
 800135a:	b2d8      	uxtb	r0, r3
 800135c:	4b44      	ldr	r3, [pc, #272]	; (8001470 <main+0x448>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4613      	mov	r3, r2
 8001362:	019b      	lsls	r3, r3, #6
 8001364:	1a9b      	subs	r3, r3, r2
 8001366:	4a43      	ldr	r2, [pc, #268]	; (8001474 <main+0x44c>)
 8001368:	fb82 1203 	smull	r1, r2, r2, r3
 800136c:	1152      	asrs	r2, r2, #5
 800136e:	17db      	asrs	r3, r3, #31
 8001370:	1a9b      	subs	r3, r3, r2
 8001372:	b2db      	uxtb	r3, r3
 8001374:	333f      	adds	r3, #63	; 0x3f
 8001376:	b2d9      	uxtb	r1, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	f06f 0373 	mvn.w	r3, #115	; 0x73
 8001380:	1a9b      	subs	r3, r3, r2
 8001382:	b2da      	uxtb	r2, r3
 8001384:	233f      	movs	r3, #63	; 0x3f
 8001386:	f7ff f915 	bl	80005b4 <UC1609_DrawLine>

		sprintf(string1, "Ax:%d", ap);
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <main+0x450>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	493a      	ldr	r1, [pc, #232]	; (800147c <main+0x454>)
 8001392:	483b      	ldr	r0, [pc, #236]	; (8001480 <main+0x458>)
 8001394:	f003 fc3c 	bl	8004c10 <siprintf>
		sprintf(string2, "Bx:%d", bp);
 8001398:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <main+0x45c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	493a      	ldr	r1, [pc, #232]	; (8001488 <main+0x460>)
 80013a0:	483a      	ldr	r0, [pc, #232]	; (800148c <main+0x464>)
 80013a2:	f003 fc35 	bl	8004c10 <siprintf>
		sprintf(string3, "Cx:%d", cp);
 80013a6:	4b3a      	ldr	r3, [pc, #232]	; (8001490 <main+0x468>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4939      	ldr	r1, [pc, #228]	; (8001494 <main+0x46c>)
 80013ae:	483a      	ldr	r0, [pc, #232]	; (8001498 <main+0x470>)
 80013b0:	f003 fc2e 	bl	8004c10 <siprintf>
		sprintf(string4, "Dx:%d", dp);
 80013b4:	4b39      	ldr	r3, [pc, #228]	; (800149c <main+0x474>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4939      	ldr	r1, [pc, #228]	; (80014a0 <main+0x478>)
 80013bc:	4839      	ldr	r0, [pc, #228]	; (80014a4 <main+0x47c>)
 80013be:	f003 fc27 	bl	8004c10 <siprintf>
		sprintf(string5, "PWM:%d", pwm);
 80013c2:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <main+0x448>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	4937      	ldr	r1, [pc, #220]	; (80014a8 <main+0x480>)
 80013ca:	4838      	ldr	r0, [pc, #224]	; (80014ac <main+0x484>)
 80013cc:	f003 fc20 	bl	8004c10 <siprintf>
		sprintf(string6, "R:%d", revMeas);
 80013d0:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <main+0x488>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4937      	ldr	r1, [pc, #220]	; (80014b4 <main+0x48c>)
 80013d8:	4837      	ldr	r0, [pc, #220]	; (80014b8 <main+0x490>)
 80013da:	f003 fc19 	bl	8004c10 <siprintf>
		sprintf(string7, "Q:%d", period);
 80013de:	4b37      	ldr	r3, [pc, #220]	; (80014bc <main+0x494>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	4936      	ldr	r1, [pc, #216]	; (80014c0 <main+0x498>)
 80013e6:	4837      	ldr	r0, [pc, #220]	; (80014c4 <main+0x49c>)
 80013e8:	f003 fc12 	bl	8004c10 <siprintf>

		UC1609_SetPos(24, 0);
 80013ec:	2100      	movs	r1, #0
 80013ee:	2018      	movs	r0, #24
 80013f0:	f7fe ff88 	bl	8000304 <UC1609_SetPos>
		UC1609_PutString(string1);
 80013f4:	4822      	ldr	r0, [pc, #136]	; (8001480 <main+0x458>)
 80013f6:	f7ff f857 	bl	80004a8 <UC1609_PutString>
		UC1609_SetPos(24, 1);
 80013fa:	2101      	movs	r1, #1
 80013fc:	2018      	movs	r0, #24
 80013fe:	f7fe ff81 	bl	8000304 <UC1609_SetPos>
		UC1609_PutString(string2);
 8001402:	4822      	ldr	r0, [pc, #136]	; (800148c <main+0x464>)
 8001404:	f7ff f850 	bl	80004a8 <UC1609_PutString>
		UC1609_SetPos(24, 2);
 8001408:	2102      	movs	r1, #2
 800140a:	2018      	movs	r0, #24
 800140c:	f7fe ff7a 	bl	8000304 <UC1609_SetPos>
		UC1609_PutString(string3);
 8001410:	4821      	ldr	r0, [pc, #132]	; (8001498 <main+0x470>)
 8001412:	f7ff f849 	bl	80004a8 <UC1609_PutString>
		UC1609_SetPos(24, 3);
 8001416:	2103      	movs	r1, #3
 8001418:	2018      	movs	r0, #24
 800141a:	f7fe ff73 	bl	8000304 <UC1609_SetPos>
		UC1609_PutString(string4);
 800141e:	4821      	ldr	r0, [pc, #132]	; (80014a4 <main+0x47c>)
 8001420:	f7ff f842 	bl	80004a8 <UC1609_PutString>
		UC1609_SetPos(24, 4);
 8001424:	2104      	movs	r1, #4
 8001426:	2018      	movs	r0, #24
 8001428:	f7fe ff6c 	bl	8000304 <UC1609_SetPos>
		UC1609_PutString(string5);
 800142c:	481f      	ldr	r0, [pc, #124]	; (80014ac <main+0x484>)
 800142e:	f7ff f83b 	bl	80004a8 <UC1609_PutString>
		UC1609_SetPos(24, 5);
 8001432:	2105      	movs	r1, #5
 8001434:	2018      	movs	r0, #24
 8001436:	f7fe ff65 	bl	8000304 <UC1609_SetPos>
		UC1609_PutString(string6);
 800143a:	481f      	ldr	r0, [pc, #124]	; (80014b8 <main+0x490>)
 800143c:	f7ff f834 	bl	80004a8 <UC1609_PutString>
		UC1609_SetPos(24, 6);
 8001440:	2106      	movs	r1, #6
 8001442:	2018      	movs	r0, #24
 8001444:	f7fe ff5e 	bl	8000304 <UC1609_SetPos>
		UC1609_PutString(string7);
 8001448:	481e      	ldr	r0, [pc, #120]	; (80014c4 <main+0x49c>)
 800144a:	f7ff f82d 	bl	80004a8 <UC1609_PutString>
		UC1609_SetPos(24, 7);
 800144e:	2107      	movs	r1, #7
 8001450:	2018      	movs	r0, #24
 8001452:	f7fe ff57 	bl	8000304 <UC1609_SetPos>
		UC1609_PutString(string8);
 8001456:	481c      	ldr	r0, [pc, #112]	; (80014c8 <main+0x4a0>)
 8001458:	f7ff f826 	bl	80004a8 <UC1609_PutString>
		UC1609_DrawDottedLine(140, 0, 140, 63);
 800145c:	233f      	movs	r3, #63	; 0x3f
 800145e:	228c      	movs	r2, #140	; 0x8c
 8001460:	2100      	movs	r1, #0
 8001462:	208c      	movs	r0, #140	; 0x8c
 8001464:	f7ff f92b 	bl	80006be <UC1609_DrawDottedLine>

		UC1609_UpdateScreen();
 8001468:	f7fe ff6e 	bl	8000348 <UC1609_UpdateScreen>
	while (1) {
 800146c:	e641      	b.n	80010f2 <main+0xca>
 800146e:	bf00      	nop
 8001470:	200008f4 	.word	0x200008f4
 8001474:	51eb851f 	.word	0x51eb851f
 8001478:	2000090c 	.word	0x2000090c
 800147c:	08005500 	.word	0x08005500
 8001480:	20000828 	.word	0x20000828
 8001484:	20000910 	.word	0x20000910
 8001488:	08005508 	.word	0x08005508
 800148c:	20000840 	.word	0x20000840
 8001490:	20000914 	.word	0x20000914
 8001494:	08005510 	.word	0x08005510
 8001498:	20000858 	.word	0x20000858
 800149c:	20000918 	.word	0x20000918
 80014a0:	08005518 	.word	0x08005518
 80014a4:	20000870 	.word	0x20000870
 80014a8:	08005520 	.word	0x08005520
 80014ac:	20000888 	.word	0x20000888
 80014b0:	20000908 	.word	0x20000908
 80014b4:	08005528 	.word	0x08005528
 80014b8:	200008a0 	.word	0x200008a0
 80014bc:	20000000 	.word	0x20000000
 80014c0:	08005530 	.word	0x08005530
 80014c4:	200008b8 	.word	0x200008b8
 80014c8:	200008d0 	.word	0x200008d0

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b094      	sub	sp, #80	; 0x50
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d6:	2228      	movs	r2, #40	; 0x28
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 fb90 	bl	8004c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fc:	2301      	movs	r3, #1
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150a:	2301      	movs	r3, #1
 800150c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150e:	2302      	movs	r3, #2
 8001510:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001512:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001516:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001518:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800151c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001522:	4618      	mov	r0, r3
 8001524:	f001 f886 	bl	8002634 <HAL_RCC_OscConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800152e:	f000 faf9 	bl	8001b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001532:	230f      	movs	r3, #15
 8001534:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001536:	2302      	movs	r3, #2
 8001538:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800153e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001542:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2102      	movs	r1, #2
 800154e:	4618      	mov	r0, r3
 8001550:	f001 faf2 	bl	8002b38 <HAL_RCC_ClockConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800155a:	f000 fae3 	bl	8001b24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800155e:	2302      	movs	r3, #2
 8001560:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001566:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	4618      	mov	r0, r3
 800156c:	f001 fc7c 	bl	8002e68 <HAL_RCCEx_PeriphCLKConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001576:	f000 fad5 	bl	8001b24 <Error_Handler>
  }
}
 800157a:	bf00      	nop
 800157c:	3750      	adds	r7, #80	; 0x50
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08e      	sub	sp, #56	; 0x38
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800158a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001598:	f107 0318 	add.w	r3, r7, #24
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80015b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015ba:	f7ff fc19 	bl	8000df0 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80015be:	2004      	movs	r0, #4
 80015c0:	f7ff fc16 	bl	8000df0 <LL_APB2_GRP1_EnableClock>
  PA2   ------> ADC1_IN2
  PA3   ------> ADC1_IN3
  PA4   ------> ADC1_IN4
  PA6   ------> ADC1_IN6
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 80015c4:	f645 735f 	movw	r3, #24415	; 0x5f5f
 80015c8:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_6;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	484b      	ldr	r0, [pc, #300]	; (8001700 <MX_ADC1_Init+0x17c>)
 80015d4:	f003 fa75 	bl	8004ac2 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80015d8:	2200      	movs	r2, #0
 80015da:	2101      	movs	r1, #1
 80015dc:	4849      	ldr	r0, [pc, #292]	; (8001704 <MX_ADC1_Init+0x180>)
 80015de:	f7ff fa67 	bl	8000ab0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 80015e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015e6:	2101      	movs	r1, #1
 80015e8:	4846      	ldr	r0, [pc, #280]	; (8001704 <MX_ADC1_Init+0x180>)
 80015ea:	f7ff fb2f 	bl	8000c4c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 80015ee:	2220      	movs	r2, #32
 80015f0:	2101      	movs	r1, #1
 80015f2:	4844      	ldr	r0, [pc, #272]	; (8001704 <MX_ADC1_Init+0x180>)
 80015f4:	f7ff fa80 	bl	8000af8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2101      	movs	r1, #1
 80015fc:	4841      	ldr	r0, [pc, #260]	; (8001704 <MX_ADC1_Init+0x180>)
 80015fe:	f7ff fa9d 	bl	8000b3c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	2101      	movs	r1, #1
 8001606:	483f      	ldr	r0, [pc, #252]	; (8001704 <MX_ADC1_Init+0x180>)
 8001608:	f7ff faba 	bl	8000b80 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 800160c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001610:	2101      	movs	r1, #1
 8001612:	483c      	ldr	r0, [pc, #240]	; (8001704 <MX_ADC1_Init+0x180>)
 8001614:	f7ff fad6 	bl	8000bc4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8001618:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800161c:	2101      	movs	r1, #1
 800161e:	4839      	ldr	r0, [pc, #228]	; (8001704 <MX_ADC1_Init+0x180>)
 8001620:	f7ff faf2 	bl	8000c08 <LL_DMA_SetMemorySize>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001624:	2300      	movs	r3, #0
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8001628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800162e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001632:	4619      	mov	r1, r3
 8001634:	4834      	ldr	r0, [pc, #208]	; (8001708 <MX_ADC1_Init+0x184>)
 8001636:	f003 f91f 	bl	8004878 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800163a:	2300      	movs	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800163e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001642:	4619      	mov	r1, r3
 8001644:	4830      	ldr	r0, [pc, #192]	; (8001708 <MX_ADC1_Init+0x184>)
 8001646:	f003 f8e5 	bl	8004814 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800164a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800164e:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS;
 8001650:	f44f 03a0 	mov.w	r3, #5242880	; 0x500000
 8001654:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 800165a:	2302      	movs	r3, #2
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 800165e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001664:	f107 0318 	add.w	r3, r7, #24
 8001668:	4619      	mov	r1, r3
 800166a:	4827      	ldr	r0, [pc, #156]	; (8001708 <MX_ADC1_Init+0x184>)
 800166c:	f003 f92b 	bl	80048c6 <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8001670:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001678:	4823      	ldr	r0, [pc, #140]	; (8001708 <MX_ADC1_Init+0x184>)
 800167a:	f7ff f929 	bl	80008d0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 800167e:	2207      	movs	r2, #7
 8001680:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001684:	4820      	ldr	r0, [pc, #128]	; (8001708 <MX_ADC1_Init+0x184>)
 8001686:	f7ff f958 	bl	800093a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 800168a:	4a20      	ldr	r2, [pc, #128]	; (800170c <MX_ADC1_Init+0x188>)
 800168c:	f240 2105 	movw	r1, #517	; 0x205
 8001690:	481d      	ldr	r0, [pc, #116]	; (8001708 <MX_ADC1_Init+0x184>)
 8001692:	f7ff f91d 	bl	80008d0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8001696:	2207      	movs	r2, #7
 8001698:	491c      	ldr	r1, [pc, #112]	; (800170c <MX_ADC1_Init+0x188>)
 800169a:	481b      	ldr	r0, [pc, #108]	; (8001708 <MX_ADC1_Init+0x184>)
 800169c:	f7ff f94d 	bl	800093a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <MX_ADC1_Init+0x18c>)
 80016a2:	f240 210a 	movw	r1, #522	; 0x20a
 80016a6:	4818      	ldr	r0, [pc, #96]	; (8001708 <MX_ADC1_Init+0x184>)
 80016a8:	f7ff f912 	bl	80008d0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80016ac:	2207      	movs	r2, #7
 80016ae:	4918      	ldr	r1, [pc, #96]	; (8001710 <MX_ADC1_Init+0x18c>)
 80016b0:	4815      	ldr	r0, [pc, #84]	; (8001708 <MX_ADC1_Init+0x184>)
 80016b2:	f7ff f942 	bl	800093a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 80016b6:	4a17      	ldr	r2, [pc, #92]	; (8001714 <MX_ADC1_Init+0x190>)
 80016b8:	f240 210f 	movw	r1, #527	; 0x20f
 80016bc:	4812      	ldr	r0, [pc, #72]	; (8001708 <MX_ADC1_Init+0x184>)
 80016be:	f7ff f907 	bl	80008d0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80016c2:	2207      	movs	r2, #7
 80016c4:	4913      	ldr	r1, [pc, #76]	; (8001714 <MX_ADC1_Init+0x190>)
 80016c6:	4810      	ldr	r0, [pc, #64]	; (8001708 <MX_ADC1_Init+0x184>)
 80016c8:	f7ff f937 	bl	800093a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 80016cc:	4a12      	ldr	r2, [pc, #72]	; (8001718 <MX_ADC1_Init+0x194>)
 80016ce:	f44f 7105 	mov.w	r1, #532	; 0x214
 80016d2:	480d      	ldr	r0, [pc, #52]	; (8001708 <MX_ADC1_Init+0x184>)
 80016d4:	f7ff f8fc 	bl	80008d0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80016d8:	2207      	movs	r2, #7
 80016da:	490f      	ldr	r1, [pc, #60]	; (8001718 <MX_ADC1_Init+0x194>)
 80016dc:	480a      	ldr	r0, [pc, #40]	; (8001708 <MX_ADC1_Init+0x184>)
 80016de:	f7ff f92c 	bl	800093a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_6);
 80016e2:	4a0e      	ldr	r2, [pc, #56]	; (800171c <MX_ADC1_Init+0x198>)
 80016e4:	f240 2119 	movw	r1, #537	; 0x219
 80016e8:	4807      	ldr	r0, [pc, #28]	; (8001708 <MX_ADC1_Init+0x184>)
 80016ea:	f7ff f8f1 	bl	80008d0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80016ee:	2207      	movs	r2, #7
 80016f0:	490a      	ldr	r1, [pc, #40]	; (800171c <MX_ADC1_Init+0x198>)
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_ADC1_Init+0x184>)
 80016f4:	f7ff f921 	bl	800093a <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	3738      	adds	r7, #56	; 0x38
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40010800 	.word	0x40010800
 8001704:	40020000 	.word	0x40020000
 8001708:	40012400 	.word	0x40012400
 800170c:	02300001 	.word	0x02300001
 8001710:	02600002 	.word	0x02600002
 8001714:	02900003 	.word	0x02900003
 8001718:	02c00004 	.word	0x02c00004
 800171c:	03200006 	.word	0x03200006

08001720 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_SPI1_Init+0x64>)
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <MX_SPI1_Init+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <MX_SPI1_Init+0x64>)
 800172c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001730:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_SPI1_Init+0x64>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_SPI1_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_SPI1_Init+0x64>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_SPI1_Init+0x64>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_SPI1_Init+0x64>)
 800174c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001750:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_SPI1_Init+0x64>)
 8001754:	2210      	movs	r2, #16
 8001756:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <MX_SPI1_Init+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_SPI1_Init+0x64>)
 8001760:	2200      	movs	r2, #0
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <MX_SPI1_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_SPI1_Init+0x64>)
 800176c:	220a      	movs	r2, #10
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_SPI1_Init+0x64>)
 8001772:	f001 fc2f 	bl	8002fd4 <HAL_SPI_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800177c:	f000 f9d2 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200006b4 	.word	0x200006b4
 8001788:	40013000 	.word	0x40013000

0800178c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b092      	sub	sp, #72	; 0x48
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001792:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800179c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
 80017ac:	615a      	str	r2, [r3, #20]
 80017ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2220      	movs	r2, #32
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f003 fa22 	bl	8004c00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017bc:	4b32      	ldr	r3, [pc, #200]	; (8001888 <MX_TIM1_Init+0xfc>)
 80017be:	4a33      	ldr	r2, [pc, #204]	; (800188c <MX_TIM1_Init+0x100>)
 80017c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 80017c2:	4b31      	ldr	r3, [pc, #196]	; (8001888 <MX_TIM1_Init+0xfc>)
 80017c4:	2214      	movs	r2, #20
 80017c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c8:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <MX_TIM1_Init+0xfc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80017ce:	4b2e      	ldr	r3, [pc, #184]	; (8001888 <MX_TIM1_Init+0xfc>)
 80017d0:	2263      	movs	r2, #99	; 0x63
 80017d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d4:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <MX_TIM1_Init+0xfc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017da:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <MX_TIM1_Init+0xfc>)
 80017dc:	2200      	movs	r2, #0
 80017de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e0:	4b29      	ldr	r3, [pc, #164]	; (8001888 <MX_TIM1_Init+0xfc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017e6:	4828      	ldr	r0, [pc, #160]	; (8001888 <MX_TIM1_Init+0xfc>)
 80017e8:	f001 fef6 	bl	80035d8 <HAL_TIM_PWM_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80017f2:	f000 f997 	bl	8001b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001802:	4619      	mov	r1, r3
 8001804:	4820      	ldr	r0, [pc, #128]	; (8001888 <MX_TIM1_Init+0xfc>)
 8001806:	f002 fe4b 	bl	80044a0 <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001810:	f000 f988 	bl	8001b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001814:	2360      	movs	r3, #96	; 0x60
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800181c:	2300      	movs	r3, #0
 800181e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001820:	2300      	movs	r3, #0
 8001822:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800182c:	2300      	movs	r3, #0
 800182e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001834:	2200      	movs	r2, #0
 8001836:	4619      	mov	r1, r3
 8001838:	4813      	ldr	r0, [pc, #76]	; (8001888 <MX_TIM1_Init+0xfc>)
 800183a:	f002 f9f1 	bl	8003c20 <HAL_TIM_PWM_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001844:	f000 f96e 	bl	8001b24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800185c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001860:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	4619      	mov	r1, r3
 800186a:	4807      	ldr	r0, [pc, #28]	; (8001888 <MX_TIM1_Init+0xfc>)
 800186c:	f002 fe70 	bl	8004550 <HAL_TIMEx_ConfigBreakDeadTime>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001876:	f000 f955 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800187a:	4803      	ldr	r0, [pc, #12]	; (8001888 <MX_TIM1_Init+0xfc>)
 800187c:	f000 fa78 	bl	8001d70 <HAL_TIM_MspPostInit>

}
 8001880:	bf00      	nop
 8001882:	3748      	adds	r7, #72	; 0x48
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	2000070c 	.word	0x2000070c
 800188c:	40012c00 	.word	0x40012c00

08001890 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	; 0x30
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001896:	f107 030c 	add.w	r3, r7, #12
 800189a:	2224      	movs	r2, #36	; 0x24
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 f9ae 	bl	8004c00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018ac:	4b21      	ldr	r3, [pc, #132]	; (8001934 <MX_TIM2_Init+0xa4>)
 80018ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <MX_TIM2_Init+0xa4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ba:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <MX_TIM2_Init+0xa4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80018c0:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <MX_TIM2_Init+0xa4>)
 80018c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <MX_TIM2_Init+0xa4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <MX_TIM2_Init+0xa4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018d4:	2301      	movs	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018dc:	2301      	movs	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 80018e4:	2306      	movs	r3, #6
 80018e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018ec:	2301      	movs	r3, #1
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 80018f0:	2304      	movs	r3, #4
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 80018f4:	2306      	movs	r3, #6
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	4619      	mov	r1, r3
 80018fe:	480d      	ldr	r0, [pc, #52]	; (8001934 <MX_TIM2_Init+0xa4>)
 8001900:	f001 ff56 	bl	80037b0 <HAL_TIM_Encoder_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800190a:	f000 f90b 	bl	8001b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	4619      	mov	r1, r3
 800191a:	4806      	ldr	r0, [pc, #24]	; (8001934 <MX_TIM2_Init+0xa4>)
 800191c:	f002 fdc0 	bl	80044a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001926:	f000 f8fd 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	3730      	adds	r7, #48	; 0x30
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000754 	.word	0x20000754

08001938 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193e:	f107 0308 	add.w	r3, r7, #8
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194c:	463b      	mov	r3, r7
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <MX_TIM3_Init+0x94>)
 8001956:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <MX_TIM3_Init+0x98>)
 8001958:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720;
 800195a:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <MX_TIM3_Init+0x94>)
 800195c:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001960:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001962:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <MX_TIM3_Init+0x94>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8001968:	4b18      	ldr	r3, [pc, #96]	; (80019cc <MX_TIM3_Init+0x94>)
 800196a:	2209      	movs	r2, #9
 800196c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <MX_TIM3_Init+0x94>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <MX_TIM3_Init+0x94>)
 8001976:	2200      	movs	r2, #0
 8001978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800197a:	4814      	ldr	r0, [pc, #80]	; (80019cc <MX_TIM3_Init+0x94>)
 800197c:	f001 fd90 	bl	80034a0 <HAL_TIM_Base_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001986:	f000 f8cd 	bl	8001b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	4619      	mov	r1, r3
 8001996:	480d      	ldr	r0, [pc, #52]	; (80019cc <MX_TIM3_Init+0x94>)
 8001998:	f002 fa00 	bl	8003d9c <HAL_TIM_ConfigClockSource>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80019a2:	f000 f8bf 	bl	8001b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ae:	463b      	mov	r3, r7
 80019b0:	4619      	mov	r1, r3
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <MX_TIM3_Init+0x94>)
 80019b4:	f002 fd74 	bl	80044a0 <HAL_TIMEx_MasterConfigSynchronization>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80019be:	f000 f8b1 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000079c 	.word	0x2000079c
 80019d0:	40000400 	.word	0x40000400

080019d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019da:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <MX_USART1_UART_Init+0x50>)
 80019dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019fa:	220c      	movs	r2, #12
 80019fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <MX_USART1_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_USART1_UART_Init+0x4c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_USART1_UART_Init+0x4c>)
 8001a0c:	f002 fe03 	bl	8004616 <HAL_UART_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a16:	f000 f885 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200007e4 	.word	0x200007e4
 8001a24:	40013800 	.word	0x40013800

08001a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f7ff f9c7 	bl	8000dc0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a32:	f7fe feaf 	bl	8000794 <__NVIC_GetPriorityGrouping>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fefd 	bl	800083c <NVIC_EncodePriority>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4619      	mov	r1, r3
 8001a46:	200b      	movs	r0, #11
 8001a48:	f7fe fece 	bl	80007e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a4c:	200b      	movs	r0, #11
 8001a4e:	f7fe feaf 	bl	80007b0 <__NVIC_EnableIRQ>

}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5e:	f107 0310 	add.w	r3, r7, #16
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <MX_GPIO_Init+0xc4>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a2a      	ldr	r2, [pc, #168]	; (8001b1c <MX_GPIO_Init+0xc4>)
 8001a72:	f043 0320 	orr.w	r3, r3, #32
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <MX_GPIO_Init+0xc4>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0320 	and.w	r3, r3, #32
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <MX_GPIO_Init+0xc4>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a24      	ldr	r2, [pc, #144]	; (8001b1c <MX_GPIO_Init+0xc4>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <MX_GPIO_Init+0xc4>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <MX_GPIO_Init+0xc4>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a1e      	ldr	r2, [pc, #120]	; (8001b1c <MX_GPIO_Init+0xc4>)
 8001aa2:	f043 0308 	orr.w	r3, r3, #8
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <MX_GPIO_Init+0xc4>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_CS_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f640 4102 	movw	r1, #3074	; 0xc02
 8001aba:	4819      	ldr	r0, [pc, #100]	; (8001b20 <MX_GPIO_Init+0xc8>)
 8001abc:	f000 fda1 	bl	8002602 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HALL_Pin ENC_BUT_Pin */
  GPIO_InitStruct.Pin = HALL_Pin|ENC_BUT_Pin;
 8001ac0:	2311      	movs	r3, #17
 8001ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4813      	ldr	r0, [pc, #76]	; (8001b20 <MX_GPIO_Init+0xc8>)
 8001ad4:	f000 fc02 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	4619      	mov	r1, r3
 8001aee:	480c      	ldr	r0, [pc, #48]	; (8001b20 <MX_GPIO_Init+0xc8>)
 8001af0:	f000 fbf4 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 8001af4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001af8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	2301      	movs	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b06:	f107 0310 	add.w	r3, r7, #16
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4804      	ldr	r0, [pc, #16]	; (8001b20 <MX_GPIO_Init+0xc8>)
 8001b0e:	f000 fbe5 	bl	80022dc <HAL_GPIO_Init>

}
 8001b12:	bf00      	nop
 8001b14:	3720      	adds	r7, #32
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010c00 	.word	0x40010c00

08001b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b28:	b672      	cpsid	i
}
 8001b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b2c:	e7fe      	b.n	8001b2c <Error_Handler+0x8>
	...

08001b30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_MspInit+0x5c>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <HAL_MspInit+0x5c>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6193      	str	r3, [r2, #24]
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_MspInit+0x5c>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_MspInit+0x5c>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	4a0e      	ldr	r2, [pc, #56]	; (8001b8c <HAL_MspInit+0x5c>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b58:	61d3      	str	r3, [r2, #28]
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_MspInit+0x5c>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_MspInit+0x60>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <HAL_MspInit+0x60>)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40010000 	.word	0x40010000

08001b94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a15      	ldr	r2, [pc, #84]	; (8001c04 <HAL_SPI_MspInit+0x70>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d123      	bne.n	8001bfc <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <HAL_SPI_MspInit+0x74>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a13      	ldr	r2, [pc, #76]	; (8001c08 <HAL_SPI_MspInit+0x74>)
 8001bba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_SPI_MspInit+0x74>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_SPI_MspInit+0x74>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <HAL_SPI_MspInit+0x74>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_SPI_MspInit+0x74>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001be4:	23a0      	movs	r3, #160	; 0xa0
 8001be6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <HAL_SPI_MspInit+0x78>)
 8001bf8:	f000 fb70 	bl	80022dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bfc:	bf00      	nop
 8001bfe:	3720      	adds	r7, #32
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40013000 	.word	0x40013000
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40010800 	.word	0x40010800

08001c10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <HAL_TIM_PWM_MspInit+0x34>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d10b      	bne.n	8001c3a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_TIM_PWM_MspInit+0x38>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <HAL_TIM_PWM_MspInit+0x38>)
 8001c28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c2c:	6193      	str	r3, [r2, #24]
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_TIM_PWM_MspInit+0x38>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	40012c00 	.word	0x40012c00
 8001c48:	40021000 	.word	0x40021000

08001c4c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c6a:	d14e      	bne.n	8001d0a <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c6c:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	4a28      	ldr	r2, [pc, #160]	; (8001d14 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	61d3      	str	r3, [r2, #28]
 8001c78:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001ca2:	f043 0308 	orr.w	r3, r3, #8
 8001ca6:	6193      	str	r3, [r2, #24]
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4813      	ldr	r0, [pc, #76]	; (8001d18 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001cca:	f000 fb07 	bl	80022dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cce:	2308      	movs	r3, #8
 8001cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480e      	ldr	r0, [pc, #56]	; (8001d1c <HAL_TIM_Encoder_MspInit+0xd0>)
 8001ce2:	f000 fafb 	bl	80022dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
 8001d04:	4a06      	ldr	r2, [pc, #24]	; (8001d20 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	; 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40010800 	.word	0x40010800
 8001d1c:	40010c00 	.word	0x40010c00
 8001d20:	40010000 	.word	0x40010000

08001d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0d      	ldr	r2, [pc, #52]	; (8001d68 <HAL_TIM_Base_MspInit+0x44>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d113      	bne.n	8001d5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HAL_TIM_Base_MspInit+0x48>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <HAL_TIM_Base_MspInit+0x48>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	61d3      	str	r3, [r2, #28]
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_TIM_Base_MspInit+0x48>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2100      	movs	r1, #0
 8001d52:	201d      	movs	r0, #29
 8001d54:	f000 fa8b 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d58:	201d      	movs	r0, #29
 8001d5a:	f000 faa4 	bl	80022a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40000400 	.word	0x40000400
 8001d6c:	40021000 	.word	0x40021000

08001d70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 0310 	add.w	r3, r7, #16
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a10      	ldr	r2, [pc, #64]	; (8001dcc <HAL_TIM_MspPostInit+0x5c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d118      	bne.n	8001dc2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_TIM_MspPostInit+0x60>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <HAL_TIM_MspPostInit+0x60>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_TIM_MspPostInit+0x60>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001da8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	f107 0310 	add.w	r3, r7, #16
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <HAL_TIM_MspPostInit+0x64>)
 8001dbe:	f000 fa8d 	bl	80022dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001dc2:	bf00      	nop
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40012c00 	.word	0x40012c00
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40010800 	.word	0x40010800

08001dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_UART_MspInit+0x8c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d131      	bne.n	8001e5c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <HAL_UART_MspInit+0x90>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a1a      	ldr	r2, [pc, #104]	; (8001e68 <HAL_UART_MspInit+0x90>)
 8001dfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <HAL_UART_MspInit+0x90>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <HAL_UART_MspInit+0x90>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a14      	ldr	r2, [pc, #80]	; (8001e68 <HAL_UART_MspInit+0x90>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_UART_MspInit+0x90>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480b      	ldr	r0, [pc, #44]	; (8001e6c <HAL_UART_MspInit+0x94>)
 8001e3e:	f000 fa4d 	bl	80022dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 0310 	add.w	r3, r7, #16
 8001e54:	4619      	mov	r1, r3
 8001e56:	4805      	ldr	r0, [pc, #20]	; (8001e6c <HAL_UART_MspInit+0x94>)
 8001e58:	f000 fa40 	bl	80022dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e5c:	bf00      	nop
 8001e5e:	3720      	adds	r7, #32
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40013800 	.word	0x40013800
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40010800 	.word	0x40010800

08001e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <NMI_Handler+0x4>

08001e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <HardFault_Handler+0x4>

08001e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <MemManage_Handler+0x4>

08001e82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e86:	e7fe      	b.n	8001e86 <BusFault_Handler+0x4>

08001e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e8c:	e7fe      	b.n	8001e8c <UsageFault_Handler+0x4>

08001e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr

08001eb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb6:	f000 f8c3 	bl	8002040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
DMA1->IFCR|=DMA_IFCR_CGIF1_Msk;
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <DMA1_Channel1_IRQHandler+0x18>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4a03      	ldr	r2, [pc, #12]	; (8001ed8 <DMA1_Channel1_IRQHandler+0x18>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6053      	str	r3, [r2, #4]
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	40020000 	.word	0x40020000

08001edc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <TIM3_IRQHandler+0x10>)
 8001ee2:	f001 fd95 	bl	8003a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000079c 	.word	0x2000079c

08001ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef8:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <_sbrk+0x5c>)
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <_sbrk+0x60>)
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <_sbrk+0x64>)
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <_sbrk+0x68>)
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <_sbrk+0x64>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d207      	bcs.n	8001f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f20:	f002 fe36 	bl	8004b90 <__errno>
 8001f24:	4603      	mov	r3, r0
 8001f26:	220c      	movs	r2, #12
 8001f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2e:	e009      	b.n	8001f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <_sbrk+0x64>)
 8001f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f42:	68fb      	ldr	r3, [r7, #12]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20002800 	.word	0x20002800
 8001f50:	00000400 	.word	0x00000400
 8001f54:	20000920 	.word	0x20000920
 8001f58:	20000938 	.word	0x20000938

08001f5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f68:	480c      	ldr	r0, [pc, #48]	; (8001f9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f6a:	490d      	ldr	r1, [pc, #52]	; (8001fa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f80:	4c0a      	ldr	r4, [pc, #40]	; (8001fac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f8e:	f7ff ffe5 	bl	8001f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f92:	f002 fe03 	bl	8004b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f96:	f7ff f847 	bl	8001028 <main>
  bx lr
 8001f9a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001fa4:	080058e0 	.word	0x080058e0
  ldr r2, =_sbss
 8001fa8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001fac:	20000938 	.word	0x20000938

08001fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC1_2_IRQHandler>
	...

08001fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_Init+0x28>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <HAL_Init+0x28>)
 8001fbe:	f043 0310 	orr.w	r3, r3, #16
 8001fc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f000 f947 	bl	8002258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fca:	200f      	movs	r0, #15
 8001fcc:	f000 f808 	bl	8001fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd0:	f7ff fdae 	bl	8001b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40022000 	.word	0x40022000

08001fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_InitTick+0x54>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_InitTick+0x58>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f95f 	bl	80022c2 <HAL_SYSTICK_Config>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e00e      	b.n	800202c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b0f      	cmp	r3, #15
 8002012:	d80a      	bhi.n	800202a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002014:	2200      	movs	r2, #0
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f000 f927 	bl	800226e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002020:	4a06      	ldr	r2, [pc, #24]	; (800203c <HAL_InitTick+0x5c>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000008 	.word	0x20000008
 8002038:	20000010 	.word	0x20000010
 800203c:	2000000c 	.word	0x2000000c

08002040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_IncTick+0x1c>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b05      	ldr	r3, [pc, #20]	; (8002060 <HAL_IncTick+0x20>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	4a03      	ldr	r2, [pc, #12]	; (8002060 <HAL_IncTick+0x20>)
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	20000010 	.word	0x20000010
 8002060:	20000924 	.word	0x20000924

08002064 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return uwTick;
 8002068:	4b02      	ldr	r3, [pc, #8]	; (8002074 <HAL_GetTick+0x10>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	20000924 	.word	0x20000924

08002078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff fff0 	bl	8002064 <HAL_GetTick>
 8002084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d005      	beq.n	800209e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_Delay+0x44>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800209e:	bf00      	nop
 80020a0:	f7ff ffe0 	bl	8002064 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d8f7      	bhi.n	80020a0 <HAL_Delay+0x28>
  {
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000010 	.word	0x20000010

080020c0 <__NVIC_SetPriorityGrouping>:
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f2:	4a04      	ldr	r2, [pc, #16]	; (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	60d3      	str	r3, [r2, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_GetPriorityGrouping>:
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <__NVIC_GetPriorityGrouping+0x18>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	f003 0307 	and.w	r3, r3, #7
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_EnableIRQ>:
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	2b00      	cmp	r3, #0
 8002134:	db0b      	blt.n	800214e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	4906      	ldr	r1, [pc, #24]	; (8002158 <__NVIC_EnableIRQ+0x34>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	2001      	movs	r0, #1
 8002146:	fa00 f202 	lsl.w	r2, r0, r2
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100

0800215c <__NVIC_SetPriority>:
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	; (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002224:	d301      	bcc.n	800222a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002226:	2301      	movs	r3, #1
 8002228:	e00f      	b.n	800224a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <SysTick_Config+0x40>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002232:	210f      	movs	r1, #15
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f7ff ff90 	bl	800215c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <SysTick_Config+0x40>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002242:	4b04      	ldr	r3, [pc, #16]	; (8002254 <SysTick_Config+0x40>)
 8002244:	2207      	movs	r2, #7
 8002246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	e000e010 	.word	0xe000e010

08002258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff2d 	bl	80020c0 <__NVIC_SetPriorityGrouping>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002280:	f7ff ff42 	bl	8002108 <__NVIC_GetPriorityGrouping>
 8002284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f7ff ff90 	bl	80021b0 <NVIC_EncodePriority>
 8002290:	4602      	mov	r2, r0
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff5f 	bl	800215c <__NVIC_SetPriority>
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff35 	bl	8002124 <__NVIC_EnableIRQ>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ffa2 	bl	8002214 <SysTick_Config>
 80022d0:	4603      	mov	r3, r0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022dc:	b480      	push	{r7}
 80022de:	b08b      	sub	sp, #44	; 0x2c
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022ea:	2300      	movs	r3, #0
 80022ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ee:	e161      	b.n	80025b4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022f0:	2201      	movs	r2, #1
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	429a      	cmp	r2, r3
 800230a:	f040 8150 	bne.w	80025ae <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4a97      	ldr	r2, [pc, #604]	; (8002570 <HAL_GPIO_Init+0x294>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d05e      	beq.n	80023d6 <HAL_GPIO_Init+0xfa>
 8002318:	4a95      	ldr	r2, [pc, #596]	; (8002570 <HAL_GPIO_Init+0x294>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d875      	bhi.n	800240a <HAL_GPIO_Init+0x12e>
 800231e:	4a95      	ldr	r2, [pc, #596]	; (8002574 <HAL_GPIO_Init+0x298>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d058      	beq.n	80023d6 <HAL_GPIO_Init+0xfa>
 8002324:	4a93      	ldr	r2, [pc, #588]	; (8002574 <HAL_GPIO_Init+0x298>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d86f      	bhi.n	800240a <HAL_GPIO_Init+0x12e>
 800232a:	4a93      	ldr	r2, [pc, #588]	; (8002578 <HAL_GPIO_Init+0x29c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d052      	beq.n	80023d6 <HAL_GPIO_Init+0xfa>
 8002330:	4a91      	ldr	r2, [pc, #580]	; (8002578 <HAL_GPIO_Init+0x29c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d869      	bhi.n	800240a <HAL_GPIO_Init+0x12e>
 8002336:	4a91      	ldr	r2, [pc, #580]	; (800257c <HAL_GPIO_Init+0x2a0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d04c      	beq.n	80023d6 <HAL_GPIO_Init+0xfa>
 800233c:	4a8f      	ldr	r2, [pc, #572]	; (800257c <HAL_GPIO_Init+0x2a0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d863      	bhi.n	800240a <HAL_GPIO_Init+0x12e>
 8002342:	4a8f      	ldr	r2, [pc, #572]	; (8002580 <HAL_GPIO_Init+0x2a4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d046      	beq.n	80023d6 <HAL_GPIO_Init+0xfa>
 8002348:	4a8d      	ldr	r2, [pc, #564]	; (8002580 <HAL_GPIO_Init+0x2a4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d85d      	bhi.n	800240a <HAL_GPIO_Init+0x12e>
 800234e:	2b12      	cmp	r3, #18
 8002350:	d82a      	bhi.n	80023a8 <HAL_GPIO_Init+0xcc>
 8002352:	2b12      	cmp	r3, #18
 8002354:	d859      	bhi.n	800240a <HAL_GPIO_Init+0x12e>
 8002356:	a201      	add	r2, pc, #4	; (adr r2, 800235c <HAL_GPIO_Init+0x80>)
 8002358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235c:	080023d7 	.word	0x080023d7
 8002360:	080023b1 	.word	0x080023b1
 8002364:	080023c3 	.word	0x080023c3
 8002368:	08002405 	.word	0x08002405
 800236c:	0800240b 	.word	0x0800240b
 8002370:	0800240b 	.word	0x0800240b
 8002374:	0800240b 	.word	0x0800240b
 8002378:	0800240b 	.word	0x0800240b
 800237c:	0800240b 	.word	0x0800240b
 8002380:	0800240b 	.word	0x0800240b
 8002384:	0800240b 	.word	0x0800240b
 8002388:	0800240b 	.word	0x0800240b
 800238c:	0800240b 	.word	0x0800240b
 8002390:	0800240b 	.word	0x0800240b
 8002394:	0800240b 	.word	0x0800240b
 8002398:	0800240b 	.word	0x0800240b
 800239c:	0800240b 	.word	0x0800240b
 80023a0:	080023b9 	.word	0x080023b9
 80023a4:	080023cd 	.word	0x080023cd
 80023a8:	4a76      	ldr	r2, [pc, #472]	; (8002584 <HAL_GPIO_Init+0x2a8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d013      	beq.n	80023d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023ae:	e02c      	b.n	800240a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	623b      	str	r3, [r7, #32]
          break;
 80023b6:	e029      	b.n	800240c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	3304      	adds	r3, #4
 80023be:	623b      	str	r3, [r7, #32]
          break;
 80023c0:	e024      	b.n	800240c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	3308      	adds	r3, #8
 80023c8:	623b      	str	r3, [r7, #32]
          break;
 80023ca:	e01f      	b.n	800240c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	330c      	adds	r3, #12
 80023d2:	623b      	str	r3, [r7, #32]
          break;
 80023d4:	e01a      	b.n	800240c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023de:	2304      	movs	r3, #4
 80023e0:	623b      	str	r3, [r7, #32]
          break;
 80023e2:	e013      	b.n	800240c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d105      	bne.n	80023f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023ec:	2308      	movs	r3, #8
 80023ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69fa      	ldr	r2, [r7, #28]
 80023f4:	611a      	str	r2, [r3, #16]
          break;
 80023f6:	e009      	b.n	800240c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f8:	2308      	movs	r3, #8
 80023fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	615a      	str	r2, [r3, #20]
          break;
 8002402:	e003      	b.n	800240c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002404:	2300      	movs	r3, #0
 8002406:	623b      	str	r3, [r7, #32]
          break;
 8002408:	e000      	b.n	800240c <HAL_GPIO_Init+0x130>
          break;
 800240a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	2bff      	cmp	r3, #255	; 0xff
 8002410:	d801      	bhi.n	8002416 <HAL_GPIO_Init+0x13a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	e001      	b.n	800241a <HAL_GPIO_Init+0x13e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3304      	adds	r3, #4
 800241a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2bff      	cmp	r3, #255	; 0xff
 8002420:	d802      	bhi.n	8002428 <HAL_GPIO_Init+0x14c>
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	e002      	b.n	800242e <HAL_GPIO_Init+0x152>
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	3b08      	subs	r3, #8
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	210f      	movs	r1, #15
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	401a      	ands	r2, r3
 8002440:	6a39      	ldr	r1, [r7, #32]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	431a      	orrs	r2, r3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80a9 	beq.w	80025ae <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800245c:	4b4a      	ldr	r3, [pc, #296]	; (8002588 <HAL_GPIO_Init+0x2ac>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	4a49      	ldr	r2, [pc, #292]	; (8002588 <HAL_GPIO_Init+0x2ac>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6193      	str	r3, [r2, #24]
 8002468:	4b47      	ldr	r3, [pc, #284]	; (8002588 <HAL_GPIO_Init+0x2ac>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002474:	4a45      	ldr	r2, [pc, #276]	; (800258c <HAL_GPIO_Init+0x2b0>)
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	089b      	lsrs	r3, r3, #2
 800247a:	3302      	adds	r3, #2
 800247c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002480:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	220f      	movs	r2, #15
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a3d      	ldr	r2, [pc, #244]	; (8002590 <HAL_GPIO_Init+0x2b4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d00d      	beq.n	80024bc <HAL_GPIO_Init+0x1e0>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a3c      	ldr	r2, [pc, #240]	; (8002594 <HAL_GPIO_Init+0x2b8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d007      	beq.n	80024b8 <HAL_GPIO_Init+0x1dc>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a3b      	ldr	r2, [pc, #236]	; (8002598 <HAL_GPIO_Init+0x2bc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d101      	bne.n	80024b4 <HAL_GPIO_Init+0x1d8>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e004      	b.n	80024be <HAL_GPIO_Init+0x1e2>
 80024b4:	2303      	movs	r3, #3
 80024b6:	e002      	b.n	80024be <HAL_GPIO_Init+0x1e2>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_GPIO_Init+0x1e2>
 80024bc:	2300      	movs	r3, #0
 80024be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c0:	f002 0203 	and.w	r2, r2, #3
 80024c4:	0092      	lsls	r2, r2, #2
 80024c6:	4093      	lsls	r3, r2
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024ce:	492f      	ldr	r1, [pc, #188]	; (800258c <HAL_GPIO_Init+0x2b0>)
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	3302      	adds	r3, #2
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d006      	beq.n	80024f6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024e8:	4b2c      	ldr	r3, [pc, #176]	; (800259c <HAL_GPIO_Init+0x2c0>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	492b      	ldr	r1, [pc, #172]	; (800259c <HAL_GPIO_Init+0x2c0>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	600b      	str	r3, [r1, #0]
 80024f4:	e006      	b.n	8002504 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024f6:	4b29      	ldr	r3, [pc, #164]	; (800259c <HAL_GPIO_Init+0x2c0>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	4927      	ldr	r1, [pc, #156]	; (800259c <HAL_GPIO_Init+0x2c0>)
 8002500:	4013      	ands	r3, r2
 8002502:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d006      	beq.n	800251e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002510:	4b22      	ldr	r3, [pc, #136]	; (800259c <HAL_GPIO_Init+0x2c0>)
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	4921      	ldr	r1, [pc, #132]	; (800259c <HAL_GPIO_Init+0x2c0>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
 800251c:	e006      	b.n	800252c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800251e:	4b1f      	ldr	r3, [pc, #124]	; (800259c <HAL_GPIO_Init+0x2c0>)
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	43db      	mvns	r3, r3
 8002526:	491d      	ldr	r1, [pc, #116]	; (800259c <HAL_GPIO_Init+0x2c0>)
 8002528:	4013      	ands	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d006      	beq.n	8002546 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002538:	4b18      	ldr	r3, [pc, #96]	; (800259c <HAL_GPIO_Init+0x2c0>)
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	4917      	ldr	r1, [pc, #92]	; (800259c <HAL_GPIO_Init+0x2c0>)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	608b      	str	r3, [r1, #8]
 8002544:	e006      	b.n	8002554 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_GPIO_Init+0x2c0>)
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	43db      	mvns	r3, r3
 800254e:	4913      	ldr	r1, [pc, #76]	; (800259c <HAL_GPIO_Init+0x2c0>)
 8002550:	4013      	ands	r3, r2
 8002552:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d01f      	beq.n	80025a0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002560:	4b0e      	ldr	r3, [pc, #56]	; (800259c <HAL_GPIO_Init+0x2c0>)
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	490d      	ldr	r1, [pc, #52]	; (800259c <HAL_GPIO_Init+0x2c0>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	60cb      	str	r3, [r1, #12]
 800256c:	e01f      	b.n	80025ae <HAL_GPIO_Init+0x2d2>
 800256e:	bf00      	nop
 8002570:	10320000 	.word	0x10320000
 8002574:	10310000 	.word	0x10310000
 8002578:	10220000 	.word	0x10220000
 800257c:	10210000 	.word	0x10210000
 8002580:	10120000 	.word	0x10120000
 8002584:	10110000 	.word	0x10110000
 8002588:	40021000 	.word	0x40021000
 800258c:	40010000 	.word	0x40010000
 8002590:	40010800 	.word	0x40010800
 8002594:	40010c00 	.word	0x40010c00
 8002598:	40011000 	.word	0x40011000
 800259c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_GPIO_Init+0x2f4>)
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	4909      	ldr	r1, [pc, #36]	; (80025d0 <HAL_GPIO_Init+0x2f4>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	3301      	adds	r3, #1
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	fa22 f303 	lsr.w	r3, r2, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f47f ae96 	bne.w	80022f0 <HAL_GPIO_Init+0x14>
  }
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	372c      	adds	r7, #44	; 0x2c
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	40010400 	.word	0x40010400

080025d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	887b      	ldrh	r3, [r7, #2]
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	e001      	b.n	80025f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	460b      	mov	r3, r1
 800260c:	807b      	strh	r3, [r7, #2]
 800260e:	4613      	mov	r3, r2
 8002610:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002612:	787b      	ldrb	r3, [r7, #1]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002618:	887a      	ldrh	r2, [r7, #2]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800261e:	e003      	b.n	8002628 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002620:	887b      	ldrh	r3, [r7, #2]
 8002622:	041a      	lsls	r2, r3, #16
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	611a      	str	r2, [r3, #16]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
	...

08002634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e272      	b.n	8002b2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8087 	beq.w	8002762 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002654:	4b92      	ldr	r3, [pc, #584]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b04      	cmp	r3, #4
 800265e:	d00c      	beq.n	800267a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002660:	4b8f      	ldr	r3, [pc, #572]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 030c 	and.w	r3, r3, #12
 8002668:	2b08      	cmp	r3, #8
 800266a:	d112      	bne.n	8002692 <HAL_RCC_OscConfig+0x5e>
 800266c:	4b8c      	ldr	r3, [pc, #560]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002678:	d10b      	bne.n	8002692 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267a:	4b89      	ldr	r3, [pc, #548]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d06c      	beq.n	8002760 <HAL_RCC_OscConfig+0x12c>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d168      	bne.n	8002760 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e24c      	b.n	8002b2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269a:	d106      	bne.n	80026aa <HAL_RCC_OscConfig+0x76>
 800269c:	4b80      	ldr	r3, [pc, #512]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a7f      	ldr	r2, [pc, #508]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	e02e      	b.n	8002708 <HAL_RCC_OscConfig+0xd4>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10c      	bne.n	80026cc <HAL_RCC_OscConfig+0x98>
 80026b2:	4b7b      	ldr	r3, [pc, #492]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a7a      	ldr	r2, [pc, #488]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	4b78      	ldr	r3, [pc, #480]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a77      	ldr	r2, [pc, #476]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e01d      	b.n	8002708 <HAL_RCC_OscConfig+0xd4>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0xbc>
 80026d6:	4b72      	ldr	r3, [pc, #456]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a71      	ldr	r2, [pc, #452]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b6f      	ldr	r3, [pc, #444]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a6e      	ldr	r2, [pc, #440]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e00b      	b.n	8002708 <HAL_RCC_OscConfig+0xd4>
 80026f0:	4b6b      	ldr	r3, [pc, #428]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a6a      	ldr	r2, [pc, #424]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b68      	ldr	r3, [pc, #416]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a67      	ldr	r2, [pc, #412]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 8002702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002706:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d013      	beq.n	8002738 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7ff fca8 	bl	8002064 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002718:	f7ff fca4 	bl	8002064 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e200      	b.n	8002b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	4b5d      	ldr	r3, [pc, #372]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0xe4>
 8002736:	e014      	b.n	8002762 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff fc94 	bl	8002064 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002740:	f7ff fc90 	bl	8002064 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e1ec      	b.n	8002b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002752:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x10c>
 800275e:	e000      	b.n	8002762 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d063      	beq.n	8002836 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800276e:	4b4c      	ldr	r3, [pc, #304]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00b      	beq.n	8002792 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800277a:	4b49      	ldr	r3, [pc, #292]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b08      	cmp	r3, #8
 8002784:	d11c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x18c>
 8002786:	4b46      	ldr	r3, [pc, #280]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d116      	bne.n	80027c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002792:	4b43      	ldr	r3, [pc, #268]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_RCC_OscConfig+0x176>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d001      	beq.n	80027aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e1c0      	b.n	8002b2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027aa:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4939      	ldr	r1, [pc, #228]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027be:	e03a      	b.n	8002836 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d020      	beq.n	800280a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c8:	4b36      	ldr	r3, [pc, #216]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ce:	f7ff fc49 	bl	8002064 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d6:	f7ff fc45 	bl	8002064 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e1a1      	b.n	8002b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e8:	4b2d      	ldr	r3, [pc, #180]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f4:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4927      	ldr	r1, [pc, #156]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 8002804:	4313      	orrs	r3, r2
 8002806:	600b      	str	r3, [r1, #0]
 8002808:	e015      	b.n	8002836 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280a:	4b26      	ldr	r3, [pc, #152]	; (80028a4 <HAL_RCC_OscConfig+0x270>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7ff fc28 	bl	8002064 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002818:	f7ff fc24 	bl	8002064 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e180      	b.n	8002b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282a:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d03a      	beq.n	80028b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d019      	beq.n	800287e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284a:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <HAL_RCC_OscConfig+0x274>)
 800284c:	2201      	movs	r2, #1
 800284e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002850:	f7ff fc08 	bl	8002064 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002858:	f7ff fc04 	bl	8002064 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e160      	b.n	8002b2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286a:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <HAL_RCC_OscConfig+0x26c>)
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002876:	2001      	movs	r0, #1
 8002878:	f000 fad8 	bl	8002e2c <RCC_Delay>
 800287c:	e01c      	b.n	80028b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <HAL_RCC_OscConfig+0x274>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002884:	f7ff fbee 	bl	8002064 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288a:	e00f      	b.n	80028ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288c:	f7ff fbea 	bl	8002064 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d908      	bls.n	80028ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e146      	b.n	8002b2c <HAL_RCC_OscConfig+0x4f8>
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000
 80028a4:	42420000 	.word	0x42420000
 80028a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ac:	4b92      	ldr	r3, [pc, #584]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1e9      	bne.n	800288c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80a6 	beq.w	8002a12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c6:	2300      	movs	r3, #0
 80028c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ca:	4b8b      	ldr	r3, [pc, #556]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10d      	bne.n	80028f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d6:	4b88      	ldr	r3, [pc, #544]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	4a87      	ldr	r2, [pc, #540]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e0:	61d3      	str	r3, [r2, #28]
 80028e2:	4b85      	ldr	r3, [pc, #532]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ee:	2301      	movs	r3, #1
 80028f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f2:	4b82      	ldr	r3, [pc, #520]	; (8002afc <HAL_RCC_OscConfig+0x4c8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d118      	bne.n	8002930 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028fe:	4b7f      	ldr	r3, [pc, #508]	; (8002afc <HAL_RCC_OscConfig+0x4c8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a7e      	ldr	r2, [pc, #504]	; (8002afc <HAL_RCC_OscConfig+0x4c8>)
 8002904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800290a:	f7ff fbab 	bl	8002064 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002912:	f7ff fba7 	bl	8002064 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b64      	cmp	r3, #100	; 0x64
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e103      	b.n	8002b2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	4b75      	ldr	r3, [pc, #468]	; (8002afc <HAL_RCC_OscConfig+0x4c8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d106      	bne.n	8002946 <HAL_RCC_OscConfig+0x312>
 8002938:	4b6f      	ldr	r3, [pc, #444]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	4a6e      	ldr	r2, [pc, #440]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6213      	str	r3, [r2, #32]
 8002944:	e02d      	b.n	80029a2 <HAL_RCC_OscConfig+0x36e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10c      	bne.n	8002968 <HAL_RCC_OscConfig+0x334>
 800294e:	4b6a      	ldr	r3, [pc, #424]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4a69      	ldr	r2, [pc, #420]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	6213      	str	r3, [r2, #32]
 800295a:	4b67      	ldr	r3, [pc, #412]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4a66      	ldr	r2, [pc, #408]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	f023 0304 	bic.w	r3, r3, #4
 8002964:	6213      	str	r3, [r2, #32]
 8002966:	e01c      	b.n	80029a2 <HAL_RCC_OscConfig+0x36e>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b05      	cmp	r3, #5
 800296e:	d10c      	bne.n	800298a <HAL_RCC_OscConfig+0x356>
 8002970:	4b61      	ldr	r3, [pc, #388]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	4a60      	ldr	r2, [pc, #384]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 8002976:	f043 0304 	orr.w	r3, r3, #4
 800297a:	6213      	str	r3, [r2, #32]
 800297c:	4b5e      	ldr	r3, [pc, #376]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	4a5d      	ldr	r2, [pc, #372]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6213      	str	r3, [r2, #32]
 8002988:	e00b      	b.n	80029a2 <HAL_RCC_OscConfig+0x36e>
 800298a:	4b5b      	ldr	r3, [pc, #364]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	4a5a      	ldr	r2, [pc, #360]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	f023 0301 	bic.w	r3, r3, #1
 8002994:	6213      	str	r3, [r2, #32]
 8002996:	4b58      	ldr	r3, [pc, #352]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	4a57      	ldr	r2, [pc, #348]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	f023 0304 	bic.w	r3, r3, #4
 80029a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d015      	beq.n	80029d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029aa:	f7ff fb5b 	bl	8002064 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b0:	e00a      	b.n	80029c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b2:	f7ff fb57 	bl	8002064 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e0b1      	b.n	8002b2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c8:	4b4b      	ldr	r3, [pc, #300]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0ee      	beq.n	80029b2 <HAL_RCC_OscConfig+0x37e>
 80029d4:	e014      	b.n	8002a00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d6:	f7ff fb45 	bl	8002064 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029dc:	e00a      	b.n	80029f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029de:	f7ff fb41 	bl	8002064 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e09b      	b.n	8002b2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f4:	4b40      	ldr	r3, [pc, #256]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1ee      	bne.n	80029de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a00:	7dfb      	ldrb	r3, [r7, #23]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d105      	bne.n	8002a12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a06:	4b3c      	ldr	r3, [pc, #240]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	4a3b      	ldr	r2, [pc, #236]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8087 	beq.w	8002b2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a1c:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 030c 	and.w	r3, r3, #12
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d061      	beq.n	8002aec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d146      	bne.n	8002abe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a30:	4b33      	ldr	r3, [pc, #204]	; (8002b00 <HAL_RCC_OscConfig+0x4cc>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7ff fb15 	bl	8002064 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3e:	f7ff fb11 	bl	8002064 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e06d      	b.n	8002b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a50:	4b29      	ldr	r3, [pc, #164]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1f0      	bne.n	8002a3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a64:	d108      	bne.n	8002a78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a66:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	4921      	ldr	r1, [pc, #132]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a78:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a19      	ldr	r1, [r3, #32]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	491b      	ldr	r1, [pc, #108]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a90:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <HAL_RCC_OscConfig+0x4cc>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a96:	f7ff fae5 	bl	8002064 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9e:	f7ff fae1 	bl	8002064 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e03d      	b.n	8002b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x46a>
 8002abc:	e035      	b.n	8002b2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <HAL_RCC_OscConfig+0x4cc>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7ff face 	bl	8002064 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002acc:	f7ff faca 	bl	8002064 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e026      	b.n	8002b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x498>
 8002aea:	e01e      	b.n	8002b2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d107      	bne.n	8002b04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e019      	b.n	8002b2c <HAL_RCC_OscConfig+0x4f8>
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40007000 	.word	0x40007000
 8002b00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_RCC_OscConfig+0x500>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d001      	beq.n	8002b2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40021000 	.word	0x40021000

08002b38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0d0      	b.n	8002cee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b6a      	ldr	r3, [pc, #424]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d910      	bls.n	8002b7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b67      	ldr	r3, [pc, #412]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 0207 	bic.w	r2, r3, #7
 8002b62:	4965      	ldr	r1, [pc, #404]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b63      	ldr	r3, [pc, #396]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0b8      	b.n	8002cee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d020      	beq.n	8002bca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b94:	4b59      	ldr	r3, [pc, #356]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4a58      	ldr	r2, [pc, #352]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bac:	4b53      	ldr	r3, [pc, #332]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a52      	ldr	r2, [pc, #328]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb8:	4b50      	ldr	r3, [pc, #320]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	494d      	ldr	r1, [pc, #308]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d040      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	4b47      	ldr	r3, [pc, #284]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d115      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e07f      	b.n	8002cee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf6:	4b41      	ldr	r3, [pc, #260]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e073      	b.n	8002cee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c06:	4b3d      	ldr	r3, [pc, #244]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e06b      	b.n	8002cee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c16:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f023 0203 	bic.w	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4936      	ldr	r1, [pc, #216]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c28:	f7ff fa1c 	bl	8002064 <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	e00a      	b.n	8002c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c30:	f7ff fa18 	bl	8002064 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e053      	b.n	8002cee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	4b2d      	ldr	r3, [pc, #180]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 020c 	and.w	r2, r3, #12
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d1eb      	bne.n	8002c30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c58:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d210      	bcs.n	8002c88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 0207 	bic.w	r2, r3, #7
 8002c6e:	4922      	ldr	r1, [pc, #136]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e032      	b.n	8002cee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c94:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4916      	ldr	r1, [pc, #88]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cb2:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	490e      	ldr	r1, [pc, #56]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cc6:	f000 f821 	bl	8002d0c <HAL_RCC_GetSysClockFreq>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	490a      	ldr	r1, [pc, #40]	; (8002d00 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd8:	5ccb      	ldrb	r3, [r1, r3]
 8002cda:	fa22 f303 	lsr.w	r3, r2, r3
 8002cde:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <HAL_RCC_ClockConfig+0x1cc>)
 8002ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_RCC_ClockConfig+0x1d0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff f97a 	bl	8001fe0 <HAL_InitTick>

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40022000 	.word	0x40022000
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	0800588c 	.word	0x0800588c
 8002d04:	20000008 	.word	0x20000008
 8002d08:	2000000c 	.word	0x2000000c

08002d0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d0c:	b490      	push	{r4, r7}
 8002d0e:	b08a      	sub	sp, #40	; 0x28
 8002d10:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d12:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002d14:	1d3c      	adds	r4, r7, #4
 8002d16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d1c:	f240 2301 	movw	r3, #513	; 0x201
 8002d20:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d36:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d002      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x40>
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x46>
 8002d4a:	e02b      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d4c:	4b1c      	ldr	r3, [pc, #112]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d4e:	623b      	str	r3, [r7, #32]
      break;
 8002d50:	e02b      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	0c9b      	lsrs	r3, r3, #18
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	3328      	adds	r3, #40	; 0x28
 8002d5c:	443b      	add	r3, r7
 8002d5e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d62:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d012      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d6e:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	0c5b      	lsrs	r3, r3, #17
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	3328      	adds	r3, #40	; 0x28
 8002d7a:	443b      	add	r3, r7
 8002d7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d80:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	4a0e      	ldr	r2, [pc, #56]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d86:	fb03 f202 	mul.w	r2, r3, r2
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
 8002d92:	e004      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	4a0b      	ldr	r2, [pc, #44]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d98:	fb02 f303 	mul.w	r3, r2, r3
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	623b      	str	r3, [r7, #32]
      break;
 8002da2:	e002      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002da6:	623b      	str	r3, [r7, #32]
      break;
 8002da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002daa:	6a3b      	ldr	r3, [r7, #32]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3728      	adds	r7, #40	; 0x28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc90      	pop	{r4, r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	08005538 	.word	0x08005538
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	007a1200 	.word	0x007a1200
 8002dc4:	003d0900 	.word	0x003d0900

08002dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dcc:	4b02      	ldr	r3, [pc, #8]	; (8002dd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	20000008 	.word	0x20000008

08002ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002de0:	f7ff fff2 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4903      	ldr	r1, [pc, #12]	; (8002e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	0800589c 	.word	0x0800589c

08002e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e08:	f7ff ffde 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	0adb      	lsrs	r3, r3, #11
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	4903      	ldr	r1, [pc, #12]	; (8002e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e1a:	5ccb      	ldrb	r3, [r1, r3]
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021000 	.word	0x40021000
 8002e28:	0800589c 	.word	0x0800589c

08002e2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e34:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <RCC_Delay+0x34>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <RCC_Delay+0x38>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	0a5b      	lsrs	r3, r3, #9
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	fb02 f303 	mul.w	r3, r2, r3
 8002e46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e48:	bf00      	nop
  }
  while (Delay --);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1e5a      	subs	r2, r3, #1
 8002e4e:	60fa      	str	r2, [r7, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f9      	bne.n	8002e48 <RCC_Delay+0x1c>
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr
 8002e60:	20000008 	.word	0x20000008
 8002e64:	10624dd3 	.word	0x10624dd3

08002e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d07d      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e84:	2300      	movs	r3, #0
 8002e86:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e88:	4b4f      	ldr	r3, [pc, #316]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10d      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e94:	4b4c      	ldr	r3, [pc, #304]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	4a4b      	ldr	r2, [pc, #300]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	61d3      	str	r3, [r2, #28]
 8002ea0:	4b49      	ldr	r3, [pc, #292]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eac:	2301      	movs	r3, #1
 8002eae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	4b46      	ldr	r3, [pc, #280]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d118      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ebc:	4b43      	ldr	r3, [pc, #268]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a42      	ldr	r2, [pc, #264]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec8:	f7ff f8cc 	bl	8002064 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ece:	e008      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed0:	f7ff f8c8 	bl	8002064 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e06d      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee2:	4b3a      	ldr	r3, [pc, #232]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eee:	4b36      	ldr	r3, [pc, #216]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d02e      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d027      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f0c:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f16:	4b2e      	ldr	r3, [pc, #184]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f1c:	4b2c      	ldr	r3, [pc, #176]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f22:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d014      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7ff f897 	bl	8002064 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f38:	e00a      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3a:	f7ff f893 	bl	8002064 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e036      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f50:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0ee      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f5c:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4917      	ldr	r1, [pc, #92]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f6e:	7dfb      	ldrb	r3, [r7, #23]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f74:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	490b      	ldr	r1, [pc, #44]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002faa:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	4904      	ldr	r1, [pc, #16]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40007000 	.word	0x40007000
 8002fd0:	42420440 	.word	0x42420440

08002fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e076      	b.n	80030d4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d108      	bne.n	8003000 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ff6:	d009      	beq.n	800300c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61da      	str	r2, [r3, #28]
 8002ffe:	e005      	b.n	800300c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fe fdb4 	bl	8001b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003042:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003090:	ea42 0103 	orr.w	r1, r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	0c1a      	lsrs	r2, r3, #16
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f002 0204 	and.w	r2, r2, #4
 80030b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69da      	ldr	r2, [r3, #28]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_SPI_Transmit+0x22>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e126      	b.n	800334c <HAL_SPI_Transmit+0x270>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003106:	f7fe ffad 	bl	8002064 <HAL_GetTick>
 800310a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800310c:	88fb      	ldrh	r3, [r7, #6]
 800310e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d002      	beq.n	8003122 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800311c:	2302      	movs	r3, #2
 800311e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003120:	e10b      	b.n	800333a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <HAL_SPI_Transmit+0x52>
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d102      	bne.n	8003134 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003132:	e102      	b.n	800333a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2203      	movs	r2, #3
 8003138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	88fa      	ldrh	r2, [r7, #6]
 800314c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	88fa      	ldrh	r2, [r7, #6]
 8003152:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800317a:	d10f      	bne.n	800319c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800318a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800319a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a6:	2b40      	cmp	r3, #64	; 0x40
 80031a8:	d007      	beq.n	80031ba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c2:	d14b      	bne.n	800325c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_SPI_Transmit+0xf6>
 80031cc:	8afb      	ldrh	r3, [r7, #22]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d13e      	bne.n	8003250 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	881a      	ldrh	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	1c9a      	adds	r2, r3, #2
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031f6:	e02b      	b.n	8003250 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b02      	cmp	r3, #2
 8003204:	d112      	bne.n	800322c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	881a      	ldrh	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	1c9a      	adds	r2, r3, #2
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	86da      	strh	r2, [r3, #54]	; 0x36
 800322a:	e011      	b.n	8003250 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800322c:	f7fe ff1a 	bl	8002064 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d803      	bhi.n	8003244 <HAL_SPI_Transmit+0x168>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003242:	d102      	bne.n	800324a <HAL_SPI_Transmit+0x16e>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800324e:	e074      	b.n	800333a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1ce      	bne.n	80031f8 <HAL_SPI_Transmit+0x11c>
 800325a:	e04c      	b.n	80032f6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_SPI_Transmit+0x18e>
 8003264:	8afb      	ldrh	r3, [r7, #22]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d140      	bne.n	80032ec <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	330c      	adds	r3, #12
 8003274:	7812      	ldrb	r2, [r2, #0]
 8003276:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003290:	e02c      	b.n	80032ec <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b02      	cmp	r3, #2
 800329e:	d113      	bne.n	80032c8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	330c      	adds	r3, #12
 80032aa:	7812      	ldrb	r2, [r2, #0]
 80032ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80032c6:	e011      	b.n	80032ec <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032c8:	f7fe fecc 	bl	8002064 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d803      	bhi.n	80032e0 <HAL_SPI_Transmit+0x204>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032de:	d102      	bne.n	80032e6 <HAL_SPI_Transmit+0x20a>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d102      	bne.n	80032ec <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032ea:	e026      	b.n	800333a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1cd      	bne.n	8003292 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	6839      	ldr	r1, [r7, #0]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f8b2 	bl	8003464 <SPI_EndRxTxTransaction>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003314:	2300      	movs	r3, #0
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	77fb      	strb	r3, [r7, #31]
 8003336:	e000      	b.n	800333a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003338:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800334a:	7ffb      	ldrb	r3, [r7, #31]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3720      	adds	r7, #32
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003364:	f7fe fe7e 	bl	8002064 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	4413      	add	r3, r2
 8003372:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003374:	f7fe fe76 	bl	8002064 <HAL_GetTick>
 8003378:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800337a:	4b39      	ldr	r3, [pc, #228]	; (8003460 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	015b      	lsls	r3, r3, #5
 8003380:	0d1b      	lsrs	r3, r3, #20
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	fb02 f303 	mul.w	r3, r2, r3
 8003388:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800338a:	e054      	b.n	8003436 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003392:	d050      	beq.n	8003436 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003394:	f7fe fe66 	bl	8002064 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d902      	bls.n	80033aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d13d      	bne.n	8003426 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033c2:	d111      	bne.n	80033e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033cc:	d004      	beq.n	80033d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d6:	d107      	bne.n	80033e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f0:	d10f      	bne.n	8003412 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003410:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e017      	b.n	8003456 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	3b01      	subs	r3, #1
 8003434:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4013      	ands	r3, r2
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	429a      	cmp	r2, r3
 8003444:	bf0c      	ite	eq
 8003446:	2301      	moveq	r3, #1
 8003448:	2300      	movne	r3, #0
 800344a:	b2db      	uxtb	r3, r3
 800344c:	461a      	mov	r2, r3
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	429a      	cmp	r2, r3
 8003452:	d19b      	bne.n	800338c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000008 	.word	0x20000008

08003464 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af02      	add	r7, sp, #8
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2200      	movs	r2, #0
 8003478:	2180      	movs	r1, #128	; 0x80
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f7ff ff6a 	bl	8003354 <SPI_WaitFlagStateUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d007      	beq.n	8003496 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	f043 0220 	orr.w	r2, r3, #32
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e000      	b.n	8003498 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e041      	b.n	8003536 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fe fc2c 	bl	8001d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3304      	adds	r3, #4
 80034dc:	4619      	mov	r1, r3
 80034de:	4610      	mov	r0, r2
 80034e0:	f000 fd44 	bl	8003f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d001      	beq.n	8003558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e035      	b.n	80035c4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a16      	ldr	r2, [pc, #88]	; (80035d0 <HAL_TIM_Base_Start_IT+0x90>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d009      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x4e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003582:	d004      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x4e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <HAL_TIM_Base_Start_IT+0x94>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d111      	bne.n	80035b2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b06      	cmp	r3, #6
 800359e:	d010      	beq.n	80035c2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b0:	e007      	b.n	80035c2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40000400 	.word	0x40000400

080035d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e041      	b.n	800366e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fe fb06 	bl	8001c10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3304      	adds	r3, #4
 8003614:	4619      	mov	r1, r3
 8003616:	4610      	mov	r0, r2
 8003618:	f000 fca8 	bl	8003f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d109      	bne.n	800369c <HAL_TIM_PWM_Start+0x24>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b01      	cmp	r3, #1
 8003692:	bf14      	ite	ne
 8003694:	2301      	movne	r3, #1
 8003696:	2300      	moveq	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e022      	b.n	80036e2 <HAL_TIM_PWM_Start+0x6a>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d109      	bne.n	80036b6 <HAL_TIM_PWM_Start+0x3e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	bf14      	ite	ne
 80036ae:	2301      	movne	r3, #1
 80036b0:	2300      	moveq	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	e015      	b.n	80036e2 <HAL_TIM_PWM_Start+0x6a>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d109      	bne.n	80036d0 <HAL_TIM_PWM_Start+0x58>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e008      	b.n	80036e2 <HAL_TIM_PWM_Start+0x6a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	bf14      	ite	ne
 80036dc:	2301      	movne	r3, #1
 80036de:	2300      	moveq	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e059      	b.n	800379e <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d104      	bne.n	80036fa <HAL_TIM_PWM_Start+0x82>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f8:	e013      	b.n	8003722 <HAL_TIM_PWM_Start+0xaa>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d104      	bne.n	800370a <HAL_TIM_PWM_Start+0x92>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003708:	e00b      	b.n	8003722 <HAL_TIM_PWM_Start+0xaa>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b08      	cmp	r3, #8
 800370e:	d104      	bne.n	800371a <HAL_TIM_PWM_Start+0xa2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003718:	e003      	b.n	8003722 <HAL_TIM_PWM_Start+0xaa>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2201      	movs	r2, #1
 8003728:	6839      	ldr	r1, [r7, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fe94 	bl	8004458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <HAL_TIM_PWM_Start+0x130>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d107      	bne.n	800374a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003748:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a16      	ldr	r2, [pc, #88]	; (80037a8 <HAL_TIM_PWM_Start+0x130>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d009      	beq.n	8003768 <HAL_TIM_PWM_Start+0xf0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375c:	d004      	beq.n	8003768 <HAL_TIM_PWM_Start+0xf0>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a12      	ldr	r2, [pc, #72]	; (80037ac <HAL_TIM_PWM_Start+0x134>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d111      	bne.n	800378c <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b06      	cmp	r3, #6
 8003778:	d010      	beq.n	800379c <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0201 	orr.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378a:	e007      	b.n	800379c <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40012c00 	.word	0x40012c00
 80037ac:	40000400 	.word	0x40000400

080037b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e093      	b.n	80038ec <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d106      	bne.n	80037de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7fe fa37 	bl	8001c4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2202      	movs	r2, #2
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037f4:	f023 0307 	bic.w	r3, r3, #7
 80037f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3304      	adds	r3, #4
 8003802:	4619      	mov	r1, r3
 8003804:	4610      	mov	r0, r2
 8003806:	f000 fbb1 	bl	8003f6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003832:	f023 0303 	bic.w	r3, r3, #3
 8003836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	4313      	orrs	r3, r2
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003850:	f023 030c 	bic.w	r3, r3, #12
 8003854:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800385c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003860:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	4313      	orrs	r3, r2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	011a      	lsls	r2, r3, #4
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	031b      	lsls	r3, r3, #12
 8003880:	4313      	orrs	r3, r2
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800388e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	4313      	orrs	r3, r2
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003904:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800390c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003914:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800391c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d110      	bne.n	8003946 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d102      	bne.n	8003930 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800392a:	7b7b      	ldrb	r3, [r7, #13]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d001      	beq.n	8003934 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e069      	b.n	8003a08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003944:	e031      	b.n	80039aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b04      	cmp	r3, #4
 800394a:	d110      	bne.n	800396e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800394c:	7bbb      	ldrb	r3, [r7, #14]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d102      	bne.n	8003958 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003952:	7b3b      	ldrb	r3, [r7, #12]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d001      	beq.n	800395c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e055      	b.n	8003a08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800396c:	e01d      	b.n	80039aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d108      	bne.n	8003986 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003974:	7bbb      	ldrb	r3, [r7, #14]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d105      	bne.n	8003986 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800397a:	7b7b      	ldrb	r3, [r7, #13]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d102      	bne.n	8003986 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003980:	7b3b      	ldrb	r3, [r7, #12]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d001      	beq.n	800398a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e03e      	b.n	8003a08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2202      	movs	r2, #2
 800398e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2202      	movs	r2, #2
 8003996:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2202      	movs	r2, #2
 800399e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_TIM_Encoder_Start+0xc4>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d008      	beq.n	80039c8 <HAL_TIM_Encoder_Start+0xd4>
 80039b6:	e00f      	b.n	80039d8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2201      	movs	r2, #1
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fd49 	bl	8004458 <TIM_CCxChannelCmd>
      break;
 80039c6:	e016      	b.n	80039f6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2201      	movs	r2, #1
 80039ce:	2104      	movs	r1, #4
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fd41 	bl	8004458 <TIM_CCxChannelCmd>
      break;
 80039d6:	e00e      	b.n	80039f6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2201      	movs	r2, #1
 80039de:	2100      	movs	r1, #0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fd39 	bl	8004458 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2201      	movs	r2, #1
 80039ec:	2104      	movs	r1, #4
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fd32 	bl	8004458 <TIM_CCxChannelCmd>
      break;
 80039f4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0201 	orr.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d122      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d11b      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0202 	mvn.w	r2, #2
 8003a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fa6f 	bl	8003f36 <HAL_TIM_IC_CaptureCallback>
 8003a58:	e005      	b.n	8003a66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fa62 	bl	8003f24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 fa71 	bl	8003f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d122      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d11b      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0204 	mvn.w	r2, #4
 8003a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2202      	movs	r2, #2
 8003a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa45 	bl	8003f36 <HAL_TIM_IC_CaptureCallback>
 8003aac:	e005      	b.n	8003aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fa38 	bl	8003f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fa47 	bl	8003f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d122      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d11b      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0208 	mvn.w	r2, #8
 8003ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2204      	movs	r2, #4
 8003aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fa1b 	bl	8003f36 <HAL_TIM_IC_CaptureCallback>
 8003b00:	e005      	b.n	8003b0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fa0e 	bl	8003f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fa1d 	bl	8003f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	2b10      	cmp	r3, #16
 8003b20:	d122      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0310 	and.w	r3, r3, #16
 8003b2c:	2b10      	cmp	r3, #16
 8003b2e:	d11b      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0210 	mvn.w	r2, #16
 8003b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f9f1 	bl	8003f36 <HAL_TIM_IC_CaptureCallback>
 8003b54:	e005      	b.n	8003b62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f9e4 	bl	8003f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f9f3 	bl	8003f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d10e      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d107      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0201 	mvn.w	r2, #1
 8003b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fd f9ea 	bl	8000f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9e:	2b80      	cmp	r3, #128	; 0x80
 8003ba0:	d10e      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bac:	2b80      	cmp	r3, #128	; 0x80
 8003bae:	d107      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fd22 	bl	8004604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bca:	2b40      	cmp	r3, #64	; 0x40
 8003bcc:	d10e      	bne.n	8003bec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd8:	2b40      	cmp	r3, #64	; 0x40
 8003bda:	d107      	bne.n	8003bec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f9b7 	bl	8003f5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d10e      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d107      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0220 	mvn.w	r2, #32
 8003c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fced 	bl	80045f2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c18:	bf00      	nop
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e0ac      	b.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b0c      	cmp	r3, #12
 8003c46:	f200 809f 	bhi.w	8003d88 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c4a:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c50:	08003c85 	.word	0x08003c85
 8003c54:	08003d89 	.word	0x08003d89
 8003c58:	08003d89 	.word	0x08003d89
 8003c5c:	08003d89 	.word	0x08003d89
 8003c60:	08003cc5 	.word	0x08003cc5
 8003c64:	08003d89 	.word	0x08003d89
 8003c68:	08003d89 	.word	0x08003d89
 8003c6c:	08003d89 	.word	0x08003d89
 8003c70:	08003d07 	.word	0x08003d07
 8003c74:	08003d89 	.word	0x08003d89
 8003c78:	08003d89 	.word	0x08003d89
 8003c7c:	08003d89 	.word	0x08003d89
 8003c80:	08003d47 	.word	0x08003d47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 f9c6 	bl	800401c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0208 	orr.w	r2, r2, #8
 8003c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0204 	bic.w	r2, r2, #4
 8003cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6999      	ldr	r1, [r3, #24]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	619a      	str	r2, [r3, #24]
      break;
 8003cc2:	e062      	b.n	8003d8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fa0c 	bl	80040e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6999      	ldr	r1, [r3, #24]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	021a      	lsls	r2, r3, #8
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	619a      	str	r2, [r3, #24]
      break;
 8003d04:	e041      	b.n	8003d8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68b9      	ldr	r1, [r7, #8]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fa55 	bl	80041bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0208 	orr.w	r2, r2, #8
 8003d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0204 	bic.w	r2, r2, #4
 8003d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69d9      	ldr	r1, [r3, #28]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	61da      	str	r2, [r3, #28]
      break;
 8003d44:	e021      	b.n	8003d8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fa9f 	bl	8004290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69da      	ldr	r2, [r3, #28]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69d9      	ldr	r1, [r3, #28]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	021a      	lsls	r2, r3, #8
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	61da      	str	r2, [r3, #28]
      break;
 8003d86:	e000      	b.n	8003d8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003d88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_TIM_ConfigClockSource+0x18>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e0b3      	b.n	8003f1c <HAL_TIM_ConfigClockSource+0x180>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dec:	d03e      	beq.n	8003e6c <HAL_TIM_ConfigClockSource+0xd0>
 8003dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df2:	f200 8087 	bhi.w	8003f04 <HAL_TIM_ConfigClockSource+0x168>
 8003df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfa:	f000 8085 	beq.w	8003f08 <HAL_TIM_ConfigClockSource+0x16c>
 8003dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e02:	d87f      	bhi.n	8003f04 <HAL_TIM_ConfigClockSource+0x168>
 8003e04:	2b70      	cmp	r3, #112	; 0x70
 8003e06:	d01a      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0xa2>
 8003e08:	2b70      	cmp	r3, #112	; 0x70
 8003e0a:	d87b      	bhi.n	8003f04 <HAL_TIM_ConfigClockSource+0x168>
 8003e0c:	2b60      	cmp	r3, #96	; 0x60
 8003e0e:	d050      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0x116>
 8003e10:	2b60      	cmp	r3, #96	; 0x60
 8003e12:	d877      	bhi.n	8003f04 <HAL_TIM_ConfigClockSource+0x168>
 8003e14:	2b50      	cmp	r3, #80	; 0x50
 8003e16:	d03c      	beq.n	8003e92 <HAL_TIM_ConfigClockSource+0xf6>
 8003e18:	2b50      	cmp	r3, #80	; 0x50
 8003e1a:	d873      	bhi.n	8003f04 <HAL_TIM_ConfigClockSource+0x168>
 8003e1c:	2b40      	cmp	r3, #64	; 0x40
 8003e1e:	d058      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x136>
 8003e20:	2b40      	cmp	r3, #64	; 0x40
 8003e22:	d86f      	bhi.n	8003f04 <HAL_TIM_ConfigClockSource+0x168>
 8003e24:	2b30      	cmp	r3, #48	; 0x30
 8003e26:	d064      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0x156>
 8003e28:	2b30      	cmp	r3, #48	; 0x30
 8003e2a:	d86b      	bhi.n	8003f04 <HAL_TIM_ConfigClockSource+0x168>
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d060      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0x156>
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d867      	bhi.n	8003f04 <HAL_TIM_ConfigClockSource+0x168>
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d05c      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0x156>
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d05a      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e3c:	e062      	b.n	8003f04 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6899      	ldr	r1, [r3, #8]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f000 fae4 	bl	800441a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	609a      	str	r2, [r3, #8]
      break;
 8003e6a:	e04e      	b.n	8003f0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	6899      	ldr	r1, [r3, #8]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f000 facd 	bl	800441a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e8e:	609a      	str	r2, [r3, #8]
      break;
 8003e90:	e03b      	b.n	8003f0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6859      	ldr	r1, [r3, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f000 fa44 	bl	800432c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2150      	movs	r1, #80	; 0x50
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fa9b 	bl	80043e6 <TIM_ITRx_SetConfig>
      break;
 8003eb0:	e02b      	b.n	8003f0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6859      	ldr	r1, [r3, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f000 fa62 	bl	8004388 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2160      	movs	r1, #96	; 0x60
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fa8b 	bl	80043e6 <TIM_ITRx_SetConfig>
      break;
 8003ed0:	e01b      	b.n	8003f0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6859      	ldr	r1, [r3, #4]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f000 fa24 	bl	800432c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2140      	movs	r1, #64	; 0x40
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fa7b 	bl	80043e6 <TIM_ITRx_SetConfig>
      break;
 8003ef0:	e00b      	b.n	8003f0a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4619      	mov	r1, r3
 8003efc:	4610      	mov	r0, r2
 8003efe:	f000 fa72 	bl	80043e6 <TIM_ITRx_SetConfig>
        break;
 8003f02:	e002      	b.n	8003f0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f04:	bf00      	nop
 8003f06:	e000      	b.n	8003f0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr

08003f36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr

08003f5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a25      	ldr	r2, [pc, #148]	; (8004014 <TIM_Base_SetConfig+0xa8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d007      	beq.n	8003f94 <TIM_Base_SetConfig+0x28>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8a:	d003      	beq.n	8003f94 <TIM_Base_SetConfig+0x28>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a22      	ldr	r2, [pc, #136]	; (8004018 <TIM_Base_SetConfig+0xac>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d108      	bne.n	8003fa6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a1a      	ldr	r2, [pc, #104]	; (8004014 <TIM_Base_SetConfig+0xa8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d007      	beq.n	8003fbe <TIM_Base_SetConfig+0x52>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb4:	d003      	beq.n	8003fbe <TIM_Base_SetConfig+0x52>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a17      	ldr	r2, [pc, #92]	; (8004018 <TIM_Base_SetConfig+0xac>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d108      	bne.n	8003fd0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a07      	ldr	r2, [pc, #28]	; (8004014 <TIM_Base_SetConfig+0xa8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d103      	bne.n	8004004 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	615a      	str	r2, [r3, #20]
}
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	40012c00 	.word	0x40012c00
 8004018:	40000400 	.word	0x40000400

0800401c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	f023 0201 	bic.w	r2, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0303 	bic.w	r3, r3, #3
 8004052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f023 0302 	bic.w	r3, r3, #2
 8004064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a1c      	ldr	r2, [pc, #112]	; (80040e4 <TIM_OC1_SetConfig+0xc8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d10c      	bne.n	8004092 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f023 0308 	bic.w	r3, r3, #8
 800407e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f023 0304 	bic.w	r3, r3, #4
 8004090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <TIM_OC1_SetConfig+0xc8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d111      	bne.n	80040be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	621a      	str	r2, [r3, #32]
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40012c00 	.word	0x40012c00

080040e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f023 0210 	bic.w	r2, r3, #16
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f023 0320 	bic.w	r3, r3, #32
 8004132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <TIM_OC2_SetConfig+0xd0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d10d      	bne.n	8004164 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800414e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004162:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a14      	ldr	r2, [pc, #80]	; (80041b8 <TIM_OC2_SetConfig+0xd0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d113      	bne.n	8004194 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004172:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800417a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr
 80041b8:	40012c00 	.word	0x40012c00

080041bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0303 	bic.w	r3, r3, #3
 80041f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a1d      	ldr	r2, [pc, #116]	; (800428c <TIM_OC3_SetConfig+0xd0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d10d      	bne.n	8004236 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004220:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a14      	ldr	r2, [pc, #80]	; (800428c <TIM_OC3_SetConfig+0xd0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d113      	bne.n	8004266 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800424c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	621a      	str	r2, [r3, #32]
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40012c00 	.word	0x40012c00

08004290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	031b      	lsls	r3, r3, #12
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a0f      	ldr	r2, [pc, #60]	; (8004328 <TIM_OC4_SetConfig+0x98>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d109      	bne.n	8004304 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	019b      	lsls	r3, r3, #6
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr
 8004328:	40012c00 	.word	0x40012c00

0800432c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	f023 0201 	bic.w	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f023 030a 	bic.w	r3, r3, #10
 8004368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	bf00      	nop
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr

08004388 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	f023 0210 	bic.w	r2, r3, #16
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	031b      	lsls	r3, r3, #12
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	621a      	str	r2, [r3, #32]
}
 80043dc:	bf00      	nop
 80043de:	371c      	adds	r7, #28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr

080043e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b085      	sub	sp, #20
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	f043 0307 	orr.w	r3, r3, #7
 8004408:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	609a      	str	r2, [r3, #8]
}
 8004410:	bf00      	nop
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr

0800441a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800441a:	b480      	push	{r7}
 800441c:	b087      	sub	sp, #28
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
 8004426:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004434:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	021a      	lsls	r2, r3, #8
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	431a      	orrs	r2, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4313      	orrs	r3, r2
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	609a      	str	r2, [r3, #8]
}
 800444e:	bf00      	nop
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	2201      	movs	r2, #1
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1a      	ldr	r2, [r3, #32]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	43db      	mvns	r3, r3
 800447a:	401a      	ands	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a1a      	ldr	r2, [r3, #32]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	fa01 f303 	lsl.w	r3, r1, r3
 8004490:	431a      	orrs	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	621a      	str	r2, [r3, #32]
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr

080044a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e041      	b.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a14      	ldr	r2, [pc, #80]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d009      	beq.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004504:	d004      	beq.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a10      	ldr	r2, [pc, #64]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d10c      	bne.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004516:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	4313      	orrs	r3, r2
 8004520:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40000400 	.word	0x40000400

08004550 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004568:	2302      	movs	r3, #2
 800456a:	e03d      	b.n	80045e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr

080045f2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr

08004604 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr

08004616 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e03f      	b.n	80046a8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d106      	bne.n	8004642 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7fd fbcb 	bl	8001dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2224      	movs	r2, #36	; 0x24
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004658:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f828 	bl	80046b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800466e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695a      	ldr	r2, [r3, #20]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800467e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800468e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046ea:	f023 030c 	bic.w	r3, r3, #12
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	430b      	orrs	r3, r1
 80046f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a2c      	ldr	r2, [pc, #176]	; (80047c4 <UART_SetConfig+0x114>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d103      	bne.n	8004720 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004718:	f7fe fb74 	bl	8002e04 <HAL_RCC_GetPCLK2Freq>
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	e002      	b.n	8004726 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004720:	f7fe fb5c 	bl	8002ddc <HAL_RCC_GetPCLK1Freq>
 8004724:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	009a      	lsls	r2, r3, #2
 8004730:	441a      	add	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	fbb2 f3f3 	udiv	r3, r2, r3
 800473c:	4a22      	ldr	r2, [pc, #136]	; (80047c8 <UART_SetConfig+0x118>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	0119      	lsls	r1, r3, #4
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4613      	mov	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	009a      	lsls	r2, r3, #2
 8004750:	441a      	add	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	fbb2 f2f3 	udiv	r2, r2, r3
 800475c:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <UART_SetConfig+0x118>)
 800475e:	fba3 0302 	umull	r0, r3, r3, r2
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	2064      	movs	r0, #100	; 0x64
 8004766:	fb00 f303 	mul.w	r3, r0, r3
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	3332      	adds	r3, #50	; 0x32
 8004770:	4a15      	ldr	r2, [pc, #84]	; (80047c8 <UART_SetConfig+0x118>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800477c:	4419      	add	r1, r3
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	009a      	lsls	r2, r3, #2
 8004788:	441a      	add	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	fbb2 f2f3 	udiv	r2, r2, r3
 8004794:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <UART_SetConfig+0x118>)
 8004796:	fba3 0302 	umull	r0, r3, r3, r2
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	2064      	movs	r0, #100	; 0x64
 800479e:	fb00 f303 	mul.w	r3, r0, r3
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	3332      	adds	r3, #50	; 0x32
 80047a8:	4a07      	ldr	r2, [pc, #28]	; (80047c8 <UART_SetConfig+0x118>)
 80047aa:	fba2 2303 	umull	r2, r3, r2, r3
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	f003 020f 	and.w	r2, r3, #15
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	440a      	add	r2, r1
 80047ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047bc:	bf00      	nop
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40013800 	.word	0x40013800
 80047c8:	51eb851f 	.word	0x51eb851f

080047cc <LL_ADC_REG_SetSequencerLength>:
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr

080047f0 <LL_ADC_IsEnabled>:
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b01      	cmp	r3, #1
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
}
 800480a:	4618      	mov	r0, r3
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr

08004814 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8004814:	b590      	push	{r4, r7, lr}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800481e:	2300      	movs	r3, #0
 8004820:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8004822:	4813      	ldr	r0, [pc, #76]	; (8004870 <LL_ADC_CommonInit+0x5c>)
 8004824:	f7ff ffe4 	bl	80047f0 <LL_ADC_IsEnabled>
 8004828:	4604      	mov	r4, r0
 800482a:	4812      	ldr	r0, [pc, #72]	; (8004874 <LL_ADC_CommonInit+0x60>)
 800482c:	f7ff ffe0 	bl	80047f0 <LL_ADC_IsEnabled>
 8004830:	4603      	mov	r3, r0
 8004832:	4323      	orrs	r3, r4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d114      	bne.n	8004862 <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d009      	beq.n	8004854 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	605a      	str	r2, [r3, #4]
 8004852:	e008      	b.n	8004866 <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	605a      	str	r2, [r3, #4]
 8004860:	e001      	b.n	8004866 <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8004866:	7bfb      	ldrb	r3, [r7, #15]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	bd90      	pop	{r4, r7, pc}
 8004870:	40012400 	.word	0x40012400
 8004874:	40012800 	.word	0x40012800

08004878 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004882:	2300      	movs	r3, #0
 8004884:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff ffb2 	bl	80047f0 <LL_ADC_IsEnabled>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d112      	bne.n	80048b8 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	609a      	str	r2, [r3, #8]
 80048b6:	e001      	b.n	80048bc <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b084      	sub	sp, #16
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80048d0:	2300      	movs	r3, #0
 80048d2:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff ff8b 	bl	80047f0 <LL_ADC_IsEnabled>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d131      	bne.n	8004944 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00c      	beq.n	8004902 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	6859      	ldr	r1, [r3, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	605a      	str	r2, [r3, #4]
 8004900:	e008      	b.n	8004914 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 800491c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	6811      	ldr	r1, [r2, #0]
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	68d2      	ldr	r2, [r2, #12]
 8004928:	4311      	orrs	r1, r2
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	6912      	ldr	r2, [r2, #16]
 800492e:	430a      	orrs	r2, r1
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4619      	mov	r1, r3
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff ff45 	bl	80047cc <LL_ADC_REG_SetSequencerLength>
 8004942:	e001      	b.n	8004948 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004952:	b490      	push	{r4, r7}
 8004954:	b088      	sub	sp, #32
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	461a      	mov	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	0e1b      	lsrs	r3, r3, #24
 8004966:	4413      	add	r3, r2
 8004968:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800496a:	6822      	ldr	r2, [r4, #0]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	fa93 f3a3 	rbit	r3, r3
 8004976:	613b      	str	r3, [r7, #16]
  return result;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	fab3 f383 	clz	r3, r3
 800497e:	b2db      	uxtb	r3, r3
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	210f      	movs	r1, #15
 8004984:	fa01 f303 	lsl.w	r3, r1, r3
 8004988:	43db      	mvns	r3, r3
 800498a:	401a      	ands	r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	fa93 f3a3 	rbit	r3, r3
 8004996:	61bb      	str	r3, [r7, #24]
  return result;
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	fab3 f383 	clz	r3, r3
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	fa01 f303 	lsl.w	r3, r1, r3
 80049a8:	4313      	orrs	r3, r2
 80049aa:	6023      	str	r3, [r4, #0]
}
 80049ac:	bf00      	nop
 80049ae:	3720      	adds	r7, #32
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc90      	pop	{r4, r7}
 80049b4:	4770      	bx	lr

080049b6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80049b6:	b490      	push	{r4, r7}
 80049b8:	b088      	sub	sp, #32
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	461a      	mov	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	0e1b      	lsrs	r3, r3, #24
 80049ca:	4413      	add	r3, r2
 80049cc:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80049ce:	6822      	ldr	r2, [r4, #0]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	fa93 f3a3 	rbit	r3, r3
 80049da:	613b      	str	r3, [r7, #16]
  return result;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	fab3 f383 	clz	r3, r3
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	2103      	movs	r1, #3
 80049e8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ec:	43db      	mvns	r3, r3
 80049ee:	401a      	ands	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	fa93 f3a3 	rbit	r3, r3
 80049fa:	61bb      	str	r3, [r7, #24]
  return result;
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	fab3 f383 	clz	r3, r3
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8004a10:	bf00      	nop
 8004a12:	3720      	adds	r7, #32
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bc90      	pop	{r4, r7}
 8004a18:	4770      	bx	lr

08004a1a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8004a1a:	b490      	push	{r4, r7}
 8004a1c:	b088      	sub	sp, #32
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	0e1b      	lsrs	r3, r3, #24
 8004a2e:	4413      	add	r3, r2
 8004a30:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	fa93 f3a3 	rbit	r3, r3
 8004a3e:	613b      	str	r3, [r7, #16]
  return result;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	fab3 f383 	clz	r3, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	2104      	movs	r1, #4
 8004a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a50:	43db      	mvns	r3, r3
 8004a52:	401a      	ands	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	fa93 f3a3 	rbit	r3, r3
 8004a5e:	61bb      	str	r3, [r7, #24]
  return result;
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	fab3 f383 	clz	r3, r3
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a70:	4313      	orrs	r3, r2
 8004a72:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8004a74:	bf00      	nop
 8004a76:	3720      	adds	r7, #32
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc90      	pop	{r4, r7}
 8004a7c:	4770      	bx	lr

08004a7e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b087      	sub	sp, #28
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	0a1b      	lsrs	r3, r3, #8
 8004a92:	43db      	mvns	r3, r3
 8004a94:	401a      	ands	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	0a1b      	lsrs	r3, r3, #8
 8004a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	fa93 f3a3 	rbit	r3, r3
 8004aa2:	613b      	str	r3, [r7, #16]
  return result;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	fab3 f383 	clz	r3, r3
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	4619      	mov	r1, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	408b      	lsls	r3, r1
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	60da      	str	r2, [r3, #12]
}
 8004ab8:	bf00      	nop
 8004aba:	371c      	adds	r7, #28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bc80      	pop	{r7}
 8004ac0:	4770      	bx	lr

08004ac2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b088      	sub	sp, #32
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	fa93 f3a3 	rbit	r3, r3
 8004ae0:	60fb      	str	r3, [r7, #12]
  return result;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8004ae4:	fab3 f383 	clz	r3, r3
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8004aec:	e044      	b.n	8004b78 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8004aee:	2201      	movs	r2, #1
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	409a      	lsls	r2, r3
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	4013      	ands	r3, r2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d03a      	beq.n	8004b72 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	2b07      	cmp	r3, #7
 8004b00:	d806      	bhi.n	8004b10 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8004b02:	f240 1201 	movw	r2, #257	; 0x101
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	61bb      	str	r3, [r7, #24]
 8004b0e:	e008      	b.n	8004b22 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	3b08      	subs	r3, #8
 8004b14:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b20:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d106      	bne.n	8004b38 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	69b9      	ldr	r1, [r7, #24]
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff ffa3 	bl	8004a7e <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	69b9      	ldr	r1, [r7, #24]
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ff06 	bl	8004952 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d003      	beq.n	8004b56 <LL_GPIO_Init+0x94>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b09      	cmp	r3, #9
 8004b54:	d10d      	bne.n	8004b72 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	69b9      	ldr	r1, [r7, #24]
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff ff29 	bl	80049b6 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	69b9      	ldr	r1, [r7, #24]
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff ff54 	bl	8004a1a <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	3301      	adds	r3, #1
 8004b76:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1b4      	bne.n	8004aee <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3720      	adds	r7, #32
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <__errno>:
 8004b90:	4b01      	ldr	r3, [pc, #4]	; (8004b98 <__errno+0x8>)
 8004b92:	6818      	ldr	r0, [r3, #0]
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000014 	.word	0x20000014

08004b9c <__libc_init_array>:
 8004b9c:	b570      	push	{r4, r5, r6, lr}
 8004b9e:	2600      	movs	r6, #0
 8004ba0:	4d0c      	ldr	r5, [pc, #48]	; (8004bd4 <__libc_init_array+0x38>)
 8004ba2:	4c0d      	ldr	r4, [pc, #52]	; (8004bd8 <__libc_init_array+0x3c>)
 8004ba4:	1b64      	subs	r4, r4, r5
 8004ba6:	10a4      	asrs	r4, r4, #2
 8004ba8:	42a6      	cmp	r6, r4
 8004baa:	d109      	bne.n	8004bc0 <__libc_init_array+0x24>
 8004bac:	f000 fc9c 	bl	80054e8 <_init>
 8004bb0:	2600      	movs	r6, #0
 8004bb2:	4d0a      	ldr	r5, [pc, #40]	; (8004bdc <__libc_init_array+0x40>)
 8004bb4:	4c0a      	ldr	r4, [pc, #40]	; (8004be0 <__libc_init_array+0x44>)
 8004bb6:	1b64      	subs	r4, r4, r5
 8004bb8:	10a4      	asrs	r4, r4, #2
 8004bba:	42a6      	cmp	r6, r4
 8004bbc:	d105      	bne.n	8004bca <__libc_init_array+0x2e>
 8004bbe:	bd70      	pop	{r4, r5, r6, pc}
 8004bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bc4:	4798      	blx	r3
 8004bc6:	3601      	adds	r6, #1
 8004bc8:	e7ee      	b.n	8004ba8 <__libc_init_array+0xc>
 8004bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bce:	4798      	blx	r3
 8004bd0:	3601      	adds	r6, #1
 8004bd2:	e7f2      	b.n	8004bba <__libc_init_array+0x1e>
 8004bd4:	080058d8 	.word	0x080058d8
 8004bd8:	080058d8 	.word	0x080058d8
 8004bdc:	080058d8 	.word	0x080058d8
 8004be0:	080058dc 	.word	0x080058dc

08004be4 <memcpy>:
 8004be4:	440a      	add	r2, r1
 8004be6:	4291      	cmp	r1, r2
 8004be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bec:	d100      	bne.n	8004bf0 <memcpy+0xc>
 8004bee:	4770      	bx	lr
 8004bf0:	b510      	push	{r4, lr}
 8004bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bf6:	4291      	cmp	r1, r2
 8004bf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bfc:	d1f9      	bne.n	8004bf2 <memcpy+0xe>
 8004bfe:	bd10      	pop	{r4, pc}

08004c00 <memset>:
 8004c00:	4603      	mov	r3, r0
 8004c02:	4402      	add	r2, r0
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d100      	bne.n	8004c0a <memset+0xa>
 8004c08:	4770      	bx	lr
 8004c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c0e:	e7f9      	b.n	8004c04 <memset+0x4>

08004c10 <siprintf>:
 8004c10:	b40e      	push	{r1, r2, r3}
 8004c12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c16:	b500      	push	{lr}
 8004c18:	b09c      	sub	sp, #112	; 0x70
 8004c1a:	ab1d      	add	r3, sp, #116	; 0x74
 8004c1c:	9002      	str	r0, [sp, #8]
 8004c1e:	9006      	str	r0, [sp, #24]
 8004c20:	9107      	str	r1, [sp, #28]
 8004c22:	9104      	str	r1, [sp, #16]
 8004c24:	4808      	ldr	r0, [pc, #32]	; (8004c48 <siprintf+0x38>)
 8004c26:	4909      	ldr	r1, [pc, #36]	; (8004c4c <siprintf+0x3c>)
 8004c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c2c:	9105      	str	r1, [sp, #20]
 8004c2e:	6800      	ldr	r0, [r0, #0]
 8004c30:	a902      	add	r1, sp, #8
 8004c32:	9301      	str	r3, [sp, #4]
 8004c34:	f000 f868 	bl	8004d08 <_svfiprintf_r>
 8004c38:	2200      	movs	r2, #0
 8004c3a:	9b02      	ldr	r3, [sp, #8]
 8004c3c:	701a      	strb	r2, [r3, #0]
 8004c3e:	b01c      	add	sp, #112	; 0x70
 8004c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c44:	b003      	add	sp, #12
 8004c46:	4770      	bx	lr
 8004c48:	20000014 	.word	0x20000014
 8004c4c:	ffff0208 	.word	0xffff0208

08004c50 <__ssputs_r>:
 8004c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c54:	688e      	ldr	r6, [r1, #8]
 8004c56:	4682      	mov	sl, r0
 8004c58:	429e      	cmp	r6, r3
 8004c5a:	460c      	mov	r4, r1
 8004c5c:	4690      	mov	r8, r2
 8004c5e:	461f      	mov	r7, r3
 8004c60:	d838      	bhi.n	8004cd4 <__ssputs_r+0x84>
 8004c62:	898a      	ldrh	r2, [r1, #12]
 8004c64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c68:	d032      	beq.n	8004cd0 <__ssputs_r+0x80>
 8004c6a:	6825      	ldr	r5, [r4, #0]
 8004c6c:	6909      	ldr	r1, [r1, #16]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	eba5 0901 	sub.w	r9, r5, r1
 8004c74:	6965      	ldr	r5, [r4, #20]
 8004c76:	444b      	add	r3, r9
 8004c78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c80:	106d      	asrs	r5, r5, #1
 8004c82:	429d      	cmp	r5, r3
 8004c84:	bf38      	it	cc
 8004c86:	461d      	movcc	r5, r3
 8004c88:	0553      	lsls	r3, r2, #21
 8004c8a:	d531      	bpl.n	8004cf0 <__ssputs_r+0xa0>
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	f000 fb61 	bl	8005354 <_malloc_r>
 8004c92:	4606      	mov	r6, r0
 8004c94:	b950      	cbnz	r0, 8004cac <__ssputs_r+0x5c>
 8004c96:	230c      	movs	r3, #12
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9c:	f8ca 3000 	str.w	r3, [sl]
 8004ca0:	89a3      	ldrh	r3, [r4, #12]
 8004ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ca6:	81a3      	strh	r3, [r4, #12]
 8004ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cac:	464a      	mov	r2, r9
 8004cae:	6921      	ldr	r1, [r4, #16]
 8004cb0:	f7ff ff98 	bl	8004be4 <memcpy>
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cbe:	81a3      	strh	r3, [r4, #12]
 8004cc0:	6126      	str	r6, [r4, #16]
 8004cc2:	444e      	add	r6, r9
 8004cc4:	6026      	str	r6, [r4, #0]
 8004cc6:	463e      	mov	r6, r7
 8004cc8:	6165      	str	r5, [r4, #20]
 8004cca:	eba5 0509 	sub.w	r5, r5, r9
 8004cce:	60a5      	str	r5, [r4, #8]
 8004cd0:	42be      	cmp	r6, r7
 8004cd2:	d900      	bls.n	8004cd6 <__ssputs_r+0x86>
 8004cd4:	463e      	mov	r6, r7
 8004cd6:	4632      	mov	r2, r6
 8004cd8:	4641      	mov	r1, r8
 8004cda:	6820      	ldr	r0, [r4, #0]
 8004cdc:	f000 fab8 	bl	8005250 <memmove>
 8004ce0:	68a3      	ldr	r3, [r4, #8]
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	1b9b      	subs	r3, r3, r6
 8004ce6:	60a3      	str	r3, [r4, #8]
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	4433      	add	r3, r6
 8004cec:	6023      	str	r3, [r4, #0]
 8004cee:	e7db      	b.n	8004ca8 <__ssputs_r+0x58>
 8004cf0:	462a      	mov	r2, r5
 8004cf2:	f000 fba3 	bl	800543c <_realloc_r>
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d1e1      	bne.n	8004cc0 <__ssputs_r+0x70>
 8004cfc:	4650      	mov	r0, sl
 8004cfe:	6921      	ldr	r1, [r4, #16]
 8004d00:	f000 fac0 	bl	8005284 <_free_r>
 8004d04:	e7c7      	b.n	8004c96 <__ssputs_r+0x46>
	...

08004d08 <_svfiprintf_r>:
 8004d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d0c:	4698      	mov	r8, r3
 8004d0e:	898b      	ldrh	r3, [r1, #12]
 8004d10:	4607      	mov	r7, r0
 8004d12:	061b      	lsls	r3, r3, #24
 8004d14:	460d      	mov	r5, r1
 8004d16:	4614      	mov	r4, r2
 8004d18:	b09d      	sub	sp, #116	; 0x74
 8004d1a:	d50e      	bpl.n	8004d3a <_svfiprintf_r+0x32>
 8004d1c:	690b      	ldr	r3, [r1, #16]
 8004d1e:	b963      	cbnz	r3, 8004d3a <_svfiprintf_r+0x32>
 8004d20:	2140      	movs	r1, #64	; 0x40
 8004d22:	f000 fb17 	bl	8005354 <_malloc_r>
 8004d26:	6028      	str	r0, [r5, #0]
 8004d28:	6128      	str	r0, [r5, #16]
 8004d2a:	b920      	cbnz	r0, 8004d36 <_svfiprintf_r+0x2e>
 8004d2c:	230c      	movs	r3, #12
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	f04f 30ff 	mov.w	r0, #4294967295
 8004d34:	e0d1      	b.n	8004eda <_svfiprintf_r+0x1d2>
 8004d36:	2340      	movs	r3, #64	; 0x40
 8004d38:	616b      	str	r3, [r5, #20]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d3e:	2320      	movs	r3, #32
 8004d40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d44:	2330      	movs	r3, #48	; 0x30
 8004d46:	f04f 0901 	mov.w	r9, #1
 8004d4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ef4 <_svfiprintf_r+0x1ec>
 8004d52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d56:	4623      	mov	r3, r4
 8004d58:	469a      	mov	sl, r3
 8004d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d5e:	b10a      	cbz	r2, 8004d64 <_svfiprintf_r+0x5c>
 8004d60:	2a25      	cmp	r2, #37	; 0x25
 8004d62:	d1f9      	bne.n	8004d58 <_svfiprintf_r+0x50>
 8004d64:	ebba 0b04 	subs.w	fp, sl, r4
 8004d68:	d00b      	beq.n	8004d82 <_svfiprintf_r+0x7a>
 8004d6a:	465b      	mov	r3, fp
 8004d6c:	4622      	mov	r2, r4
 8004d6e:	4629      	mov	r1, r5
 8004d70:	4638      	mov	r0, r7
 8004d72:	f7ff ff6d 	bl	8004c50 <__ssputs_r>
 8004d76:	3001      	adds	r0, #1
 8004d78:	f000 80aa 	beq.w	8004ed0 <_svfiprintf_r+0x1c8>
 8004d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d7e:	445a      	add	r2, fp
 8004d80:	9209      	str	r2, [sp, #36]	; 0x24
 8004d82:	f89a 3000 	ldrb.w	r3, [sl]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 80a2 	beq.w	8004ed0 <_svfiprintf_r+0x1c8>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d96:	f10a 0a01 	add.w	sl, sl, #1
 8004d9a:	9304      	str	r3, [sp, #16]
 8004d9c:	9307      	str	r3, [sp, #28]
 8004d9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004da2:	931a      	str	r3, [sp, #104]	; 0x68
 8004da4:	4654      	mov	r4, sl
 8004da6:	2205      	movs	r2, #5
 8004da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dac:	4851      	ldr	r0, [pc, #324]	; (8004ef4 <_svfiprintf_r+0x1ec>)
 8004dae:	f000 fa41 	bl	8005234 <memchr>
 8004db2:	9a04      	ldr	r2, [sp, #16]
 8004db4:	b9d8      	cbnz	r0, 8004dee <_svfiprintf_r+0xe6>
 8004db6:	06d0      	lsls	r0, r2, #27
 8004db8:	bf44      	itt	mi
 8004dba:	2320      	movmi	r3, #32
 8004dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dc0:	0711      	lsls	r1, r2, #28
 8004dc2:	bf44      	itt	mi
 8004dc4:	232b      	movmi	r3, #43	; 0x2b
 8004dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dca:	f89a 3000 	ldrb.w	r3, [sl]
 8004dce:	2b2a      	cmp	r3, #42	; 0x2a
 8004dd0:	d015      	beq.n	8004dfe <_svfiprintf_r+0xf6>
 8004dd2:	4654      	mov	r4, sl
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	f04f 0c0a 	mov.w	ip, #10
 8004dda:	9a07      	ldr	r2, [sp, #28]
 8004ddc:	4621      	mov	r1, r4
 8004dde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004de2:	3b30      	subs	r3, #48	; 0x30
 8004de4:	2b09      	cmp	r3, #9
 8004de6:	d94e      	bls.n	8004e86 <_svfiprintf_r+0x17e>
 8004de8:	b1b0      	cbz	r0, 8004e18 <_svfiprintf_r+0x110>
 8004dea:	9207      	str	r2, [sp, #28]
 8004dec:	e014      	b.n	8004e18 <_svfiprintf_r+0x110>
 8004dee:	eba0 0308 	sub.w	r3, r0, r8
 8004df2:	fa09 f303 	lsl.w	r3, r9, r3
 8004df6:	4313      	orrs	r3, r2
 8004df8:	46a2      	mov	sl, r4
 8004dfa:	9304      	str	r3, [sp, #16]
 8004dfc:	e7d2      	b.n	8004da4 <_svfiprintf_r+0x9c>
 8004dfe:	9b03      	ldr	r3, [sp, #12]
 8004e00:	1d19      	adds	r1, r3, #4
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	9103      	str	r1, [sp, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bfbb      	ittet	lt
 8004e0a:	425b      	neglt	r3, r3
 8004e0c:	f042 0202 	orrlt.w	r2, r2, #2
 8004e10:	9307      	strge	r3, [sp, #28]
 8004e12:	9307      	strlt	r3, [sp, #28]
 8004e14:	bfb8      	it	lt
 8004e16:	9204      	strlt	r2, [sp, #16]
 8004e18:	7823      	ldrb	r3, [r4, #0]
 8004e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8004e1c:	d10c      	bne.n	8004e38 <_svfiprintf_r+0x130>
 8004e1e:	7863      	ldrb	r3, [r4, #1]
 8004e20:	2b2a      	cmp	r3, #42	; 0x2a
 8004e22:	d135      	bne.n	8004e90 <_svfiprintf_r+0x188>
 8004e24:	9b03      	ldr	r3, [sp, #12]
 8004e26:	3402      	adds	r4, #2
 8004e28:	1d1a      	adds	r2, r3, #4
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	9203      	str	r2, [sp, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	bfb8      	it	lt
 8004e32:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e36:	9305      	str	r3, [sp, #20]
 8004e38:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004ef8 <_svfiprintf_r+0x1f0>
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	4650      	mov	r0, sl
 8004e40:	7821      	ldrb	r1, [r4, #0]
 8004e42:	f000 f9f7 	bl	8005234 <memchr>
 8004e46:	b140      	cbz	r0, 8004e5a <_svfiprintf_r+0x152>
 8004e48:	2340      	movs	r3, #64	; 0x40
 8004e4a:	eba0 000a 	sub.w	r0, r0, sl
 8004e4e:	fa03 f000 	lsl.w	r0, r3, r0
 8004e52:	9b04      	ldr	r3, [sp, #16]
 8004e54:	3401      	adds	r4, #1
 8004e56:	4303      	orrs	r3, r0
 8004e58:	9304      	str	r3, [sp, #16]
 8004e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e5e:	2206      	movs	r2, #6
 8004e60:	4826      	ldr	r0, [pc, #152]	; (8004efc <_svfiprintf_r+0x1f4>)
 8004e62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e66:	f000 f9e5 	bl	8005234 <memchr>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d038      	beq.n	8004ee0 <_svfiprintf_r+0x1d8>
 8004e6e:	4b24      	ldr	r3, [pc, #144]	; (8004f00 <_svfiprintf_r+0x1f8>)
 8004e70:	bb1b      	cbnz	r3, 8004eba <_svfiprintf_r+0x1b2>
 8004e72:	9b03      	ldr	r3, [sp, #12]
 8004e74:	3307      	adds	r3, #7
 8004e76:	f023 0307 	bic.w	r3, r3, #7
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	9303      	str	r3, [sp, #12]
 8004e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e80:	4433      	add	r3, r6
 8004e82:	9309      	str	r3, [sp, #36]	; 0x24
 8004e84:	e767      	b.n	8004d56 <_svfiprintf_r+0x4e>
 8004e86:	460c      	mov	r4, r1
 8004e88:	2001      	movs	r0, #1
 8004e8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e8e:	e7a5      	b.n	8004ddc <_svfiprintf_r+0xd4>
 8004e90:	2300      	movs	r3, #0
 8004e92:	f04f 0c0a 	mov.w	ip, #10
 8004e96:	4619      	mov	r1, r3
 8004e98:	3401      	adds	r4, #1
 8004e9a:	9305      	str	r3, [sp, #20]
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ea2:	3a30      	subs	r2, #48	; 0x30
 8004ea4:	2a09      	cmp	r2, #9
 8004ea6:	d903      	bls.n	8004eb0 <_svfiprintf_r+0x1a8>
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0c5      	beq.n	8004e38 <_svfiprintf_r+0x130>
 8004eac:	9105      	str	r1, [sp, #20]
 8004eae:	e7c3      	b.n	8004e38 <_svfiprintf_r+0x130>
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004eb8:	e7f0      	b.n	8004e9c <_svfiprintf_r+0x194>
 8004eba:	ab03      	add	r3, sp, #12
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	462a      	mov	r2, r5
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	4b10      	ldr	r3, [pc, #64]	; (8004f04 <_svfiprintf_r+0x1fc>)
 8004ec4:	a904      	add	r1, sp, #16
 8004ec6:	f3af 8000 	nop.w
 8004eca:	1c42      	adds	r2, r0, #1
 8004ecc:	4606      	mov	r6, r0
 8004ece:	d1d6      	bne.n	8004e7e <_svfiprintf_r+0x176>
 8004ed0:	89ab      	ldrh	r3, [r5, #12]
 8004ed2:	065b      	lsls	r3, r3, #25
 8004ed4:	f53f af2c 	bmi.w	8004d30 <_svfiprintf_r+0x28>
 8004ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004eda:	b01d      	add	sp, #116	; 0x74
 8004edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee0:	ab03      	add	r3, sp, #12
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	462a      	mov	r2, r5
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <_svfiprintf_r+0x1fc>)
 8004eea:	a904      	add	r1, sp, #16
 8004eec:	f000 f87c 	bl	8004fe8 <_printf_i>
 8004ef0:	e7eb      	b.n	8004eca <_svfiprintf_r+0x1c2>
 8004ef2:	bf00      	nop
 8004ef4:	080058a4 	.word	0x080058a4
 8004ef8:	080058aa 	.word	0x080058aa
 8004efc:	080058ae 	.word	0x080058ae
 8004f00:	00000000 	.word	0x00000000
 8004f04:	08004c51 	.word	0x08004c51

08004f08 <_printf_common>:
 8004f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f0c:	4616      	mov	r6, r2
 8004f0e:	4699      	mov	r9, r3
 8004f10:	688a      	ldr	r2, [r1, #8]
 8004f12:	690b      	ldr	r3, [r1, #16]
 8004f14:	4607      	mov	r7, r0
 8004f16:	4293      	cmp	r3, r2
 8004f18:	bfb8      	it	lt
 8004f1a:	4613      	movlt	r3, r2
 8004f1c:	6033      	str	r3, [r6, #0]
 8004f1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f22:	460c      	mov	r4, r1
 8004f24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f28:	b10a      	cbz	r2, 8004f2e <_printf_common+0x26>
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	6033      	str	r3, [r6, #0]
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	0699      	lsls	r1, r3, #26
 8004f32:	bf42      	ittt	mi
 8004f34:	6833      	ldrmi	r3, [r6, #0]
 8004f36:	3302      	addmi	r3, #2
 8004f38:	6033      	strmi	r3, [r6, #0]
 8004f3a:	6825      	ldr	r5, [r4, #0]
 8004f3c:	f015 0506 	ands.w	r5, r5, #6
 8004f40:	d106      	bne.n	8004f50 <_printf_common+0x48>
 8004f42:	f104 0a19 	add.w	sl, r4, #25
 8004f46:	68e3      	ldr	r3, [r4, #12]
 8004f48:	6832      	ldr	r2, [r6, #0]
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	42ab      	cmp	r3, r5
 8004f4e:	dc28      	bgt.n	8004fa2 <_printf_common+0x9a>
 8004f50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f54:	1e13      	subs	r3, r2, #0
 8004f56:	6822      	ldr	r2, [r4, #0]
 8004f58:	bf18      	it	ne
 8004f5a:	2301      	movne	r3, #1
 8004f5c:	0692      	lsls	r2, r2, #26
 8004f5e:	d42d      	bmi.n	8004fbc <_printf_common+0xb4>
 8004f60:	4649      	mov	r1, r9
 8004f62:	4638      	mov	r0, r7
 8004f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f68:	47c0      	blx	r8
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	d020      	beq.n	8004fb0 <_printf_common+0xa8>
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	68e5      	ldr	r5, [r4, #12]
 8004f72:	f003 0306 	and.w	r3, r3, #6
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	bf18      	it	ne
 8004f7a:	2500      	movne	r5, #0
 8004f7c:	6832      	ldr	r2, [r6, #0]
 8004f7e:	f04f 0600 	mov.w	r6, #0
 8004f82:	68a3      	ldr	r3, [r4, #8]
 8004f84:	bf08      	it	eq
 8004f86:	1aad      	subeq	r5, r5, r2
 8004f88:	6922      	ldr	r2, [r4, #16]
 8004f8a:	bf08      	it	eq
 8004f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f90:	4293      	cmp	r3, r2
 8004f92:	bfc4      	itt	gt
 8004f94:	1a9b      	subgt	r3, r3, r2
 8004f96:	18ed      	addgt	r5, r5, r3
 8004f98:	341a      	adds	r4, #26
 8004f9a:	42b5      	cmp	r5, r6
 8004f9c:	d11a      	bne.n	8004fd4 <_printf_common+0xcc>
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	e008      	b.n	8004fb4 <_printf_common+0xac>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	4652      	mov	r2, sl
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	4638      	mov	r0, r7
 8004faa:	47c0      	blx	r8
 8004fac:	3001      	adds	r0, #1
 8004fae:	d103      	bne.n	8004fb8 <_printf_common+0xb0>
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb8:	3501      	adds	r5, #1
 8004fba:	e7c4      	b.n	8004f46 <_printf_common+0x3e>
 8004fbc:	2030      	movs	r0, #48	; 0x30
 8004fbe:	18e1      	adds	r1, r4, r3
 8004fc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fca:	4422      	add	r2, r4
 8004fcc:	3302      	adds	r3, #2
 8004fce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fd2:	e7c5      	b.n	8004f60 <_printf_common+0x58>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	4649      	mov	r1, r9
 8004fda:	4638      	mov	r0, r7
 8004fdc:	47c0      	blx	r8
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d0e6      	beq.n	8004fb0 <_printf_common+0xa8>
 8004fe2:	3601      	adds	r6, #1
 8004fe4:	e7d9      	b.n	8004f9a <_printf_common+0x92>
	...

08004fe8 <_printf_i>:
 8004fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fec:	7e0f      	ldrb	r7, [r1, #24]
 8004fee:	4691      	mov	r9, r2
 8004ff0:	2f78      	cmp	r7, #120	; 0x78
 8004ff2:	4680      	mov	r8, r0
 8004ff4:	460c      	mov	r4, r1
 8004ff6:	469a      	mov	sl, r3
 8004ff8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ffa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ffe:	d807      	bhi.n	8005010 <_printf_i+0x28>
 8005000:	2f62      	cmp	r7, #98	; 0x62
 8005002:	d80a      	bhi.n	800501a <_printf_i+0x32>
 8005004:	2f00      	cmp	r7, #0
 8005006:	f000 80d9 	beq.w	80051bc <_printf_i+0x1d4>
 800500a:	2f58      	cmp	r7, #88	; 0x58
 800500c:	f000 80a4 	beq.w	8005158 <_printf_i+0x170>
 8005010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005018:	e03a      	b.n	8005090 <_printf_i+0xa8>
 800501a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800501e:	2b15      	cmp	r3, #21
 8005020:	d8f6      	bhi.n	8005010 <_printf_i+0x28>
 8005022:	a101      	add	r1, pc, #4	; (adr r1, 8005028 <_printf_i+0x40>)
 8005024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005028:	08005081 	.word	0x08005081
 800502c:	08005095 	.word	0x08005095
 8005030:	08005011 	.word	0x08005011
 8005034:	08005011 	.word	0x08005011
 8005038:	08005011 	.word	0x08005011
 800503c:	08005011 	.word	0x08005011
 8005040:	08005095 	.word	0x08005095
 8005044:	08005011 	.word	0x08005011
 8005048:	08005011 	.word	0x08005011
 800504c:	08005011 	.word	0x08005011
 8005050:	08005011 	.word	0x08005011
 8005054:	080051a3 	.word	0x080051a3
 8005058:	080050c5 	.word	0x080050c5
 800505c:	08005185 	.word	0x08005185
 8005060:	08005011 	.word	0x08005011
 8005064:	08005011 	.word	0x08005011
 8005068:	080051c5 	.word	0x080051c5
 800506c:	08005011 	.word	0x08005011
 8005070:	080050c5 	.word	0x080050c5
 8005074:	08005011 	.word	0x08005011
 8005078:	08005011 	.word	0x08005011
 800507c:	0800518d 	.word	0x0800518d
 8005080:	682b      	ldr	r3, [r5, #0]
 8005082:	1d1a      	adds	r2, r3, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	602a      	str	r2, [r5, #0]
 8005088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800508c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005090:	2301      	movs	r3, #1
 8005092:	e0a4      	b.n	80051de <_printf_i+0x1f6>
 8005094:	6820      	ldr	r0, [r4, #0]
 8005096:	6829      	ldr	r1, [r5, #0]
 8005098:	0606      	lsls	r6, r0, #24
 800509a:	f101 0304 	add.w	r3, r1, #4
 800509e:	d50a      	bpl.n	80050b6 <_printf_i+0xce>
 80050a0:	680e      	ldr	r6, [r1, #0]
 80050a2:	602b      	str	r3, [r5, #0]
 80050a4:	2e00      	cmp	r6, #0
 80050a6:	da03      	bge.n	80050b0 <_printf_i+0xc8>
 80050a8:	232d      	movs	r3, #45	; 0x2d
 80050aa:	4276      	negs	r6, r6
 80050ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050b0:	230a      	movs	r3, #10
 80050b2:	485e      	ldr	r0, [pc, #376]	; (800522c <_printf_i+0x244>)
 80050b4:	e019      	b.n	80050ea <_printf_i+0x102>
 80050b6:	680e      	ldr	r6, [r1, #0]
 80050b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050bc:	602b      	str	r3, [r5, #0]
 80050be:	bf18      	it	ne
 80050c0:	b236      	sxthne	r6, r6
 80050c2:	e7ef      	b.n	80050a4 <_printf_i+0xbc>
 80050c4:	682b      	ldr	r3, [r5, #0]
 80050c6:	6820      	ldr	r0, [r4, #0]
 80050c8:	1d19      	adds	r1, r3, #4
 80050ca:	6029      	str	r1, [r5, #0]
 80050cc:	0601      	lsls	r1, r0, #24
 80050ce:	d501      	bpl.n	80050d4 <_printf_i+0xec>
 80050d0:	681e      	ldr	r6, [r3, #0]
 80050d2:	e002      	b.n	80050da <_printf_i+0xf2>
 80050d4:	0646      	lsls	r6, r0, #25
 80050d6:	d5fb      	bpl.n	80050d0 <_printf_i+0xe8>
 80050d8:	881e      	ldrh	r6, [r3, #0]
 80050da:	2f6f      	cmp	r7, #111	; 0x6f
 80050dc:	bf0c      	ite	eq
 80050de:	2308      	moveq	r3, #8
 80050e0:	230a      	movne	r3, #10
 80050e2:	4852      	ldr	r0, [pc, #328]	; (800522c <_printf_i+0x244>)
 80050e4:	2100      	movs	r1, #0
 80050e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ea:	6865      	ldr	r5, [r4, #4]
 80050ec:	2d00      	cmp	r5, #0
 80050ee:	bfa8      	it	ge
 80050f0:	6821      	ldrge	r1, [r4, #0]
 80050f2:	60a5      	str	r5, [r4, #8]
 80050f4:	bfa4      	itt	ge
 80050f6:	f021 0104 	bicge.w	r1, r1, #4
 80050fa:	6021      	strge	r1, [r4, #0]
 80050fc:	b90e      	cbnz	r6, 8005102 <_printf_i+0x11a>
 80050fe:	2d00      	cmp	r5, #0
 8005100:	d04d      	beq.n	800519e <_printf_i+0x1b6>
 8005102:	4615      	mov	r5, r2
 8005104:	fbb6 f1f3 	udiv	r1, r6, r3
 8005108:	fb03 6711 	mls	r7, r3, r1, r6
 800510c:	5dc7      	ldrb	r7, [r0, r7]
 800510e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005112:	4637      	mov	r7, r6
 8005114:	42bb      	cmp	r3, r7
 8005116:	460e      	mov	r6, r1
 8005118:	d9f4      	bls.n	8005104 <_printf_i+0x11c>
 800511a:	2b08      	cmp	r3, #8
 800511c:	d10b      	bne.n	8005136 <_printf_i+0x14e>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	07de      	lsls	r6, r3, #31
 8005122:	d508      	bpl.n	8005136 <_printf_i+0x14e>
 8005124:	6923      	ldr	r3, [r4, #16]
 8005126:	6861      	ldr	r1, [r4, #4]
 8005128:	4299      	cmp	r1, r3
 800512a:	bfde      	ittt	le
 800512c:	2330      	movle	r3, #48	; 0x30
 800512e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005132:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005136:	1b52      	subs	r2, r2, r5
 8005138:	6122      	str	r2, [r4, #16]
 800513a:	464b      	mov	r3, r9
 800513c:	4621      	mov	r1, r4
 800513e:	4640      	mov	r0, r8
 8005140:	f8cd a000 	str.w	sl, [sp]
 8005144:	aa03      	add	r2, sp, #12
 8005146:	f7ff fedf 	bl	8004f08 <_printf_common>
 800514a:	3001      	adds	r0, #1
 800514c:	d14c      	bne.n	80051e8 <_printf_i+0x200>
 800514e:	f04f 30ff 	mov.w	r0, #4294967295
 8005152:	b004      	add	sp, #16
 8005154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005158:	4834      	ldr	r0, [pc, #208]	; (800522c <_printf_i+0x244>)
 800515a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800515e:	6829      	ldr	r1, [r5, #0]
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	f851 6b04 	ldr.w	r6, [r1], #4
 8005166:	6029      	str	r1, [r5, #0]
 8005168:	061d      	lsls	r5, r3, #24
 800516a:	d514      	bpl.n	8005196 <_printf_i+0x1ae>
 800516c:	07df      	lsls	r7, r3, #31
 800516e:	bf44      	itt	mi
 8005170:	f043 0320 	orrmi.w	r3, r3, #32
 8005174:	6023      	strmi	r3, [r4, #0]
 8005176:	b91e      	cbnz	r6, 8005180 <_printf_i+0x198>
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	f023 0320 	bic.w	r3, r3, #32
 800517e:	6023      	str	r3, [r4, #0]
 8005180:	2310      	movs	r3, #16
 8005182:	e7af      	b.n	80050e4 <_printf_i+0xfc>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	f043 0320 	orr.w	r3, r3, #32
 800518a:	6023      	str	r3, [r4, #0]
 800518c:	2378      	movs	r3, #120	; 0x78
 800518e:	4828      	ldr	r0, [pc, #160]	; (8005230 <_printf_i+0x248>)
 8005190:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005194:	e7e3      	b.n	800515e <_printf_i+0x176>
 8005196:	0659      	lsls	r1, r3, #25
 8005198:	bf48      	it	mi
 800519a:	b2b6      	uxthmi	r6, r6
 800519c:	e7e6      	b.n	800516c <_printf_i+0x184>
 800519e:	4615      	mov	r5, r2
 80051a0:	e7bb      	b.n	800511a <_printf_i+0x132>
 80051a2:	682b      	ldr	r3, [r5, #0]
 80051a4:	6826      	ldr	r6, [r4, #0]
 80051a6:	1d18      	adds	r0, r3, #4
 80051a8:	6961      	ldr	r1, [r4, #20]
 80051aa:	6028      	str	r0, [r5, #0]
 80051ac:	0635      	lsls	r5, r6, #24
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	d501      	bpl.n	80051b6 <_printf_i+0x1ce>
 80051b2:	6019      	str	r1, [r3, #0]
 80051b4:	e002      	b.n	80051bc <_printf_i+0x1d4>
 80051b6:	0670      	lsls	r0, r6, #25
 80051b8:	d5fb      	bpl.n	80051b2 <_printf_i+0x1ca>
 80051ba:	8019      	strh	r1, [r3, #0]
 80051bc:	2300      	movs	r3, #0
 80051be:	4615      	mov	r5, r2
 80051c0:	6123      	str	r3, [r4, #16]
 80051c2:	e7ba      	b.n	800513a <_printf_i+0x152>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	2100      	movs	r1, #0
 80051c8:	1d1a      	adds	r2, r3, #4
 80051ca:	602a      	str	r2, [r5, #0]
 80051cc:	681d      	ldr	r5, [r3, #0]
 80051ce:	6862      	ldr	r2, [r4, #4]
 80051d0:	4628      	mov	r0, r5
 80051d2:	f000 f82f 	bl	8005234 <memchr>
 80051d6:	b108      	cbz	r0, 80051dc <_printf_i+0x1f4>
 80051d8:	1b40      	subs	r0, r0, r5
 80051da:	6060      	str	r0, [r4, #4]
 80051dc:	6863      	ldr	r3, [r4, #4]
 80051de:	6123      	str	r3, [r4, #16]
 80051e0:	2300      	movs	r3, #0
 80051e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051e6:	e7a8      	b.n	800513a <_printf_i+0x152>
 80051e8:	462a      	mov	r2, r5
 80051ea:	4649      	mov	r1, r9
 80051ec:	4640      	mov	r0, r8
 80051ee:	6923      	ldr	r3, [r4, #16]
 80051f0:	47d0      	blx	sl
 80051f2:	3001      	adds	r0, #1
 80051f4:	d0ab      	beq.n	800514e <_printf_i+0x166>
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	079b      	lsls	r3, r3, #30
 80051fa:	d413      	bmi.n	8005224 <_printf_i+0x23c>
 80051fc:	68e0      	ldr	r0, [r4, #12]
 80051fe:	9b03      	ldr	r3, [sp, #12]
 8005200:	4298      	cmp	r0, r3
 8005202:	bfb8      	it	lt
 8005204:	4618      	movlt	r0, r3
 8005206:	e7a4      	b.n	8005152 <_printf_i+0x16a>
 8005208:	2301      	movs	r3, #1
 800520a:	4632      	mov	r2, r6
 800520c:	4649      	mov	r1, r9
 800520e:	4640      	mov	r0, r8
 8005210:	47d0      	blx	sl
 8005212:	3001      	adds	r0, #1
 8005214:	d09b      	beq.n	800514e <_printf_i+0x166>
 8005216:	3501      	adds	r5, #1
 8005218:	68e3      	ldr	r3, [r4, #12]
 800521a:	9903      	ldr	r1, [sp, #12]
 800521c:	1a5b      	subs	r3, r3, r1
 800521e:	42ab      	cmp	r3, r5
 8005220:	dcf2      	bgt.n	8005208 <_printf_i+0x220>
 8005222:	e7eb      	b.n	80051fc <_printf_i+0x214>
 8005224:	2500      	movs	r5, #0
 8005226:	f104 0619 	add.w	r6, r4, #25
 800522a:	e7f5      	b.n	8005218 <_printf_i+0x230>
 800522c:	080058b5 	.word	0x080058b5
 8005230:	080058c6 	.word	0x080058c6

08005234 <memchr>:
 8005234:	4603      	mov	r3, r0
 8005236:	b510      	push	{r4, lr}
 8005238:	b2c9      	uxtb	r1, r1
 800523a:	4402      	add	r2, r0
 800523c:	4293      	cmp	r3, r2
 800523e:	4618      	mov	r0, r3
 8005240:	d101      	bne.n	8005246 <memchr+0x12>
 8005242:	2000      	movs	r0, #0
 8005244:	e003      	b.n	800524e <memchr+0x1a>
 8005246:	7804      	ldrb	r4, [r0, #0]
 8005248:	3301      	adds	r3, #1
 800524a:	428c      	cmp	r4, r1
 800524c:	d1f6      	bne.n	800523c <memchr+0x8>
 800524e:	bd10      	pop	{r4, pc}

08005250 <memmove>:
 8005250:	4288      	cmp	r0, r1
 8005252:	b510      	push	{r4, lr}
 8005254:	eb01 0402 	add.w	r4, r1, r2
 8005258:	d902      	bls.n	8005260 <memmove+0x10>
 800525a:	4284      	cmp	r4, r0
 800525c:	4623      	mov	r3, r4
 800525e:	d807      	bhi.n	8005270 <memmove+0x20>
 8005260:	1e43      	subs	r3, r0, #1
 8005262:	42a1      	cmp	r1, r4
 8005264:	d008      	beq.n	8005278 <memmove+0x28>
 8005266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800526a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800526e:	e7f8      	b.n	8005262 <memmove+0x12>
 8005270:	4601      	mov	r1, r0
 8005272:	4402      	add	r2, r0
 8005274:	428a      	cmp	r2, r1
 8005276:	d100      	bne.n	800527a <memmove+0x2a>
 8005278:	bd10      	pop	{r4, pc}
 800527a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800527e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005282:	e7f7      	b.n	8005274 <memmove+0x24>

08005284 <_free_r>:
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4605      	mov	r5, r0
 8005288:	2900      	cmp	r1, #0
 800528a:	d040      	beq.n	800530e <_free_r+0x8a>
 800528c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005290:	1f0c      	subs	r4, r1, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	bfb8      	it	lt
 8005296:	18e4      	addlt	r4, r4, r3
 8005298:	f000 f910 	bl	80054bc <__malloc_lock>
 800529c:	4a1c      	ldr	r2, [pc, #112]	; (8005310 <_free_r+0x8c>)
 800529e:	6813      	ldr	r3, [r2, #0]
 80052a0:	b933      	cbnz	r3, 80052b0 <_free_r+0x2c>
 80052a2:	6063      	str	r3, [r4, #4]
 80052a4:	6014      	str	r4, [r2, #0]
 80052a6:	4628      	mov	r0, r5
 80052a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052ac:	f000 b90c 	b.w	80054c8 <__malloc_unlock>
 80052b0:	42a3      	cmp	r3, r4
 80052b2:	d908      	bls.n	80052c6 <_free_r+0x42>
 80052b4:	6820      	ldr	r0, [r4, #0]
 80052b6:	1821      	adds	r1, r4, r0
 80052b8:	428b      	cmp	r3, r1
 80052ba:	bf01      	itttt	eq
 80052bc:	6819      	ldreq	r1, [r3, #0]
 80052be:	685b      	ldreq	r3, [r3, #4]
 80052c0:	1809      	addeq	r1, r1, r0
 80052c2:	6021      	streq	r1, [r4, #0]
 80052c4:	e7ed      	b.n	80052a2 <_free_r+0x1e>
 80052c6:	461a      	mov	r2, r3
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	b10b      	cbz	r3, 80052d0 <_free_r+0x4c>
 80052cc:	42a3      	cmp	r3, r4
 80052ce:	d9fa      	bls.n	80052c6 <_free_r+0x42>
 80052d0:	6811      	ldr	r1, [r2, #0]
 80052d2:	1850      	adds	r0, r2, r1
 80052d4:	42a0      	cmp	r0, r4
 80052d6:	d10b      	bne.n	80052f0 <_free_r+0x6c>
 80052d8:	6820      	ldr	r0, [r4, #0]
 80052da:	4401      	add	r1, r0
 80052dc:	1850      	adds	r0, r2, r1
 80052de:	4283      	cmp	r3, r0
 80052e0:	6011      	str	r1, [r2, #0]
 80052e2:	d1e0      	bne.n	80052a6 <_free_r+0x22>
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4401      	add	r1, r0
 80052ea:	6011      	str	r1, [r2, #0]
 80052ec:	6053      	str	r3, [r2, #4]
 80052ee:	e7da      	b.n	80052a6 <_free_r+0x22>
 80052f0:	d902      	bls.n	80052f8 <_free_r+0x74>
 80052f2:	230c      	movs	r3, #12
 80052f4:	602b      	str	r3, [r5, #0]
 80052f6:	e7d6      	b.n	80052a6 <_free_r+0x22>
 80052f8:	6820      	ldr	r0, [r4, #0]
 80052fa:	1821      	adds	r1, r4, r0
 80052fc:	428b      	cmp	r3, r1
 80052fe:	bf01      	itttt	eq
 8005300:	6819      	ldreq	r1, [r3, #0]
 8005302:	685b      	ldreq	r3, [r3, #4]
 8005304:	1809      	addeq	r1, r1, r0
 8005306:	6021      	streq	r1, [r4, #0]
 8005308:	6063      	str	r3, [r4, #4]
 800530a:	6054      	str	r4, [r2, #4]
 800530c:	e7cb      	b.n	80052a6 <_free_r+0x22>
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	20000928 	.word	0x20000928

08005314 <sbrk_aligned>:
 8005314:	b570      	push	{r4, r5, r6, lr}
 8005316:	4e0e      	ldr	r6, [pc, #56]	; (8005350 <sbrk_aligned+0x3c>)
 8005318:	460c      	mov	r4, r1
 800531a:	6831      	ldr	r1, [r6, #0]
 800531c:	4605      	mov	r5, r0
 800531e:	b911      	cbnz	r1, 8005326 <sbrk_aligned+0x12>
 8005320:	f000 f8bc 	bl	800549c <_sbrk_r>
 8005324:	6030      	str	r0, [r6, #0]
 8005326:	4621      	mov	r1, r4
 8005328:	4628      	mov	r0, r5
 800532a:	f000 f8b7 	bl	800549c <_sbrk_r>
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	d00a      	beq.n	8005348 <sbrk_aligned+0x34>
 8005332:	1cc4      	adds	r4, r0, #3
 8005334:	f024 0403 	bic.w	r4, r4, #3
 8005338:	42a0      	cmp	r0, r4
 800533a:	d007      	beq.n	800534c <sbrk_aligned+0x38>
 800533c:	1a21      	subs	r1, r4, r0
 800533e:	4628      	mov	r0, r5
 8005340:	f000 f8ac 	bl	800549c <_sbrk_r>
 8005344:	3001      	adds	r0, #1
 8005346:	d101      	bne.n	800534c <sbrk_aligned+0x38>
 8005348:	f04f 34ff 	mov.w	r4, #4294967295
 800534c:	4620      	mov	r0, r4
 800534e:	bd70      	pop	{r4, r5, r6, pc}
 8005350:	2000092c 	.word	0x2000092c

08005354 <_malloc_r>:
 8005354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005358:	1ccd      	adds	r5, r1, #3
 800535a:	f025 0503 	bic.w	r5, r5, #3
 800535e:	3508      	adds	r5, #8
 8005360:	2d0c      	cmp	r5, #12
 8005362:	bf38      	it	cc
 8005364:	250c      	movcc	r5, #12
 8005366:	2d00      	cmp	r5, #0
 8005368:	4607      	mov	r7, r0
 800536a:	db01      	blt.n	8005370 <_malloc_r+0x1c>
 800536c:	42a9      	cmp	r1, r5
 800536e:	d905      	bls.n	800537c <_malloc_r+0x28>
 8005370:	230c      	movs	r3, #12
 8005372:	2600      	movs	r6, #0
 8005374:	603b      	str	r3, [r7, #0]
 8005376:	4630      	mov	r0, r6
 8005378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800537c:	4e2e      	ldr	r6, [pc, #184]	; (8005438 <_malloc_r+0xe4>)
 800537e:	f000 f89d 	bl	80054bc <__malloc_lock>
 8005382:	6833      	ldr	r3, [r6, #0]
 8005384:	461c      	mov	r4, r3
 8005386:	bb34      	cbnz	r4, 80053d6 <_malloc_r+0x82>
 8005388:	4629      	mov	r1, r5
 800538a:	4638      	mov	r0, r7
 800538c:	f7ff ffc2 	bl	8005314 <sbrk_aligned>
 8005390:	1c43      	adds	r3, r0, #1
 8005392:	4604      	mov	r4, r0
 8005394:	d14d      	bne.n	8005432 <_malloc_r+0xde>
 8005396:	6834      	ldr	r4, [r6, #0]
 8005398:	4626      	mov	r6, r4
 800539a:	2e00      	cmp	r6, #0
 800539c:	d140      	bne.n	8005420 <_malloc_r+0xcc>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	4631      	mov	r1, r6
 80053a2:	4638      	mov	r0, r7
 80053a4:	eb04 0803 	add.w	r8, r4, r3
 80053a8:	f000 f878 	bl	800549c <_sbrk_r>
 80053ac:	4580      	cmp	r8, r0
 80053ae:	d13a      	bne.n	8005426 <_malloc_r+0xd2>
 80053b0:	6821      	ldr	r1, [r4, #0]
 80053b2:	3503      	adds	r5, #3
 80053b4:	1a6d      	subs	r5, r5, r1
 80053b6:	f025 0503 	bic.w	r5, r5, #3
 80053ba:	3508      	adds	r5, #8
 80053bc:	2d0c      	cmp	r5, #12
 80053be:	bf38      	it	cc
 80053c0:	250c      	movcc	r5, #12
 80053c2:	4638      	mov	r0, r7
 80053c4:	4629      	mov	r1, r5
 80053c6:	f7ff ffa5 	bl	8005314 <sbrk_aligned>
 80053ca:	3001      	adds	r0, #1
 80053cc:	d02b      	beq.n	8005426 <_malloc_r+0xd2>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	442b      	add	r3, r5
 80053d2:	6023      	str	r3, [r4, #0]
 80053d4:	e00e      	b.n	80053f4 <_malloc_r+0xa0>
 80053d6:	6822      	ldr	r2, [r4, #0]
 80053d8:	1b52      	subs	r2, r2, r5
 80053da:	d41e      	bmi.n	800541a <_malloc_r+0xc6>
 80053dc:	2a0b      	cmp	r2, #11
 80053de:	d916      	bls.n	800540e <_malloc_r+0xba>
 80053e0:	1961      	adds	r1, r4, r5
 80053e2:	42a3      	cmp	r3, r4
 80053e4:	6025      	str	r5, [r4, #0]
 80053e6:	bf18      	it	ne
 80053e8:	6059      	strne	r1, [r3, #4]
 80053ea:	6863      	ldr	r3, [r4, #4]
 80053ec:	bf08      	it	eq
 80053ee:	6031      	streq	r1, [r6, #0]
 80053f0:	5162      	str	r2, [r4, r5]
 80053f2:	604b      	str	r3, [r1, #4]
 80053f4:	4638      	mov	r0, r7
 80053f6:	f104 060b 	add.w	r6, r4, #11
 80053fa:	f000 f865 	bl	80054c8 <__malloc_unlock>
 80053fe:	f026 0607 	bic.w	r6, r6, #7
 8005402:	1d23      	adds	r3, r4, #4
 8005404:	1af2      	subs	r2, r6, r3
 8005406:	d0b6      	beq.n	8005376 <_malloc_r+0x22>
 8005408:	1b9b      	subs	r3, r3, r6
 800540a:	50a3      	str	r3, [r4, r2]
 800540c:	e7b3      	b.n	8005376 <_malloc_r+0x22>
 800540e:	6862      	ldr	r2, [r4, #4]
 8005410:	42a3      	cmp	r3, r4
 8005412:	bf0c      	ite	eq
 8005414:	6032      	streq	r2, [r6, #0]
 8005416:	605a      	strne	r2, [r3, #4]
 8005418:	e7ec      	b.n	80053f4 <_malloc_r+0xa0>
 800541a:	4623      	mov	r3, r4
 800541c:	6864      	ldr	r4, [r4, #4]
 800541e:	e7b2      	b.n	8005386 <_malloc_r+0x32>
 8005420:	4634      	mov	r4, r6
 8005422:	6876      	ldr	r6, [r6, #4]
 8005424:	e7b9      	b.n	800539a <_malloc_r+0x46>
 8005426:	230c      	movs	r3, #12
 8005428:	4638      	mov	r0, r7
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	f000 f84c 	bl	80054c8 <__malloc_unlock>
 8005430:	e7a1      	b.n	8005376 <_malloc_r+0x22>
 8005432:	6025      	str	r5, [r4, #0]
 8005434:	e7de      	b.n	80053f4 <_malloc_r+0xa0>
 8005436:	bf00      	nop
 8005438:	20000928 	.word	0x20000928

0800543c <_realloc_r>:
 800543c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005440:	4680      	mov	r8, r0
 8005442:	4614      	mov	r4, r2
 8005444:	460e      	mov	r6, r1
 8005446:	b921      	cbnz	r1, 8005452 <_realloc_r+0x16>
 8005448:	4611      	mov	r1, r2
 800544a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800544e:	f7ff bf81 	b.w	8005354 <_malloc_r>
 8005452:	b92a      	cbnz	r2, 8005460 <_realloc_r+0x24>
 8005454:	f7ff ff16 	bl	8005284 <_free_r>
 8005458:	4625      	mov	r5, r4
 800545a:	4628      	mov	r0, r5
 800545c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005460:	f000 f838 	bl	80054d4 <_malloc_usable_size_r>
 8005464:	4284      	cmp	r4, r0
 8005466:	4607      	mov	r7, r0
 8005468:	d802      	bhi.n	8005470 <_realloc_r+0x34>
 800546a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800546e:	d812      	bhi.n	8005496 <_realloc_r+0x5a>
 8005470:	4621      	mov	r1, r4
 8005472:	4640      	mov	r0, r8
 8005474:	f7ff ff6e 	bl	8005354 <_malloc_r>
 8005478:	4605      	mov	r5, r0
 800547a:	2800      	cmp	r0, #0
 800547c:	d0ed      	beq.n	800545a <_realloc_r+0x1e>
 800547e:	42bc      	cmp	r4, r7
 8005480:	4622      	mov	r2, r4
 8005482:	4631      	mov	r1, r6
 8005484:	bf28      	it	cs
 8005486:	463a      	movcs	r2, r7
 8005488:	f7ff fbac 	bl	8004be4 <memcpy>
 800548c:	4631      	mov	r1, r6
 800548e:	4640      	mov	r0, r8
 8005490:	f7ff fef8 	bl	8005284 <_free_r>
 8005494:	e7e1      	b.n	800545a <_realloc_r+0x1e>
 8005496:	4635      	mov	r5, r6
 8005498:	e7df      	b.n	800545a <_realloc_r+0x1e>
	...

0800549c <_sbrk_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	2300      	movs	r3, #0
 80054a0:	4d05      	ldr	r5, [pc, #20]	; (80054b8 <_sbrk_r+0x1c>)
 80054a2:	4604      	mov	r4, r0
 80054a4:	4608      	mov	r0, r1
 80054a6:	602b      	str	r3, [r5, #0]
 80054a8:	f7fc fd22 	bl	8001ef0 <_sbrk>
 80054ac:	1c43      	adds	r3, r0, #1
 80054ae:	d102      	bne.n	80054b6 <_sbrk_r+0x1a>
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	b103      	cbz	r3, 80054b6 <_sbrk_r+0x1a>
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	bd38      	pop	{r3, r4, r5, pc}
 80054b8:	20000930 	.word	0x20000930

080054bc <__malloc_lock>:
 80054bc:	4801      	ldr	r0, [pc, #4]	; (80054c4 <__malloc_lock+0x8>)
 80054be:	f000 b811 	b.w	80054e4 <__retarget_lock_acquire_recursive>
 80054c2:	bf00      	nop
 80054c4:	20000934 	.word	0x20000934

080054c8 <__malloc_unlock>:
 80054c8:	4801      	ldr	r0, [pc, #4]	; (80054d0 <__malloc_unlock+0x8>)
 80054ca:	f000 b80c 	b.w	80054e6 <__retarget_lock_release_recursive>
 80054ce:	bf00      	nop
 80054d0:	20000934 	.word	0x20000934

080054d4 <_malloc_usable_size_r>:
 80054d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d8:	1f18      	subs	r0, r3, #4
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bfbc      	itt	lt
 80054de:	580b      	ldrlt	r3, [r1, r0]
 80054e0:	18c0      	addlt	r0, r0, r3
 80054e2:	4770      	bx	lr

080054e4 <__retarget_lock_acquire_recursive>:
 80054e4:	4770      	bx	lr

080054e6 <__retarget_lock_release_recursive>:
 80054e6:	4770      	bx	lr

080054e8 <_init>:
 80054e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ea:	bf00      	nop
 80054ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ee:	bc08      	pop	{r3}
 80054f0:	469e      	mov	lr, r3
 80054f2:	4770      	bx	lr

080054f4 <_fini>:
 80054f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f6:	bf00      	nop
 80054f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fa:	bc08      	pop	{r3}
 80054fc:	469e      	mov	lr, r3
 80054fe:	4770      	bx	lr


FanTester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000611c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800622c  0800622c  0001622c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065f4  080065f4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080065f4  080065f4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065f4  080065f4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065f4  080065f4  000165f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065f8  080065f8  000165f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080065fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d4  20000078  08006674  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  08006674  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efa0  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a6  00000000  00000000  0002f041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  000314e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00032568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8d5  00000000  00000000  000334e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001098c  00000000  00000000  0004ddbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000967bc  00000000  00000000  0005e749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4f05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b2c  00000000  00000000  000f4f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08006214 	.word	0x08006214

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08006214 	.word	0x08006214

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_frsub>:
 8000af4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af8:	e002      	b.n	8000b00 <__addsf3>
 8000afa:	bf00      	nop

08000afc <__aeabi_fsub>:
 8000afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b00 <__addsf3>:
 8000b00:	0042      	lsls	r2, r0, #1
 8000b02:	bf1f      	itttt	ne
 8000b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b08:	ea92 0f03 	teqne	r2, r3
 8000b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b14:	d06a      	beq.n	8000bec <__addsf3+0xec>
 8000b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b1e:	bfc1      	itttt	gt
 8000b20:	18d2      	addgt	r2, r2, r3
 8000b22:	4041      	eorgt	r1, r0
 8000b24:	4048      	eorgt	r0, r1
 8000b26:	4041      	eorgt	r1, r0
 8000b28:	bfb8      	it	lt
 8000b2a:	425b      	neglt	r3, r3
 8000b2c:	2b19      	cmp	r3, #25
 8000b2e:	bf88      	it	hi
 8000b30:	4770      	bxhi	lr
 8000b32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b3e:	bf18      	it	ne
 8000b40:	4240      	negne	r0, r0
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b4e:	bf18      	it	ne
 8000b50:	4249      	negne	r1, r1
 8000b52:	ea92 0f03 	teq	r2, r3
 8000b56:	d03f      	beq.n	8000bd8 <__addsf3+0xd8>
 8000b58:	f1a2 0201 	sub.w	r2, r2, #1
 8000b5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b60:	eb10 000c 	adds.w	r0, r0, ip
 8000b64:	f1c3 0320 	rsb	r3, r3, #32
 8000b68:	fa01 f103 	lsl.w	r1, r1, r3
 8000b6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b70:	d502      	bpl.n	8000b78 <__addsf3+0x78>
 8000b72:	4249      	negs	r1, r1
 8000b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b7c:	d313      	bcc.n	8000ba6 <__addsf3+0xa6>
 8000b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b82:	d306      	bcc.n	8000b92 <__addsf3+0x92>
 8000b84:	0840      	lsrs	r0, r0, #1
 8000b86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b8a:	f102 0201 	add.w	r2, r2, #1
 8000b8e:	2afe      	cmp	r2, #254	; 0xfe
 8000b90:	d251      	bcs.n	8000c36 <__addsf3+0x136>
 8000b92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b9a:	bf08      	it	eq
 8000b9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ba0:	ea40 0003 	orr.w	r0, r0, r3
 8000ba4:	4770      	bx	lr
 8000ba6:	0049      	lsls	r1, r1, #1
 8000ba8:	eb40 0000 	adc.w	r0, r0, r0
 8000bac:	3a01      	subs	r2, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bb4:	d2ed      	bcs.n	8000b92 <__addsf3+0x92>
 8000bb6:	fab0 fc80 	clz	ip, r0
 8000bba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000bc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bc6:	bfaa      	itet	ge
 8000bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bcc:	4252      	neglt	r2, r2
 8000bce:	4318      	orrge	r0, r3
 8000bd0:	bfbc      	itt	lt
 8000bd2:	40d0      	lsrlt	r0, r2
 8000bd4:	4318      	orrlt	r0, r3
 8000bd6:	4770      	bx	lr
 8000bd8:	f092 0f00 	teq	r2, #0
 8000bdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be0:	bf06      	itte	eq
 8000be2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000be6:	3201      	addeq	r2, #1
 8000be8:	3b01      	subne	r3, #1
 8000bea:	e7b5      	b.n	8000b58 <__addsf3+0x58>
 8000bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf4:	bf18      	it	ne
 8000bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bfa:	d021      	beq.n	8000c40 <__addsf3+0x140>
 8000bfc:	ea92 0f03 	teq	r2, r3
 8000c00:	d004      	beq.n	8000c0c <__addsf3+0x10c>
 8000c02:	f092 0f00 	teq	r2, #0
 8000c06:	bf08      	it	eq
 8000c08:	4608      	moveq	r0, r1
 8000c0a:	4770      	bx	lr
 8000c0c:	ea90 0f01 	teq	r0, r1
 8000c10:	bf1c      	itt	ne
 8000c12:	2000      	movne	r0, #0
 8000c14:	4770      	bxne	lr
 8000c16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c1a:	d104      	bne.n	8000c26 <__addsf3+0x126>
 8000c1c:	0040      	lsls	r0, r0, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c24:	4770      	bx	lr
 8000c26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c2a:	bf3c      	itt	cc
 8000c2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c30:	4770      	bxcc	lr
 8000c32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	4770      	bx	lr
 8000c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c44:	bf16      	itet	ne
 8000c46:	4608      	movne	r0, r1
 8000c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c4c:	4601      	movne	r1, r0
 8000c4e:	0242      	lsls	r2, r0, #9
 8000c50:	bf06      	itte	eq
 8000c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c56:	ea90 0f01 	teqeq	r0, r1
 8000c5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c5e:	4770      	bx	lr

08000c60 <__aeabi_ui2f>:
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e004      	b.n	8000c70 <__aeabi_i2f+0x8>
 8000c66:	bf00      	nop

08000c68 <__aeabi_i2f>:
 8000c68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	bf48      	it	mi
 8000c6e:	4240      	negmi	r0, r0
 8000c70:	ea5f 0c00 	movs.w	ip, r0
 8000c74:	bf08      	it	eq
 8000c76:	4770      	bxeq	lr
 8000c78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	f04f 0000 	mov.w	r0, #0
 8000c82:	e01c      	b.n	8000cbe <__aeabi_l2f+0x2a>

08000c84 <__aeabi_ul2f>:
 8000c84:	ea50 0201 	orrs.w	r2, r0, r1
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e00a      	b.n	8000ca8 <__aeabi_l2f+0x14>
 8000c92:	bf00      	nop

08000c94 <__aeabi_l2f>:
 8000c94:	ea50 0201 	orrs.w	r2, r0, r1
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca0:	d502      	bpl.n	8000ca8 <__aeabi_l2f+0x14>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	ea5f 0c01 	movs.w	ip, r1
 8000cac:	bf02      	ittt	eq
 8000cae:	4684      	moveq	ip, r0
 8000cb0:	4601      	moveq	r1, r0
 8000cb2:	2000      	moveq	r0, #0
 8000cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb8:	bf08      	it	eq
 8000cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cc2:	fabc f28c 	clz	r2, ip
 8000cc6:	3a08      	subs	r2, #8
 8000cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ccc:	db10      	blt.n	8000cf0 <__aeabi_l2f+0x5c>
 8000cce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd8:	f1c2 0220 	rsb	r2, r2, #32
 8000cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce4:	eb43 0002 	adc.w	r0, r3, r2
 8000ce8:	bf08      	it	eq
 8000cea:	f020 0001 	biceq.w	r0, r0, #1
 8000cee:	4770      	bx	lr
 8000cf0:	f102 0220 	add.w	r2, r2, #32
 8000cf4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d00:	fa21 f202 	lsr.w	r2, r1, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_f2iz>:
 8000d10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d18:	d30f      	bcc.n	8000d3a <__aeabi_f2iz+0x2a>
 8000d1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d22:	d90d      	bls.n	8000d40 <__aeabi_f2iz+0x30>
 8000d24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d2c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d30:	fa23 f002 	lsr.w	r0, r3, r2
 8000d34:	bf18      	it	ne
 8000d36:	4240      	negne	r0, r0
 8000d38:	4770      	bx	lr
 8000d3a:	f04f 0000 	mov.w	r0, #0
 8000d3e:	4770      	bx	lr
 8000d40:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d44:	d101      	bne.n	8000d4a <__aeabi_f2iz+0x3a>
 8000d46:	0242      	lsls	r2, r0, #9
 8000d48:	d105      	bne.n	8000d56 <__aeabi_f2iz+0x46>
 8000d4a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d4e:	bf08      	it	eq
 8000d50:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d54:	4770      	bx	lr
 8000d56:	f04f 0000 	mov.w	r0, #0
 8000d5a:	4770      	bx	lr

08000d5c <sign>:
uint16_t cdPin;
GPIO_TypeDef *rstPort;
uint16_t rstPin;
uint8_t biasRatio = 0x88;

int sign(int val) {
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	if (val >= 0)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	db01      	blt.n	8000d6e <sign+0x12>
		return 1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e001      	b.n	8000d72 <sign+0x16>
	return -1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <sendCommand>:

void sendCommand(uint8_t com) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(csPort, csPin, 0);
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <sendCommand+0x50>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <sendCommand+0x54>)
 8000d8c:	8811      	ldrh	r1, [r2, #0]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 facc 	bl	800332e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cdPort, cdPin, 0);
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <sendCommand+0x58>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <sendCommand+0x5c>)
 8000d9c:	8811      	ldrh	r1, [r2, #0]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f002 fac4 	bl	800332e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &com, 1, 10);
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <sendCommand+0x60>)
 8000da8:	6818      	ldr	r0, [r3, #0]
 8000daa:	1df9      	adds	r1, r7, #7
 8000dac:	230a      	movs	r3, #10
 8000dae:	2201      	movs	r2, #1
 8000db0:	f003 f82a 	bl	8003e08 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(csPort, csPin, 1);
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <sendCommand+0x50>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <sendCommand+0x54>)
 8000dba:	8811      	ldrh	r1, [r2, #0]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 fab5 	bl	800332e <HAL_GPIO_WritePin>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000069c 	.word	0x2000069c
 8000dd0:	200006a0 	.word	0x200006a0
 8000dd4:	200006a4 	.word	0x200006a4
 8000dd8:	200006a8 	.word	0x200006a8
 8000ddc:	20000698 	.word	0x20000698

08000de0 <UC1609_SoftwareReset>:

void UC1609_SoftwareReset() {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	sendCommand(0b11100010);
 8000de4:	20e2      	movs	r0, #226	; 0xe2
 8000de6:	f7ff ffc9 	bl	8000d7c <sendCommand>
	HAL_Delay(20);
 8000dea:	2014      	movs	r0, #20
 8000dec:	f001 ffda 	bl	8002da4 <HAL_Delay>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <UC1609_HardwareReset>:

void UC1609_HardwareReset() {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(rstPort, rstPin, 0);
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <UC1609_HardwareReset+0x34>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <UC1609_HardwareReset+0x38>)
 8000dfe:	8811      	ldrh	r1, [r2, #0]
 8000e00:	2200      	movs	r2, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f002 fa93 	bl	800332e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f001 ffcb 	bl	8002da4 <HAL_Delay>
	HAL_GPIO_WritePin(rstPort, rstPin, 1);
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <UC1609_HardwareReset+0x34>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <UC1609_HardwareReset+0x38>)
 8000e14:	8811      	ldrh	r1, [r2, #0]
 8000e16:	2201      	movs	r2, #1
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 fa88 	bl	800332e <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000e1e:	2005      	movs	r0, #5
 8000e20:	f001 ffc0 	bl	8002da4 <HAL_Delay>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200006ac 	.word	0x200006ac
 8000e2c:	200006b0 	.word	0x200006b0

08000e30 <UC1609_Init>:
void UC1609_Init(SPI_HandleTypeDef *spiHandler, GPIO_TypeDef *csGpioPort,
		uint16_t csGpioPin, GPIO_TypeDef *cdGpioPort, uint16_t cdGpioPin,
		GPIO_TypeDef *rstGpioPort, uint16_t rstGpioPin) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	80fb      	strh	r3, [r7, #6]
	hspi = spiHandler;
 8000e40:	4a1a      	ldr	r2, [pc, #104]	; (8000eac <UC1609_Init+0x7c>)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6013      	str	r3, [r2, #0]
	csPort = csGpioPort;
 8000e46:	4a1a      	ldr	r2, [pc, #104]	; (8000eb0 <UC1609_Init+0x80>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	6013      	str	r3, [r2, #0]
	csPin = csGpioPin;
 8000e4c:	4a19      	ldr	r2, [pc, #100]	; (8000eb4 <UC1609_Init+0x84>)
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	8013      	strh	r3, [r2, #0]
	cdPort = cdGpioPort;
 8000e52:	4a19      	ldr	r2, [pc, #100]	; (8000eb8 <UC1609_Init+0x88>)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	6013      	str	r3, [r2, #0]
	cdPin = cdGpioPin;
 8000e58:	4a18      	ldr	r2, [pc, #96]	; (8000ebc <UC1609_Init+0x8c>)
 8000e5a:	8b3b      	ldrh	r3, [r7, #24]
 8000e5c:	8013      	strh	r3, [r2, #0]
	rstPort = rstGpioPort;
 8000e5e:	4a18      	ldr	r2, [pc, #96]	; (8000ec0 <UC1609_Init+0x90>)
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	6013      	str	r3, [r2, #0]
	rstPin = rstGpioPin;
 8000e64:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <UC1609_Init+0x94>)
 8000e66:	8c3b      	ldrh	r3, [r7, #32]
 8000e68:	8013      	strh	r3, [r2, #0]
	if (rstPin == 0 || rstPort == 0) {
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <UC1609_Init+0x94>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <UC1609_Init+0x4a>
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <UC1609_Init+0x90>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d102      	bne.n	8000e80 <UC1609_Init+0x50>
		UC1609_SoftwareReset();
 8000e7a:	f7ff ffb1 	bl	8000de0 <UC1609_SoftwareReset>
 8000e7e:	e001      	b.n	8000e84 <UC1609_Init+0x54>
	} else {
		UC1609_HardwareReset();
 8000e80:	f7ff ffb8 	bl	8000df4 <UC1609_HardwareReset>
	}
	sendCommand(UC1609_CMD_MAPPING | MIRROR_X);
 8000e84:	20c4      	movs	r0, #196	; 0xc4
 8000e86:	f7ff ff79 	bl	8000d7c <sendCommand>
	sendCommand(UC1609_CMD_SET_BIAS_RATIO | DEFAULT_BIAS_RATIO);
 8000e8a:	20eb      	movs	r0, #235	; 0xeb
 8000e8c:	f7ff ff76 	bl	8000d7c <sendCommand>
	sendCommand(UC_1609_CMD_SET_BIAS_POTENTIOMETER);
 8000e90:	2081      	movs	r0, #129	; 0x81
 8000e92:	f7ff ff73 	bl	8000d7c <sendCommand>
	sendCommand(0xb0);
 8000e96:	20b0      	movs	r0, #176	; 0xb0
 8000e98:	f7ff ff70 	bl	8000d7c <sendCommand>
	UC1609_Scroll(0);
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f000 f947 	bl	8001130 <UC1609_Scroll>
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000698 	.word	0x20000698
 8000eb0:	2000069c 	.word	0x2000069c
 8000eb4:	200006a0 	.word	0x200006a0
 8000eb8:	200006a4 	.word	0x200006a4
 8000ebc:	200006a8 	.word	0x200006a8
 8000ec0:	200006ac 	.word	0x200006ac
 8000ec4:	200006b0 	.word	0x200006b0

08000ec8 <UC1609_SetXY>:

// HAL Func
void UC1609_SetXY(uint8_t x, uint8_t y) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
	sendCommand(0b00000000 | (x & 0xF));
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff4b 	bl	8000d7c <sendCommand>
	sendCommand(0b00010000 | ((x >> 4) & 0xF));
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	091b      	lsrs	r3, r3, #4
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	f043 0310 	orr.w	r3, r3, #16
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff40 	bl	8000d7c <sendCommand>
	sendCommand(0b10110000 | y);
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff39 	bl	8000d7c <sendCommand>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <UC1609_SetPos>:

// In uc_lcd_buffer
void UC1609_SetPos(uint8_t x, uint8_t y) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	71bb      	strb	r3, [r7, #6]
	uc_cursor = x * 6 + UC1609_WIDTH * y;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	461a      	mov	r2, r3
 8000f2a:	0052      	lsls	r2, r2, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	79bb      	ldrb	r3, [r7, #6]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	4619      	mov	r1, r3
 8000f38:	0049      	lsls	r1, r1, #1
 8000f3a:	440b      	add	r3, r1
 8000f3c:	019b      	lsls	r3, r3, #6
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	4413      	add	r3, r2
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <UC1609_SetPos+0x40>)
 8000f46:	801a      	strh	r2, [r3, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000694 	.word	0x20000694

08000f58 <UC1609_UpdateScreen>:

void UC1609_UpdateScreen() {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

	UC1609_SetXY(0, 0);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f7ff ffb2 	bl	8000ec8 <UC1609_SetXY>
	HAL_GPIO_WritePin(csPort, csPin, 0);
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <UC1609_UpdateScreen+0x58>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <UC1609_UpdateScreen+0x5c>)
 8000f6a:	8811      	ldrh	r1, [r2, #0]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 f9dd 	bl	800332e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cdPort, cdPin, 1);
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <UC1609_UpdateScreen+0x60>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <UC1609_UpdateScreen+0x64>)
 8000f7a:	8811      	ldrh	r1, [r2, #0]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 f9d5 	bl	800332e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, uc_lcd_buffer, UC1609_BUFFER_SIZE, 1000);
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <UC1609_UpdateScreen+0x68>)
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000f90:	490c      	ldr	r1, [pc, #48]	; (8000fc4 <UC1609_UpdateScreen+0x6c>)
 8000f92:	f002 ff39 	bl	8003e08 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(csPort, csPin, 1);
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <UC1609_UpdateScreen+0x58>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <UC1609_UpdateScreen+0x5c>)
 8000f9c:	8811      	ldrh	r1, [r2, #0]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f002 f9c4 	bl	800332e <HAL_GPIO_WritePin>
	sendCommand(UC1609_CMD_ENABLE);
 8000fa6:	20af      	movs	r0, #175	; 0xaf
 8000fa8:	f7ff fee8 	bl	8000d7c <sendCommand>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000069c 	.word	0x2000069c
 8000fb4:	200006a0 	.word	0x200006a0
 8000fb8:	200006a4 	.word	0x200006a4
 8000fbc:	200006a8 	.word	0x200006a8
 8000fc0:	20000698 	.word	0x20000698
 8000fc4:	20000094 	.word	0x20000094

08000fc8 <UC1609_Clean>:

void UC1609_Clean() {
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < UC1609_BUFFER_SIZE; ++i)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	80fb      	strh	r3, [r7, #6]
 8000fd2:	e006      	b.n	8000fe2 <UC1609_Clean+0x1a>
		uc_lcd_buffer[i] = 0;
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <UC1609_Clean+0x30>)
 8000fd8:	2100      	movs	r1, #0
 8000fda:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < UC1609_BUFFER_SIZE; ++i)
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	80fb      	strh	r3, [r7, #6]
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000fe8:	d3f4      	bcc.n	8000fd4 <UC1609_Clean+0xc>
}
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000094 	.word	0x20000094

08000ffc <UC1609_PutRuC>:

void UC1609_PutRuC(char *c) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

	uint8_t pos;
	if (*c == 0xD0)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2bd0      	cmp	r3, #208	; 0xd0
 800100a:	d105      	bne.n	8001018 <UC1609_PutRuC+0x1c>
		pos = *(c + 1) - 144 + 101;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3301      	adds	r3, #1
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	3b2b      	subs	r3, #43	; 0x2b
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e008      	b.n	800102a <UC1609_PutRuC+0x2e>
	else if (*c == 0xD1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2bd1      	cmp	r3, #209	; 0xd1
 800101e:	d11a      	bne.n	8001056 <UC1609_PutRuC+0x5a>
		pos = *(c + 1) - 128 + 149;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3301      	adds	r3, #1
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	3315      	adds	r3, #21
 8001028:	73fb      	strb	r3, [r7, #15]
	else
		return;
	memcpy(uc_lcd_buffer + uc_cursor, &myFont[pos][0], 5);
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <UC1609_PutRuC+0x64>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <UC1609_PutRuC+0x68>)
 8001032:	18d0      	adds	r0, r2, r3
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <UC1609_PutRuC+0x6c>)
 800103e:	4413      	add	r3, r2
 8001040:	2205      	movs	r2, #5
 8001042:	4619      	mov	r1, r3
 8001044:	f004 fc64 	bl	8005910 <memcpy>
	uc_cursor += 5;
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <UC1609_PutRuC+0x64>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	3305      	adds	r3, #5
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <UC1609_PutRuC+0x64>)
 8001052:	801a      	strh	r2, [r3, #0]
 8001054:	e000      	b.n	8001058 <UC1609_PutRuC+0x5c>
		return;
 8001056:	bf00      	nop
}
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000694 	.word	0x20000694
 8001064:	20000094 	.word	0x20000094
 8001068:	0800626c 	.word	0x0800626c

0800106c <UC1609_Put>:

void UC1609_Put(char c) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	memcpy(uc_lcd_buffer + uc_cursor, &myFont[c - 0x20][0], 5);
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <UC1609_Put+0x40>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <UC1609_Put+0x44>)
 800107e:	18d0      	adds	r0, r2, r3
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f1a3 0220 	sub.w	r2, r3, #32
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <UC1609_Put+0x48>)
 800108e:	4413      	add	r3, r2
 8001090:	2205      	movs	r2, #5
 8001092:	4619      	mov	r1, r3
 8001094:	f004 fc3c 	bl	8005910 <memcpy>
	uc_cursor += 5;
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <UC1609_Put+0x40>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	3305      	adds	r3, #5
 800109e:	b29a      	uxth	r2, r3
 80010a0:	4b02      	ldr	r3, [pc, #8]	; (80010ac <UC1609_Put+0x40>)
 80010a2:	801a      	strh	r2, [r3, #0]
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000694 	.word	0x20000694
 80010b0:	20000094 	.word	0x20000094
 80010b4:	0800626c 	.word	0x0800626c

080010b8 <UC1609_PutString>:

void UC1609_PutString(char *c) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	while (*c) {
 80010c0:	e029      	b.n	8001116 <UC1609_PutString+0x5e>
		uc_cursor %= UC1609_BUFFER_SIZE;
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <UC1609_PutString+0x70>)
 80010c4:	881a      	ldrh	r2, [r3, #0]
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <UC1609_PutString+0x74>)
 80010c8:	fba3 1302 	umull	r1, r3, r3, r2
 80010cc:	0a99      	lsrs	r1, r3, #10
 80010ce:	460b      	mov	r3, r1
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	440b      	add	r3, r1
 80010d4:	025b      	lsls	r3, r3, #9
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	b29a      	uxth	r2, r3
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <UC1609_PutString+0x70>)
 80010dc:	801a      	strh	r2, [r3, #0]
		if (*c == 0xD0 || *c == 0xD1) {
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2bd0      	cmp	r3, #208	; 0xd0
 80010e4:	d003      	beq.n	80010ee <UC1609_PutString+0x36>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2bd1      	cmp	r3, #209	; 0xd1
 80010ec:	d106      	bne.n	80010fc <UC1609_PutString+0x44>
			UC1609_PutRuC(c);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ff84 	bl	8000ffc <UC1609_PutRuC>
			c += 2;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3302      	adds	r3, #2
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	e006      	b.n	800110a <UC1609_PutString+0x52>
		} else
			UC1609_Put(*c++);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ffb1 	bl	800106c <UC1609_Put>
		uc_cursor++;
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <UC1609_PutString+0x70>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	3301      	adds	r3, #1
 8001110:	b29a      	uxth	r2, r3
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <UC1609_PutString+0x70>)
 8001114:	801a      	strh	r2, [r3, #0]
	while (*c) {
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1d1      	bne.n	80010c2 <UC1609_PutString+0xa>
	}
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000694 	.word	0x20000694
 800112c:	aaaaaaab 	.word	0xaaaaaaab

08001130 <UC1609_Scroll>:

void UC1609_SetInversion(uint8_t invert) {
	sendCommand(UC1609_CMD_INVERSION | invert);
}

void UC1609_Scroll(uint8_t lines) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
	lines %= 64;
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001140:	71fb      	strb	r3, [r7, #7]
	sendCommand(UC1609_CMD_SCROLL | lines);
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001148:	b2db      	uxtb	r3, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fe16 	bl	8000d7c <sendCommand>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <UC1609_PutPixel>:

void UC1609_DrawBitmap(uint8_t *buf) {
	memcpy(uc_lcd_buffer, buf, sizeof(uc_lcd_buffer));
}

void UC1609_PutPixel(uint8_t x, uint8_t y) {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	460a      	mov	r2, r1
 8001162:	71fb      	strb	r3, [r7, #7]
 8001164:	4613      	mov	r3, r2
 8001166:	71bb      	strb	r3, [r7, #6]
	uc_lcd_buffer[(x + (y / 8) * UC1609_WIDTH) % UC1609_BUFFER_SIZE] |= 1
 8001168:	79fa      	ldrb	r2, [r7, #7]
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	08db      	lsrs	r3, r3, #3
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4619      	mov	r1, r3
 8001172:	460b      	mov	r3, r1
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	440b      	add	r3, r1
 8001178:	019b      	lsls	r3, r3, #6
 800117a:	18d1      	adds	r1, r2, r3
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <UC1609_PutPixel+0x64>)
 800117e:	fb83 2301 	smull	r2, r3, r3, r1
 8001182:	121a      	asrs	r2, r3, #8
 8001184:	17cb      	asrs	r3, r1, #31
 8001186:	1ad2      	subs	r2, r2, r3
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	025b      	lsls	r3, r3, #9
 8001190:	1aca      	subs	r2, r1, r3
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <UC1609_PutPixel+0x68>)
 8001194:	5c9b      	ldrb	r3, [r3, r2]
 8001196:	b259      	sxtb	r1, r3
			<< (y % 8);
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	2001      	movs	r0, #1
 80011a0:	fa00 f303 	lsl.w	r3, r0, r3
	uc_lcd_buffer[(x + (y / 8) * UC1609_WIDTH) % UC1609_BUFFER_SIZE] |= 1
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	430b      	orrs	r3, r1
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	b2d9      	uxtb	r1, r3
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <UC1609_PutPixel+0x68>)
 80011ae:	5499      	strb	r1, [r3, r2]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	2aaaaaab 	.word	0x2aaaaaab
 80011c0:	20000094 	.word	0x20000094

080011c4 <UC1609_DrawLine>:

void UC1609_DrawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4604      	mov	r4, r0
 80011cc:	4608      	mov	r0, r1
 80011ce:	4611      	mov	r1, r2
 80011d0:	461a      	mov	r2, r3
 80011d2:	4623      	mov	r3, r4
 80011d4:	71fb      	strb	r3, [r7, #7]
 80011d6:	4603      	mov	r3, r0
 80011d8:	71bb      	strb	r3, [r7, #6]
 80011da:	460b      	mov	r3, r1
 80011dc:	717b      	strb	r3, [r7, #5]
 80011de:	4613      	mov	r3, r2
 80011e0:	713b      	strb	r3, [r7, #4]
	if (x2 == x1 && y2 == y1) {
 80011e2:	797a      	ldrb	r2, [r7, #5]
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d10a      	bne.n	8001200 <UC1609_DrawLine+0x3c>
 80011ea:	793a      	ldrb	r2, [r7, #4]
 80011ec:	79bb      	ldrb	r3, [r7, #6]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d106      	bne.n	8001200 <UC1609_DrawLine+0x3c>
		UC1609_PutPixel(x1, y1);
 80011f2:	79ba      	ldrb	r2, [r7, #6]
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ffad 	bl	8001158 <UC1609_PutPixel>
		return;
 80011fe:	e063      	b.n	80012c8 <UC1609_DrawLine+0x104>
	 y2 = y1;
	 y1 = temp;
	 }
	 */

	if (abs(x2 - x1) > abs(y2 - y1)) {
 8001200:	797a      	ldrb	r2, [r7, #5]
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800120a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800120e:	7939      	ldrb	r1, [r7, #4]
 8001210:	79bb      	ldrb	r3, [r7, #6]
 8001212:	1acb      	subs	r3, r1, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	bfb8      	it	lt
 8001218:	425b      	neglt	r3, r3
 800121a:	429a      	cmp	r2, r3
 800121c:	dd2a      	ble.n	8001274 <UC1609_DrawLine+0xb0>
		int step = sign(x2 - x1);
 800121e:	797a      	ldrb	r2, [r7, #5]
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fd99 	bl	8000d5c <sign>
 800122a:	60f8      	str	r0, [r7, #12]
		for (uint8_t i = x1; i != x2 + 1; i+=step) {
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	75fb      	strb	r3, [r7, #23]
 8001230:	e01a      	b.n	8001268 <UC1609_DrawLine+0xa4>
			UC1609_PutPixel(i, y1 + (y2 - y1) * (i - x1) / (x2 - x1));
 8001232:	793a      	ldrb	r2, [r7, #4]
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	7df9      	ldrb	r1, [r7, #23]
 800123a:	79fa      	ldrb	r2, [r7, #7]
 800123c:	1a8a      	subs	r2, r1, r2
 800123e:	fb03 f202 	mul.w	r2, r3, r2
 8001242:	7979      	ldrb	r1, [r7, #5]
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	1acb      	subs	r3, r1, r3
 8001248:	fb92 f3f3 	sdiv	r3, r2, r3
 800124c:	b2da      	uxtb	r2, r3
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	4413      	add	r3, r2
 8001252:	b2da      	uxtb	r2, r3
 8001254:	7dfb      	ldrb	r3, [r7, #23]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff7d 	bl	8001158 <UC1609_PutPixel>
		for (uint8_t i = x1; i != x2 + 1; i+=step) {
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	4413      	add	r3, r2
 8001266:	75fb      	strb	r3, [r7, #23]
 8001268:	7dfa      	ldrb	r2, [r7, #23]
 800126a:	797b      	ldrb	r3, [r7, #5]
 800126c:	3301      	adds	r3, #1
 800126e:	429a      	cmp	r2, r3
 8001270:	d1df      	bne.n	8001232 <UC1609_DrawLine+0x6e>
 8001272:	e029      	b.n	80012c8 <UC1609_DrawLine+0x104>
		}
	} else {
		int step = sign(y2 - y1);
 8001274:	793a      	ldrb	r2, [r7, #4]
 8001276:	79bb      	ldrb	r3, [r7, #6]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fd6e 	bl	8000d5c <sign>
 8001280:	6138      	str	r0, [r7, #16]
		for (uint8_t i = y1; i != y2 + 1; i+=step) {
 8001282:	79bb      	ldrb	r3, [r7, #6]
 8001284:	75bb      	strb	r3, [r7, #22]
 8001286:	e01a      	b.n	80012be <UC1609_DrawLine+0xfa>
			UC1609_PutPixel(x1 + (x2 - x1) * (i - y1) / (y2 - y1), i);
 8001288:	797a      	ldrb	r2, [r7, #5]
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	7db9      	ldrb	r1, [r7, #22]
 8001290:	79ba      	ldrb	r2, [r7, #6]
 8001292:	1a8a      	subs	r2, r1, r2
 8001294:	fb03 f202 	mul.w	r2, r3, r2
 8001298:	7939      	ldrb	r1, [r7, #4]
 800129a:	79bb      	ldrb	r3, [r7, #6]
 800129c:	1acb      	subs	r3, r1, r3
 800129e:	fb92 f3f3 	sdiv	r3, r2, r3
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	4413      	add	r3, r2
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	7dba      	ldrb	r2, [r7, #22]
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff52 	bl	8001158 <UC1609_PutPixel>
		for (uint8_t i = y1; i != y2 + 1; i+=step) {
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	7dbb      	ldrb	r3, [r7, #22]
 80012ba:	4413      	add	r3, r2
 80012bc:	75bb      	strb	r3, [r7, #22]
 80012be:	7dba      	ldrb	r2, [r7, #22]
 80012c0:	793b      	ldrb	r3, [r7, #4]
 80012c2:	3301      	adds	r3, #1
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d1df      	bne.n	8001288 <UC1609_DrawLine+0xc4>
		}
	}
}
 80012c8:	371c      	adds	r7, #28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd90      	pop	{r4, r7, pc}

080012ce <UC1609_DrawDottedLine>:

void UC1609_DrawDottedLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 80012ce:	b590      	push	{r4, r7, lr}
 80012d0:	b085      	sub	sp, #20
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4604      	mov	r4, r0
 80012d6:	4608      	mov	r0, r1
 80012d8:	4611      	mov	r1, r2
 80012da:	461a      	mov	r2, r3
 80012dc:	4623      	mov	r3, r4
 80012de:	71fb      	strb	r3, [r7, #7]
 80012e0:	4603      	mov	r3, r0
 80012e2:	71bb      	strb	r3, [r7, #6]
 80012e4:	460b      	mov	r3, r1
 80012e6:	717b      	strb	r3, [r7, #5]
 80012e8:	4613      	mov	r3, r2
 80012ea:	713b      	strb	r3, [r7, #4]
	if (x2 == x1 && y2 == y1) {
 80012ec:	797a      	ldrb	r2, [r7, #5]
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d10a      	bne.n	800130a <UC1609_DrawDottedLine+0x3c>
 80012f4:	793a      	ldrb	r2, [r7, #4]
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d106      	bne.n	800130a <UC1609_DrawDottedLine+0x3c>
		UC1609_PutPixel(x1, y1);
 80012fc:	79ba      	ldrb	r2, [r7, #6]
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff28 	bl	8001158 <UC1609_PutPixel>
		return;
 8001308:	e048      	b.n	800139c <UC1609_DrawDottedLine+0xce>
	}
	if (x2 - x1 > y2 - y1) {
 800130a:	797a      	ldrb	r2, [r7, #5]
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	1ad2      	subs	r2, r2, r3
 8001310:	7939      	ldrb	r1, [r7, #4]
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	1acb      	subs	r3, r1, r3
 8001316:	429a      	cmp	r2, r3
 8001318:	dd20      	ble.n	800135c <UC1609_DrawDottedLine+0x8e>
		for (uint8_t i = x1; i < x2 + 1; i += 2) {
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	e018      	b.n	8001352 <UC1609_DrawDottedLine+0x84>
			UC1609_PutPixel(i, y1 + (y2 - y1) * (i - x1) / (x2 - x1));
 8001320:	793a      	ldrb	r2, [r7, #4]
 8001322:	79bb      	ldrb	r3, [r7, #6]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	7bf9      	ldrb	r1, [r7, #15]
 8001328:	79fa      	ldrb	r2, [r7, #7]
 800132a:	1a8a      	subs	r2, r1, r2
 800132c:	fb03 f202 	mul.w	r2, r3, r2
 8001330:	7979      	ldrb	r1, [r7, #5]
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	1acb      	subs	r3, r1, r3
 8001336:	fb92 f3f3 	sdiv	r3, r2, r3
 800133a:	b2da      	uxtb	r2, r3
 800133c:	79bb      	ldrb	r3, [r7, #6]
 800133e:	4413      	add	r3, r2
 8001340:	b2da      	uxtb	r2, r3
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff06 	bl	8001158 <UC1609_PutPixel>
		for (uint8_t i = x1; i < x2 + 1; i += 2) {
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	3302      	adds	r3, #2
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	797a      	ldrb	r2, [r7, #5]
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	429a      	cmp	r2, r3
 8001358:	d2e2      	bcs.n	8001320 <UC1609_DrawDottedLine+0x52>
 800135a:	e01f      	b.n	800139c <UC1609_DrawDottedLine+0xce>
		}
	} else {
		for (uint8_t i = y1; i < y2 + 1; i += 2) {
 800135c:	79bb      	ldrb	r3, [r7, #6]
 800135e:	73bb      	strb	r3, [r7, #14]
 8001360:	e018      	b.n	8001394 <UC1609_DrawDottedLine+0xc6>
			UC1609_PutPixel(x1 + (x2 - x1) * (i - y1) / (y2 - y1), i);
 8001362:	797a      	ldrb	r2, [r7, #5]
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	7bb9      	ldrb	r1, [r7, #14]
 800136a:	79ba      	ldrb	r2, [r7, #6]
 800136c:	1a8a      	subs	r2, r1, r2
 800136e:	fb03 f202 	mul.w	r2, r3, r2
 8001372:	7939      	ldrb	r1, [r7, #4]
 8001374:	79bb      	ldrb	r3, [r7, #6]
 8001376:	1acb      	subs	r3, r1, r3
 8001378:	fb92 f3f3 	sdiv	r3, r2, r3
 800137c:	b2da      	uxtb	r2, r3
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	4413      	add	r3, r2
 8001382:	b2db      	uxtb	r3, r3
 8001384:	7bba      	ldrb	r2, [r7, #14]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fee5 	bl	8001158 <UC1609_PutPixel>
		for (uint8_t i = y1; i < y2 + 1; i += 2) {
 800138e:	7bbb      	ldrb	r3, [r7, #14]
 8001390:	3302      	adds	r3, #2
 8001392:	73bb      	strb	r3, [r7, #14]
 8001394:	793a      	ldrb	r2, [r7, #4]
 8001396:	7bbb      	ldrb	r3, [r7, #14]
 8001398:	429a      	cmp	r2, r3
 800139a:	d2e2      	bcs.n	8001362 <UC1609_DrawDottedLine+0x94>
		}
	}
}
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd90      	pop	{r4, r7, pc}
	...

080013a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <__NVIC_GetPriorityGrouping+0x18>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	f003 0307 	and.w	r3, r3, #7
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	db0b      	blt.n	80013ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	f003 021f 	and.w	r2, r3, #31
 80013d8:	4906      	ldr	r1, [pc, #24]	; (80013f4 <__NVIC_EnableIRQ+0x34>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	095b      	lsrs	r3, r3, #5
 80013e0:	2001      	movs	r0, #1
 80013e2:	fa00 f202 	lsl.w	r2, r0, r2
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100

080013f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	db0a      	blt.n	8001422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	490c      	ldr	r1, [pc, #48]	; (8001444 <__NVIC_SetPriority+0x4c>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	0112      	lsls	r2, r2, #4
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	440b      	add	r3, r1
 800141c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001420:	e00a      	b.n	8001438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4908      	ldr	r1, [pc, #32]	; (8001448 <__NVIC_SetPriority+0x50>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	3b04      	subs	r3, #4
 8001430:	0112      	lsls	r2, r2, #4
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	440b      	add	r3, r1
 8001436:	761a      	strb	r2, [r3, #24]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	; 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f1c3 0307 	rsb	r3, r3, #7
 8001466:	2b04      	cmp	r3, #4
 8001468:	bf28      	it	cs
 800146a:	2304      	movcs	r3, #4
 800146c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3304      	adds	r3, #4
 8001472:	2b06      	cmp	r3, #6
 8001474:	d902      	bls.n	800147c <NVIC_EncodePriority+0x30>
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3b03      	subs	r3, #3
 800147a:	e000      	b.n	800147e <NVIC_EncodePriority+0x32>
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	401a      	ands	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	43d9      	mvns	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	4313      	orrs	r3, r2
         );
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3724      	adds	r7, #36	; 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d103      	bne.n	80014cc <LL_ADC_DMA_GetRegAddr+0x1c>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t)&(ADCx->DR);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	334c      	adds	r3, #76	; 0x4c
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	e001      	b.n	80014d0 <LL_ADC_DMA_GetRegAddr+0x20>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register of multimode data */
    data_reg_addr = (uint32_t)&(ADC12_COMMON->DR);
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <LL_ADC_DMA_GetRegAddr+0x2c>)
 80014ce:	60fb      	str	r3, [r7, #12]
  }
  
  return data_reg_addr;
 80014d0:	68fb      	ldr	r3, [r7, #12]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	4001244c 	.word	0x4001244c

080014e0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	609a      	str	r2, [r3, #8]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	332c      	adds	r3, #44	; 0x2c
 8001514:	4619      	mov	r1, r3
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800151c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001520:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	fa92 f2a2 	rbit	r2, r2
 8001528:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	fab2 f282 	clz	r2, r2
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	40d3      	lsrs	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	440b      	add	r3, r1
 8001538:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	f003 031f 	and.w	r3, r3, #31
 8001544:	211f      	movs	r1, #31
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	401a      	ands	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f003 011f 	and.w	r1, r3, #31
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	f003 031f 	and.w	r3, r3, #31
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	431a      	orrs	r2, r3
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001564:	bf00      	nop
 8001566:	3724      	adds	r7, #36	; 0x24
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800156e:	b480      	push	{r7}
 8001570:	b08d      	sub	sp, #52	; 0x34
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	330c      	adds	r3, #12
 800157e:	4619      	mov	r1, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001586:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800158a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	fa92 f2a2 	rbit	r2, r2
 8001592:	617a      	str	r2, [r7, #20]
  return result;
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	fab2 f282 	clz	r2, r2
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	40d3      	lsrs	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 80015a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80015ae:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80015b2:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b4:	6a39      	ldr	r1, [r7, #32]
 80015b6:	fa91 f1a1 	rbit	r1, r1
 80015ba:	61f9      	str	r1, [r7, #28]
  return result;
 80015bc:	69f9      	ldr	r1, [r7, #28]
 80015be:	fab1 f181 	clz	r1, r1
 80015c2:	b2c9      	uxtb	r1, r1
 80015c4:	40cb      	lsrs	r3, r1
 80015c6:	2107      	movs	r1, #7
 80015c8:	fa01 f303 	lsl.w	r3, r1, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	401a      	ands	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80015d6:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80015da:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015de:	fa91 f1a1 	rbit	r1, r1
 80015e2:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80015e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015e6:	fab1 f181 	clz	r1, r1
 80015ea:	b2c9      	uxtb	r1, r1
 80015ec:	40cb      	lsrs	r3, r1
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	431a      	orrs	r2, r3
 80015f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80015fa:	bf00      	nop
 80015fc:	3734      	adds	r7, #52	; 0x34
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f043 0201 	orr.w	r2, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	609a      	str	r2, [r3, #8]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f043 0204 	orr.w	r2, r3, #4
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	609a      	str	r2, [r3, #8]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	609a      	str	r2, [r3, #8]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
	...

08001660 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	3b01      	subs	r3, #1
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <LL_DMA_EnableChannel+0x38>)
 8001670:	5cd3      	ldrb	r3, [r2, r3]
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4413      	add	r3, r2
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	3a01      	subs	r2, #1
 800167e:	4906      	ldr	r1, [pc, #24]	; (8001698 <LL_DMA_EnableChannel+0x38>)
 8001680:	5c8a      	ldrb	r2, [r1, r2]
 8001682:	4611      	mov	r1, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	440a      	add	r2, r1
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6013      	str	r3, [r2, #0]
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	08006264 	.word	0x08006264

0800169c <LL_DMA_ConfigTransfer>:
  *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDATAALIGN_WORD
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configuration)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <LL_DMA_ConfigTransfer+0x44>)
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
 80016b0:	461a      	mov	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4413      	add	r3, r2
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80016bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	3a01      	subs	r2, #1
 80016c4:	4906      	ldr	r1, [pc, #24]	; (80016e0 <LL_DMA_ConfigTransfer+0x44>)
 80016c6:	5c8a      	ldrb	r2, [r1, r2]
 80016c8:	4611      	mov	r1, r2
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	440a      	add	r2, r1
 80016ce:	4611      	mov	r1, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_PSIZE | DMA_CCR_MSIZE | DMA_CCR_PL,
             Configuration);
}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	08006264 	.word	0x08006264

080016e4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	4a0c      	ldr	r2, [pc, #48]	; (8001728 <LL_DMA_SetDataTransferDirection+0x44>)
 80016f6:	5cd3      	ldrb	r3, [r2, r3]
 80016f8:	461a      	mov	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4413      	add	r3, r2
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001704:	f023 0310 	bic.w	r3, r3, #16
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	3a01      	subs	r2, #1
 800170c:	4906      	ldr	r1, [pc, #24]	; (8001728 <LL_DMA_SetDataTransferDirection+0x44>)
 800170e:	5c8a      	ldrb	r2, [r1, r2]
 8001710:	4611      	mov	r1, r2
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	440a      	add	r2, r1
 8001716:	4611      	mov	r1, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	08006264 	.word	0x08006264

0800172c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	3b01      	subs	r3, #1
 800173c:	4a0b      	ldr	r2, [pc, #44]	; (800176c <LL_DMA_SetMode+0x40>)
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	461a      	mov	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4413      	add	r3, r2
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 0220 	bic.w	r2, r3, #32
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	3b01      	subs	r3, #1
 8001750:	4906      	ldr	r1, [pc, #24]	; (800176c <LL_DMA_SetMode+0x40>)
 8001752:	5ccb      	ldrb	r3, [r1, r3]
 8001754:	4619      	mov	r1, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	440b      	add	r3, r1
 800175a:	4619      	mov	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4313      	orrs	r3, r2
 8001760:	600b      	str	r3, [r1, #0]
             Mode);
}
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	08006264 	.word	0x08006264

08001770 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3b01      	subs	r3, #1
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <LL_DMA_SetPeriphIncMode+0x40>)
 8001782:	5cd3      	ldrb	r3, [r2, r3]
 8001784:	461a      	mov	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4413      	add	r3, r2
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	3b01      	subs	r3, #1
 8001794:	4906      	ldr	r1, [pc, #24]	; (80017b0 <LL_DMA_SetPeriphIncMode+0x40>)
 8001796:	5ccb      	ldrb	r3, [r1, r3]
 8001798:	4619      	mov	r1, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	440b      	add	r3, r1
 800179e:	4619      	mov	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	08006264 	.word	0x08006264

080017b4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <LL_DMA_SetMemoryIncMode+0x40>)
 80017c6:	5cd3      	ldrb	r3, [r2, r3]
 80017c8:	461a      	mov	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4413      	add	r3, r2
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	4906      	ldr	r1, [pc, #24]	; (80017f4 <LL_DMA_SetMemoryIncMode+0x40>)
 80017da:	5ccb      	ldrb	r3, [r1, r3]
 80017dc:	4619      	mov	r1, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	440b      	add	r3, r1
 80017e2:	4619      	mov	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	08006264 	.word	0x08006264

080017f8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	3b01      	subs	r3, #1
 8001808:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <LL_DMA_SetPeriphSize+0x40>)
 800180a:	5cd3      	ldrb	r3, [r2, r3]
 800180c:	461a      	mov	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4413      	add	r3, r2
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	3b01      	subs	r3, #1
 800181c:	4906      	ldr	r1, [pc, #24]	; (8001838 <LL_DMA_SetPeriphSize+0x40>)
 800181e:	5ccb      	ldrb	r3, [r1, r3]
 8001820:	4619      	mov	r1, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	440b      	add	r3, r1
 8001826:	4619      	mov	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	08006264 	.word	0x08006264

0800183c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	3b01      	subs	r3, #1
 800184c:	4a0b      	ldr	r2, [pc, #44]	; (800187c <LL_DMA_SetMemorySize+0x40>)
 800184e:	5cd3      	ldrb	r3, [r2, r3]
 8001850:	461a      	mov	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4413      	add	r3, r2
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	3b01      	subs	r3, #1
 8001860:	4906      	ldr	r1, [pc, #24]	; (800187c <LL_DMA_SetMemorySize+0x40>)
 8001862:	5ccb      	ldrb	r3, [r1, r3]
 8001864:	4619      	mov	r1, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	440b      	add	r3, r1
 800186a:	4619      	mov	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	08006264 	.word	0x08006264

08001880 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	3b01      	subs	r3, #1
 8001890:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	461a      	mov	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4413      	add	r3, r2
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	4906      	ldr	r1, [pc, #24]	; (80018c0 <LL_DMA_SetChannelPriorityLevel+0x40>)
 80018a6:	5ccb      	ldrb	r3, [r1, r3]
 80018a8:	4619      	mov	r1, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	440b      	add	r3, r1
 80018ae:	4619      	mov	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]
             Priority);
}
 80018b6:	bf00      	nop
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	08006264 	.word	0x08006264

080018c4 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <LL_DMA_SetDataLength+0x40>)
 80018d6:	5cd3      	ldrb	r3, [r2, r3]
 80018d8:	461a      	mov	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4413      	add	r3, r2
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	041b      	lsls	r3, r3, #16
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	3a01      	subs	r2, #1
 80018e8:	4906      	ldr	r1, [pc, #24]	; (8001904 <LL_DMA_SetDataLength+0x40>)
 80018ea:	5c8a      	ldrb	r2, [r1, r2]
 80018ec:	4611      	mov	r1, r2
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	440a      	add	r2, r1
 80018f2:	4611      	mov	r1, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	08006264 	.word	0x08006264

08001908 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2b10      	cmp	r3, #16
 800191a:	d114      	bne.n	8001946 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	3b01      	subs	r3, #1
 8001920:	4a15      	ldr	r2, [pc, #84]	; (8001978 <LL_DMA_ConfigAddresses+0x70>)
 8001922:	5cd3      	ldrb	r3, [r2, r3]
 8001924:	461a      	mov	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4413      	add	r3, r2
 800192a:	461a      	mov	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	3b01      	subs	r3, #1
 8001934:	4a10      	ldr	r2, [pc, #64]	; (8001978 <LL_DMA_ConfigAddresses+0x70>)
 8001936:	5cd3      	ldrb	r3, [r2, r3]
 8001938:	461a      	mov	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4413      	add	r3, r2
 800193e:	461a      	mov	r2, r3
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 8001944:	e013      	b.n	800196e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	3b01      	subs	r3, #1
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <LL_DMA_ConfigAddresses+0x70>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	461a      	mov	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	461a      	mov	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	3b01      	subs	r3, #1
 800195e:	4a06      	ldr	r2, [pc, #24]	; (8001978 <LL_DMA_ConfigAddresses+0x70>)
 8001960:	5cd3      	ldrb	r3, [r2, r3]
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	461a      	mov	r2, r3
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	60d3      	str	r3, [r2, #12]
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	08006264 	.word	0x08006264

0800197c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	3b01      	subs	r3, #1
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <LL_DMA_EnableIT_TC+0x38>)
 800198c:	5cd3      	ldrb	r3, [r2, r3]
 800198e:	461a      	mov	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	3a01      	subs	r2, #1
 800199a:	4906      	ldr	r1, [pc, #24]	; (80019b4 <LL_DMA_EnableIT_TC+0x38>)
 800199c:	5c8a      	ldrb	r2, [r1, r2]
 800199e:	4611      	mov	r1, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	440a      	add	r2, r1
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	6013      	str	r3, [r2, #0]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	08006264 	.word	0x08006264

080019b8 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <LL_DMA_EnableIT_TE+0x38>)
 80019c8:	5cd3      	ldrb	r3, [r2, r3]
 80019ca:	461a      	mov	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4413      	add	r3, r2
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	3a01      	subs	r2, #1
 80019d6:	4906      	ldr	r1, [pc, #24]	; (80019f0 <LL_DMA_EnableIT_TE+0x38>)
 80019d8:	5c8a      	ldrb	r2, [r1, r2]
 80019da:	4611      	mov	r1, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	440a      	add	r2, r1
 80019e0:	f043 0308 	orr.w	r3, r3, #8
 80019e4:	6013      	str	r3, [r2, #0]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	08006264 	.word	0x08006264

080019f4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019fe:	695a      	ldr	r2, [r3, #20]
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a12:	68fb      	ldr	r3, [r7, #12]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000

08001a24 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a2e:	699a      	ldr	r2, [r3, #24]
 8001a30:	4907      	ldr	r1, [pc, #28]	; (8001a50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a3a:	699a      	ldr	r2, [r3, #24]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000

08001a54 <getPwm>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int getPwm(int period, int tick) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	if (HAL_GetTick()-lastStop<1000)
 8001a5e:	f001 f997 	bl	8002d90 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	4b49      	ldr	r3, [pc, #292]	; (8001b8c <getPwm+0x138>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a6e:	d202      	bcs.n	8001a76 <getPwm+0x22>
		return pwm;
 8001a70:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <getPwm+0x13c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	e085      	b.n	8001b82 <getPwm+0x12e>
	ap = (period * a) / 100;
 8001a76:	4b47      	ldr	r3, [pc, #284]	; (8001b94 <getPwm+0x140>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	fb02 f303 	mul.w	r3, r2, r3
 8001a80:	4a45      	ldr	r2, [pc, #276]	; (8001b98 <getPwm+0x144>)
 8001a82:	fb82 1203 	smull	r1, r2, r2, r3
 8001a86:	1152      	asrs	r2, r2, #5
 8001a88:	17db      	asrs	r3, r3, #31
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	4a43      	ldr	r2, [pc, #268]	; (8001b9c <getPwm+0x148>)
 8001a8e:	6013      	str	r3, [r2, #0]
	bp = (period - ap) * b / 100;
 8001a90:	4b42      	ldr	r3, [pc, #264]	; (8001b9c <getPwm+0x148>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	4a41      	ldr	r2, [pc, #260]	; (8001ba0 <getPwm+0x14c>)
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	fb02 f303 	mul.w	r3, r2, r3
 8001aa0:	4a3d      	ldr	r2, [pc, #244]	; (8001b98 <getPwm+0x144>)
 8001aa2:	fb82 1203 	smull	r1, r2, r2, r3
 8001aa6:	1152      	asrs	r2, r2, #5
 8001aa8:	17db      	asrs	r3, r3, #31
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	4a3d      	ldr	r2, [pc, #244]	; (8001ba4 <getPwm+0x150>)
 8001aae:	6013      	str	r3, [r2, #0]
	cp = ((period - ap - bp) * c) / 100;
 8001ab0:	4b3a      	ldr	r3, [pc, #232]	; (8001b9c <getPwm+0x148>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	1ad2      	subs	r2, r2, r3
 8001ab8:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <getPwm+0x150>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	4a3a      	ldr	r2, [pc, #232]	; (8001ba8 <getPwm+0x154>)
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	fb02 f303 	mul.w	r3, r2, r3
 8001ac6:	4a34      	ldr	r2, [pc, #208]	; (8001b98 <getPwm+0x144>)
 8001ac8:	fb82 1203 	smull	r1, r2, r2, r3
 8001acc:	1152      	asrs	r2, r2, #5
 8001ace:	17db      	asrs	r3, r3, #31
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	4a36      	ldr	r2, [pc, #216]	; (8001bac <getPwm+0x158>)
 8001ad4:	6013      	str	r3, [r2, #0]
	dp = ((period - ap - bp - cp) * d) / 100;
 8001ad6:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <getPwm+0x148>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	1ad2      	subs	r2, r2, r3
 8001ade:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <getPwm+0x150>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	1ad2      	subs	r2, r2, r3
 8001ae4:	4b31      	ldr	r3, [pc, #196]	; (8001bac <getPwm+0x158>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	4a31      	ldr	r2, [pc, #196]	; (8001bb0 <getPwm+0x15c>)
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	fb02 f303 	mul.w	r3, r2, r3
 8001af2:	4a29      	ldr	r2, [pc, #164]	; (8001b98 <getPwm+0x144>)
 8001af4:	fb82 1203 	smull	r1, r2, r2, r3
 8001af8:	1152      	asrs	r2, r2, #5
 8001afa:	17db      	asrs	r3, r3, #31
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	4a2d      	ldr	r2, [pc, #180]	; (8001bb4 <getPwm+0x160>)
 8001b00:	6013      	str	r3, [r2, #0]
	if (tick < ap)
 8001b02:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <getPwm+0x148>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	da01      	bge.n	8001b10 <getPwm+0xbc>
		return 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	e038      	b.n	8001b82 <getPwm+0x12e>
	if (tick < (ap + cp))
 8001b10:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <getPwm+0x148>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b25      	ldr	r3, [pc, #148]	; (8001bac <getPwm+0x158>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4413      	add	r3, r2
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	da0c      	bge.n	8001b3a <getPwm+0xe6>
		return pwm * (tick - ap) / cp;
 8001b20:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <getPwm+0x148>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	4a19      	ldr	r2, [pc, #100]	; (8001b90 <getPwm+0x13c>)
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	fb03 f202 	mul.w	r2, r3, r2
 8001b30:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <getPwm+0x158>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b38:	e023      	b.n	8001b82 <getPwm+0x12e>
	if (tick < (period - bp - dp))
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <getPwm+0x150>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	1ad2      	subs	r2, r2, r3
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <getPwm+0x160>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	da02      	bge.n	8001b54 <getPwm+0x100>
		return pwm;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <getPwm+0x13c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	e016      	b.n	8001b82 <getPwm+0x12e>
	if (tick < (period - bp))
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <getPwm+0x150>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	da0e      	bge.n	8001b80 <getPwm+0x12c>
		return pwm * (period - tick - bp) / dp;
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	1ad2      	subs	r2, r2, r3
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <getPwm+0x150>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <getPwm+0x13c>)
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	fb03 f202 	mul.w	r2, r3, r2
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <getPwm+0x160>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b7e:	e000      	b.n	8001b82 <getPwm+0x12e>
	return 0;}
 8001b80:	2300      	movs	r3, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000930 	.word	0x20000930
 8001b90:	200008f8 	.word	0x200008f8
 8001b94:	200008fc 	.word	0x200008fc
 8001b98:	51eb851f 	.word	0x51eb851f
 8001b9c:	20000910 	.word	0x20000910
 8001ba0:	20000900 	.word	0x20000900
 8001ba4:	20000914 	.word	0x20000914
 8001ba8:	20000904 	.word	0x20000904
 8001bac:	20000918 	.word	0x20000918
 8001bb0:	20000908 	.word	0x20000908
 8001bb4:	2000091c 	.word	0x2000091c

08001bb8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

	if (htim == &htim3) {
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a26      	ldr	r2, [pc, #152]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d144      	bne.n	8001c52 <HAL_TIM_PeriodElapsedCallback+0x9a>
		uint32_t pinRead=HAL_GPIO_ReadPin(HALL_GPIO_Port, HALL_Pin);
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4825      	ldr	r0, [pc, #148]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001bcc:	f001 fb98 	bl	8003300 <HAL_GPIO_ReadPin>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60fb      	str	r3, [r7, #12]
		if (hallSensor != pinRead
 8001bd4:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d017      	beq.n	8001c0e <HAL_TIM_PeriodElapsedCallback+0x56>
				&& tick > 20) {
 8001bde:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b14      	cmp	r3, #20
 8001be4:	dd13      	ble.n	8001c0e <HAL_TIM_PeriodElapsedCallback+0x56>
			hallSensor = pinRead;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001bea:	6013      	str	r3, [r2, #0]
			period = tick;
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1e      	ldr	r2, [pc, #120]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001bf2:	6013      	str	r3, [r2, #0]
			tick = 0;
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
			revMeas = 2500 / (1 + period);
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001c04:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c08:	4a19      	ldr	r2, [pc, #100]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	e004      	b.n	8001c18 <HAL_TIM_PeriodElapsedCallback+0x60>
		} else {
			tick++;
 8001c0e:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c16:	6013      	str	r3, [r2, #0]
		}
		if (tick > 25000) {
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001c20:	4293      	cmp	r3, r2
 8001c22:	dd0b      	ble.n	8001c3c <HAL_TIM_PeriodElapsedCallback+0x84>
			tick = 0;
 8001c24:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
			period = 25000;
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001c2c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001c30:	601a      	str	r2, [r3, #0]
			lastStop=HAL_GetTick();
 8001c32:	f001 f8ad 	bl	8002d90 <HAL_GetTick>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4a0e      	ldr	r2, [pc, #56]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001c3a:	6013      	str	r3, [r2, #0]
		}
		TIM1->CCR1 = getPwm(period, tick);
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	4611      	mov	r1, r2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff04 	bl	8001a54 <getPwm>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001c50:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000079c 	.word	0x2000079c
 8001c60:	40010c00 	.word	0x40010c00
 8001c64:	20000920 	.word	0x20000920
 8001c68:	20000004 	.word	0x20000004
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	2000090c 	.word	0x2000090c
 8001c74:	20000930 	.word	0x20000930
 8001c78:	40012c00 	.word	0x40012c00
 8001c7c:	00000000 	.word	0x00000000

08001c80 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c86:	f001 f82b 	bl	8002ce0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001c8a:	f000 faa3 	bl	80021d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001c8e:	f000 fd79 	bl	8002784 <MX_GPIO_Init>
	MX_TIM1_Init();
 8001c92:	f000 fc11 	bl	80024b8 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8001c96:	f000 fd33 	bl	8002700 <MX_USART1_UART_Init>
	MX_SPI1_Init();
 8001c9a:	f000 fbd7 	bl	800244c <MX_SPI1_Init>
	MX_ADC1_Init();
 8001c9e:	f000 faf5 	bl	800228c <MX_ADC1_Init>
	MX_DMA_Init();
 8001ca2:	f000 fd57 	bl	8002754 <MX_DMA_Init>
	MX_TIM3_Init();
 8001ca6:	f000 fcdd 	bl	8002664 <MX_TIM3_Init>
	MX_TIM2_Init();
 8001caa:	f000 fc87 	bl	80025bc <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	hallSensor = HAL_GPIO_ReadPin(HALL_GPIO_Port, HALL_Pin);
 8001cae:	2101      	movs	r1, #1
 8001cb0:	48a8      	ldr	r0, [pc, #672]	; (8001f54 <main+0x2d4>)
 8001cb2:	f001 fb25 	bl	8003300 <HAL_GPIO_ReadPin>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4ba7      	ldr	r3, [pc, #668]	; (8001f58 <main+0x2d8>)
 8001cbc:	601a      	str	r2, [r3, #0]

	LL_ADC_StartCalibration(ADC1);
 8001cbe:	48a7      	ldr	r0, [pc, #668]	; (8001f5c <main+0x2dc>)
 8001cc0:	f7ff fcaf 	bl	8001622 <LL_ADC_StartCalibration>

	UC1609_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port,
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	9302      	str	r3, [sp, #8]
 8001cc8:	4ba2      	ldr	r3, [pc, #648]	; (8001f54 <main+0x2d4>)
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	4ba0      	ldr	r3, [pc, #640]	; (8001f54 <main+0x2d4>)
 8001cd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cd8:	499e      	ldr	r1, [pc, #632]	; (8001f54 <main+0x2d4>)
 8001cda:	48a1      	ldr	r0, [pc, #644]	; (8001f60 <main+0x2e0>)
 8001cdc:	f7ff f8a8 	bl	8000e30 <UC1609_Init>
	LCD_DC_Pin,
	LCD_RESET_GPIO_Port, LCD_RESET_Pin);

	HAL_TIM_Base_Start_IT(&htim3);
 8001ce0:	48a0      	ldr	r0, [pc, #640]	; (8001f64 <main+0x2e4>)
 8001ce2:	f002 fac3 	bl	800426c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	489f      	ldr	r0, [pc, #636]	; (8001f68 <main+0x2e8>)
 8001cea:	f002 fb5b 	bl	80043a4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001cee:	213c      	movs	r1, #60	; 0x3c
 8001cf0:	489e      	ldr	r0, [pc, #632]	; (8001f6c <main+0x2ec>)
 8001cf2:	f002 fc95 	bl	8004620 <HAL_TIM_Encoder_Start>

	LL_DMA_ConfigTransfer(DMA1,
 8001cf6:	f242 52a0 	movw	r2, #9632	; 0x25a0
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	489c      	ldr	r0, [pc, #624]	; (8001f70 <main+0x2f0>)
 8001cfe:	f7ff fccd 	bl	800169c <LL_DMA_ConfigTransfer>
	LL_DMA_PERIPH_NOINCREMENT |
	LL_DMA_MEMORY_INCREMENT |
	LL_DMA_PDATAALIGN_HALFWORD |
	LL_DMA_MDATAALIGN_HALFWORD |
	LL_DMA_PRIORITY_HIGH);
	LL_DMA_ConfigAddresses(DMA1,
 8001d02:	2100      	movs	r1, #0
 8001d04:	4895      	ldr	r0, [pc, #596]	; (8001f5c <main+0x2dc>)
 8001d06:	f7ff fbd3 	bl	80014b0 <LL_ADC_DMA_GetRegAddr>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	4999      	ldr	r1, [pc, #612]	; (8001f74 <main+0x2f4>)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	460b      	mov	r3, r1
 8001d14:	2101      	movs	r1, #1
 8001d16:	4896      	ldr	r0, [pc, #600]	; (8001f70 <main+0x2f0>)
 8001d18:	f7ff fdf6 	bl	8001908 <LL_DMA_ConfigAddresses>
	LL_DMA_CHANNEL_1, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
			(uint32_t) &adc,
			LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 7);
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	2101      	movs	r1, #1
 8001d20:	4893      	ldr	r0, [pc, #588]	; (8001f70 <main+0x2f0>)
 8001d22:	f7ff fdcf 	bl	80018c4 <LL_DMA_SetDataLength>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 8001d26:	2101      	movs	r1, #1
 8001d28:	4891      	ldr	r0, [pc, #580]	; (8001f70 <main+0x2f0>)
 8001d2a:	f7ff fe27 	bl	800197c <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
 8001d2e:	2101      	movs	r1, #1
 8001d30:	488f      	ldr	r0, [pc, #572]	; (8001f70 <main+0x2f0>)
 8001d32:	f7ff fe41 	bl	80019b8 <LL_DMA_EnableIT_TE>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8001d36:	2101      	movs	r1, #1
 8001d38:	488d      	ldr	r0, [pc, #564]	; (8001f70 <main+0x2f0>)
 8001d3a:	f7ff fc91 	bl	8001660 <LL_DMA_EnableChannel>

	LL_ADC_Enable(ADC1);
 8001d3e:	4887      	ldr	r0, [pc, #540]	; (8001f5c <main+0x2dc>)
 8001d40:	f7ff fc60 	bl	8001604 <LL_ADC_Enable>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	LL_ADC_REG_StartConversionSWStart(ADC1);
 8001d44:	4885      	ldr	r0, [pc, #532]	; (8001f5c <main+0x2dc>)
 8001d46:	f7ff fc7b 	bl	8001640 <LL_ADC_REG_StartConversionSWStart>

	while (1) {
		a = (adc[0] - 45) / 40;
 8001d4a:	4b8a      	ldr	r3, [pc, #552]	; (8001f74 <main+0x2f4>)
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b2d      	subs	r3, #45	; 0x2d
 8001d52:	4a89      	ldr	r2, [pc, #548]	; (8001f78 <main+0x2f8>)
 8001d54:	fb82 1203 	smull	r1, r2, r2, r3
 8001d58:	1112      	asrs	r2, r2, #4
 8001d5a:	17db      	asrs	r3, r3, #31
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	4a87      	ldr	r2, [pc, #540]	; (8001f7c <main+0x2fc>)
 8001d60:	6013      	str	r3, [r2, #0]
		b = (adc[1] - 45) / 40;
 8001d62:	4b84      	ldr	r3, [pc, #528]	; (8001f74 <main+0x2f4>)
 8001d64:	885b      	ldrh	r3, [r3, #2]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3b2d      	subs	r3, #45	; 0x2d
 8001d6a:	4a83      	ldr	r2, [pc, #524]	; (8001f78 <main+0x2f8>)
 8001d6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d70:	1112      	asrs	r2, r2, #4
 8001d72:	17db      	asrs	r3, r3, #31
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	4a82      	ldr	r2, [pc, #520]	; (8001f80 <main+0x300>)
 8001d78:	6013      	str	r3, [r2, #0]
		c = (adc[2] - 45) / 40;
 8001d7a:	4b7e      	ldr	r3, [pc, #504]	; (8001f74 <main+0x2f4>)
 8001d7c:	889b      	ldrh	r3, [r3, #4]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b2d      	subs	r3, #45	; 0x2d
 8001d82:	4a7d      	ldr	r2, [pc, #500]	; (8001f78 <main+0x2f8>)
 8001d84:	fb82 1203 	smull	r1, r2, r2, r3
 8001d88:	1112      	asrs	r2, r2, #4
 8001d8a:	17db      	asrs	r3, r3, #31
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	4a7d      	ldr	r2, [pc, #500]	; (8001f84 <main+0x304>)
 8001d90:	6013      	str	r3, [r2, #0]
		d = (adc[3] - 45) / 40;
 8001d92:	4b78      	ldr	r3, [pc, #480]	; (8001f74 <main+0x2f4>)
 8001d94:	88db      	ldrh	r3, [r3, #6]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b2d      	subs	r3, #45	; 0x2d
 8001d9a:	4a77      	ldr	r2, [pc, #476]	; (8001f78 <main+0x2f8>)
 8001d9c:	fb82 1203 	smull	r1, r2, r2, r3
 8001da0:	1112      	asrs	r2, r2, #4
 8001da2:	17db      	asrs	r3, r3, #31
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	4a78      	ldr	r2, [pc, #480]	; (8001f88 <main+0x308>)
 8001da8:	6013      	str	r3, [r2, #0]
		pwm = (adc[4] - 45) / 40;
 8001daa:	4b72      	ldr	r3, [pc, #456]	; (8001f74 <main+0x2f4>)
 8001dac:	891b      	ldrh	r3, [r3, #8]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3b2d      	subs	r3, #45	; 0x2d
 8001db2:	4a71      	ldr	r2, [pc, #452]	; (8001f78 <main+0x2f8>)
 8001db4:	fb82 1203 	smull	r1, r2, r2, r3
 8001db8:	1112      	asrs	r2, r2, #4
 8001dba:	17db      	asrs	r3, r3, #31
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	4a73      	ldr	r2, [pc, #460]	; (8001f8c <main+0x30c>)
 8001dc0:	6013      	str	r3, [r2, #0]

		if (a < 0)
 8001dc2:	4b6e      	ldr	r3, [pc, #440]	; (8001f7c <main+0x2fc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	da02      	bge.n	8001dd0 <main+0x150>
			a = 0;
 8001dca:	4b6c      	ldr	r3, [pc, #432]	; (8001f7c <main+0x2fc>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
		if (a > 100)
 8001dd0:	4b6a      	ldr	r3, [pc, #424]	; (8001f7c <main+0x2fc>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b64      	cmp	r3, #100	; 0x64
 8001dd6:	dd02      	ble.n	8001dde <main+0x15e>
			a = 100;
 8001dd8:	4b68      	ldr	r3, [pc, #416]	; (8001f7c <main+0x2fc>)
 8001dda:	2264      	movs	r2, #100	; 0x64
 8001ddc:	601a      	str	r2, [r3, #0]
		if (b < 0)
 8001dde:	4b68      	ldr	r3, [pc, #416]	; (8001f80 <main+0x300>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	da02      	bge.n	8001dec <main+0x16c>
			b = 0;
 8001de6:	4b66      	ldr	r3, [pc, #408]	; (8001f80 <main+0x300>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
		if (b > 100)
 8001dec:	4b64      	ldr	r3, [pc, #400]	; (8001f80 <main+0x300>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b64      	cmp	r3, #100	; 0x64
 8001df2:	dd02      	ble.n	8001dfa <main+0x17a>
			b = 100;
 8001df4:	4b62      	ldr	r3, [pc, #392]	; (8001f80 <main+0x300>)
 8001df6:	2264      	movs	r2, #100	; 0x64
 8001df8:	601a      	str	r2, [r3, #0]
		if (c < 0)
 8001dfa:	4b62      	ldr	r3, [pc, #392]	; (8001f84 <main+0x304>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da02      	bge.n	8001e08 <main+0x188>
			c = 0;
 8001e02:	4b60      	ldr	r3, [pc, #384]	; (8001f84 <main+0x304>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
		if (c > 100)
 8001e08:	4b5e      	ldr	r3, [pc, #376]	; (8001f84 <main+0x304>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b64      	cmp	r3, #100	; 0x64
 8001e0e:	dd02      	ble.n	8001e16 <main+0x196>
			c = 100;
 8001e10:	4b5c      	ldr	r3, [pc, #368]	; (8001f84 <main+0x304>)
 8001e12:	2264      	movs	r2, #100	; 0x64
 8001e14:	601a      	str	r2, [r3, #0]
		if (d < 0)
 8001e16:	4b5c      	ldr	r3, [pc, #368]	; (8001f88 <main+0x308>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	da02      	bge.n	8001e24 <main+0x1a4>
			d = 0;
 8001e1e:	4b5a      	ldr	r3, [pc, #360]	; (8001f88 <main+0x308>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
		if (d > 100)
 8001e24:	4b58      	ldr	r3, [pc, #352]	; (8001f88 <main+0x308>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b64      	cmp	r3, #100	; 0x64
 8001e2a:	dd02      	ble.n	8001e32 <main+0x1b2>
			d = 100;
 8001e2c:	4b56      	ldr	r3, [pc, #344]	; (8001f88 <main+0x308>)
 8001e2e:	2264      	movs	r2, #100	; 0x64
 8001e30:	601a      	str	r2, [r3, #0]
		if (pwm < 0)
 8001e32:	4b56      	ldr	r3, [pc, #344]	; (8001f8c <main+0x30c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	da02      	bge.n	8001e40 <main+0x1c0>
			pwm = 0;
 8001e3a:	4b54      	ldr	r3, [pc, #336]	; (8001f8c <main+0x30c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
		if (pwm > 100)
 8001e40:	4b52      	ldr	r3, [pc, #328]	; (8001f8c <main+0x30c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b64      	cmp	r3, #100	; 0x64
 8001e46:	dd02      	ble.n	8001e4e <main+0x1ce>
			pwm = 100;
 8001e48:	4b50      	ldr	r3, [pc, #320]	; (8001f8c <main+0x30c>)
 8001e4a:	2264      	movs	r2, #100	; 0x64
 8001e4c:	601a      	str	r2, [r3, #0]

		UC1609_Clean();
 8001e4e:	f7ff f8bb 	bl	8000fc8 <UC1609_Clean>

		int ax = (140 * a) / 100;
 8001e52:	4b4a      	ldr	r3, [pc, #296]	; (8001f7c <main+0x2fc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	228c      	movs	r2, #140	; 0x8c
 8001e58:	fb02 f303 	mul.w	r3, r2, r3
 8001e5c:	4a4c      	ldr	r2, [pc, #304]	; (8001f90 <main+0x310>)
 8001e5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001e62:	1152      	asrs	r2, r2, #5
 8001e64:	17db      	asrs	r3, r3, #31
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	60fb      	str	r3, [r7, #12]
		int bx = (140 - ax) * b / 100;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f1c3 038c 	rsb	r3, r3, #140	; 0x8c
 8001e70:	4a43      	ldr	r2, [pc, #268]	; (8001f80 <main+0x300>)
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	4a45      	ldr	r2, [pc, #276]	; (8001f90 <main+0x310>)
 8001e7a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e7e:	1152      	asrs	r2, r2, #5
 8001e80:	17db      	asrs	r3, r3, #31
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	60bb      	str	r3, [r7, #8]
		int cx = ((140 - ax - bx) * c) / 100;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f1c3 028c 	rsb	r2, r3, #140	; 0x8c
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	4a3c      	ldr	r2, [pc, #240]	; (8001f84 <main+0x304>)
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	fb02 f303 	mul.w	r3, r2, r3
 8001e98:	4a3d      	ldr	r2, [pc, #244]	; (8001f90 <main+0x310>)
 8001e9a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e9e:	1152      	asrs	r2, r2, #5
 8001ea0:	17db      	asrs	r3, r3, #31
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	607b      	str	r3, [r7, #4]
		int dx = ((140 - ax - bx - cx) * d) / 100;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f1c3 028c 	rsb	r2, r3, #140	; 0x8c
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	1ad2      	subs	r2, r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	4a34      	ldr	r2, [pc, #208]	; (8001f88 <main+0x308>)
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	fb02 f303 	mul.w	r3, r2, r3
 8001ebc:	4a34      	ldr	r2, [pc, #208]	; (8001f90 <main+0x310>)
 8001ebe:	fb82 1203 	smull	r1, r2, r2, r3
 8001ec2:	1152      	asrs	r2, r2, #5
 8001ec4:	17db      	asrs	r3, r3, #31
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	603b      	str	r3, [r7, #0]

		UC1609_DrawLine(ax, 63, ax + cx, 63 - 63 * pwm / 100);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	b2d8      	uxtb	r0, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b2d9      	uxtb	r1, r3
 8001eda:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <main+0x30c>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	019b      	lsls	r3, r3, #6
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	4a2a      	ldr	r2, [pc, #168]	; (8001f90 <main+0x310>)
 8001ee6:	fb82 4203 	smull	r4, r2, r2, r3
 8001eea:	1152      	asrs	r2, r2, #5
 8001eec:	17db      	asrs	r3, r3, #31
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	333f      	adds	r3, #63	; 0x3f
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	460a      	mov	r2, r1
 8001ef8:	213f      	movs	r1, #63	; 0x3f
 8001efa:	f7ff f963 	bl	80011c4 <UC1609_DrawLine>
		UC1609_DrawLine(ax + cx, 63 - 63 * pwm / 100, 140 - bx - dx,
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	b2d8      	uxtb	r0, r3
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <main+0x30c>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	019b      	lsls	r3, r3, #6
 8001f12:	1a9b      	subs	r3, r3, r2
 8001f14:	4a1e      	ldr	r2, [pc, #120]	; (8001f90 <main+0x310>)
 8001f16:	fb82 1203 	smull	r1, r2, r2, r3
 8001f1a:	1152      	asrs	r2, r2, #5
 8001f1c:	17db      	asrs	r3, r3, #31
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	333f      	adds	r3, #63	; 0x3f
 8001f24:	b2d9      	uxtb	r1, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	f06f 0373 	mvn.w	r3, #115	; 0x73
 8001f36:	1a9b      	subs	r3, r3, r2
 8001f38:	b2dc      	uxtb	r4, r3
				63 - 63 * pwm / 100);
 8001f3a:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <main+0x30c>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	019b      	lsls	r3, r3, #6
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <main+0x310>)
 8001f46:	fb82 c203 	smull	ip, r2, r2, r3
 8001f4a:	1152      	asrs	r2, r2, #5
 8001f4c:	17db      	asrs	r3, r3, #31
 8001f4e:	1a9b      	subs	r3, r3, r2
		UC1609_DrawLine(ax + cx, 63 - 63 * pwm / 100, 140 - bx - dx,
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	e01f      	b.n	8001f94 <main+0x314>
 8001f54:	40010c00 	.word	0x40010c00
 8001f58:	20000920 	.word	0x20000920
 8001f5c:	40012400 	.word	0x40012400
 8001f60:	200006b4 	.word	0x200006b4
 8001f64:	2000079c 	.word	0x2000079c
 8001f68:	2000070c 	.word	0x2000070c
 8001f6c:	20000754 	.word	0x20000754
 8001f70:	40020000 	.word	0x40020000
 8001f74:	200008e8 	.word	0x200008e8
 8001f78:	66666667 	.word	0x66666667
 8001f7c:	200008fc 	.word	0x200008fc
 8001f80:	20000900 	.word	0x20000900
 8001f84:	20000904 	.word	0x20000904
 8001f88:	20000908 	.word	0x20000908
 8001f8c:	200008f8 	.word	0x200008f8
 8001f90:	51eb851f 	.word	0x51eb851f
 8001f94:	333f      	adds	r3, #63	; 0x3f
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	4622      	mov	r2, r4
 8001f9a:	f7ff f913 	bl	80011c4 <UC1609_DrawLine>
		UC1609_DrawLine(140 - dx - bx, 63 - 63 * pwm / 100, 140 - bx, 63);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	f06f 0373 	mvn.w	r3, #115	; 0x73
 8001fae:	1a9b      	subs	r3, r3, r2
 8001fb0:	b2d8      	uxtb	r0, r3
 8001fb2:	4b6d      	ldr	r3, [pc, #436]	; (8002168 <main+0x4e8>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	019b      	lsls	r3, r3, #6
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	4a6b      	ldr	r2, [pc, #428]	; (800216c <main+0x4ec>)
 8001fbe:	fb82 1203 	smull	r1, r2, r2, r3
 8001fc2:	1152      	asrs	r2, r2, #5
 8001fc4:	17db      	asrs	r3, r3, #31
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	333f      	adds	r3, #63	; 0x3f
 8001fcc:	b2d9      	uxtb	r1, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	f06f 0373 	mvn.w	r3, #115	; 0x73
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	233f      	movs	r3, #63	; 0x3f
 8001fdc:	f7ff f8f2 	bl	80011c4 <UC1609_DrawLine>

		voltage = 3.0f * 1479.0 * 100 / 31.3 / (float) adc[6];
 8001fe0:	4b63      	ldr	r3, [pc, #396]	; (8002170 <main+0x4f0>)
 8001fe2:	899b      	ldrh	r3, [r3, #12]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fe3a 	bl	8000c60 <__aeabi_ui2f>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fac6 	bl	8000580 <__aeabi_f2d>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	a159      	add	r1, pc, #356	; (adr r1, 8002160 <main+0x4e0>)
 8001ffa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ffe:	f7fe fc41 	bl	8000884 <__aeabi_ddiv>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4610      	mov	r0, r2
 8002008:	4619      	mov	r1, r3
 800200a:	f7fe fd23 	bl	8000a54 <__aeabi_d2f>
 800200e:	4603      	mov	r3, r0
 8002010:	4a58      	ldr	r2, [pc, #352]	; (8002174 <main+0x4f4>)
 8002012:	6013      	str	r3, [r2, #0]
		current = adc[5] * voltage / 4096.0;
 8002014:	4b56      	ldr	r3, [pc, #344]	; (8002170 <main+0x4f0>)
 8002016:	895b      	ldrh	r3, [r3, #10]
 8002018:	b29b      	uxth	r3, r3
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fe24 	bl	8000c68 <__aeabi_i2f>
 8002020:	4602      	mov	r2, r0
 8002022:	4b54      	ldr	r3, [pc, #336]	; (8002174 <main+0x4f4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4619      	mov	r1, r3
 8002028:	4610      	mov	r0, r2
 800202a:	f7fe f891 	bl	8000150 <__aeabi_fmul>
 800202e:	4603      	mov	r3, r0
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe faa5 	bl	8000580 <__aeabi_f2d>
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	4b4f      	ldr	r3, [pc, #316]	; (8002178 <main+0x4f8>)
 800203c:	f7fe fc22 	bl	8000884 <__aeabi_ddiv>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	f7fe fd04 	bl	8000a54 <__aeabi_d2f>
 800204c:	4603      	mov	r3, r0
 800204e:	4a4b      	ldr	r2, [pc, #300]	; (800217c <main+0x4fc>)
 8002050:	6013      	str	r3, [r2, #0]

		if (HAL_GetTick() - lastUpdate > 500) {
 8002052:	f000 fe9d 	bl	8002d90 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	4b49      	ldr	r3, [pc, #292]	; (8002180 <main+0x500>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002062:	d939      	bls.n	80020d8 <main+0x458>
			lastUpdate = HAL_GetTick();
 8002064:	f000 fe94 	bl	8002d90 <HAL_GetTick>
 8002068:	4603      	mov	r3, r0
 800206a:	4a45      	ldr	r2, [pc, #276]	; (8002180 <main+0x500>)
 800206c:	6013      	str	r3, [r2, #0]

			sprintf(string1, "%d %d", a, b);
 800206e:	4b45      	ldr	r3, [pc, #276]	; (8002184 <main+0x504>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4b45      	ldr	r3, [pc, #276]	; (8002188 <main+0x508>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4945      	ldr	r1, [pc, #276]	; (800218c <main+0x50c>)
 8002078:	4845      	ldr	r0, [pc, #276]	; (8002190 <main+0x510>)
 800207a:	f003 fc5f 	bl	800593c <siprintf>
			sprintf(string2, "%d %d", c, d);
 800207e:	4b45      	ldr	r3, [pc, #276]	; (8002194 <main+0x514>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4b45      	ldr	r3, [pc, #276]	; (8002198 <main+0x518>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4941      	ldr	r1, [pc, #260]	; (800218c <main+0x50c>)
 8002088:	4844      	ldr	r0, [pc, #272]	; (800219c <main+0x51c>)
 800208a:	f003 fc57 	bl	800593c <siprintf>
			sprintf(string3, "PWM:%d ", pwm);
 800208e:	4b36      	ldr	r3, [pc, #216]	; (8002168 <main+0x4e8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	4942      	ldr	r1, [pc, #264]	; (80021a0 <main+0x520>)
 8002096:	4843      	ldr	r0, [pc, #268]	; (80021a4 <main+0x524>)
 8002098:	f003 fc50 	bl	800593c <siprintf>
			sprintf(string4, "REV:%d ", revMeas);
 800209c:	4b42      	ldr	r3, [pc, #264]	; (80021a8 <main+0x528>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4942      	ldr	r1, [pc, #264]	; (80021ac <main+0x52c>)
 80020a4:	4842      	ldr	r0, [pc, #264]	; (80021b0 <main+0x530>)
 80020a6:	f003 fc49 	bl	800593c <siprintf>
			sprintf(string5, "I:%d", (int) (current * 100));
 80020aa:	4b34      	ldr	r3, [pc, #208]	; (800217c <main+0x4fc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4941      	ldr	r1, [pc, #260]	; (80021b4 <main+0x534>)
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe f84d 	bl	8000150 <__aeabi_fmul>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fe29 	bl	8000d10 <__aeabi_f2iz>
 80020be:	4603      	mov	r3, r0
 80020c0:	461a      	mov	r2, r3
 80020c2:	493d      	ldr	r1, [pc, #244]	; (80021b8 <main+0x538>)
 80020c4:	483d      	ldr	r0, [pc, #244]	; (80021bc <main+0x53c>)
 80020c6:	f003 fc39 	bl	800593c <siprintf>
			sprintf(string6, "P:%d", period);
 80020ca:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <main+0x540>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	493c      	ldr	r1, [pc, #240]	; (80021c4 <main+0x544>)
 80020d2:	483d      	ldr	r0, [pc, #244]	; (80021c8 <main+0x548>)
 80020d4:	f003 fc32 	bl	800593c <siprintf>
			//sprintf(botString, "1:%d,2:%d,3:%d,4:%d", period[0], period[1], period[2], period[3]);
		}

		UC1609_SetPos(24, 0);
 80020d8:	2100      	movs	r1, #0
 80020da:	2018      	movs	r0, #24
 80020dc:	f7fe ff1a 	bl	8000f14 <UC1609_SetPos>
		UC1609_PutString(string1);
 80020e0:	482b      	ldr	r0, [pc, #172]	; (8002190 <main+0x510>)
 80020e2:	f7fe ffe9 	bl	80010b8 <UC1609_PutString>
		UC1609_SetPos(24, 1);
 80020e6:	2101      	movs	r1, #1
 80020e8:	2018      	movs	r0, #24
 80020ea:	f7fe ff13 	bl	8000f14 <UC1609_SetPos>
		UC1609_PutString(string2);
 80020ee:	482b      	ldr	r0, [pc, #172]	; (800219c <main+0x51c>)
 80020f0:	f7fe ffe2 	bl	80010b8 <UC1609_PutString>
		UC1609_SetPos(24, 2);
 80020f4:	2102      	movs	r1, #2
 80020f6:	2018      	movs	r0, #24
 80020f8:	f7fe ff0c 	bl	8000f14 <UC1609_SetPos>
		UC1609_PutString(string3);
 80020fc:	4829      	ldr	r0, [pc, #164]	; (80021a4 <main+0x524>)
 80020fe:	f7fe ffdb 	bl	80010b8 <UC1609_PutString>
		UC1609_SetPos(24, 3);
 8002102:	2103      	movs	r1, #3
 8002104:	2018      	movs	r0, #24
 8002106:	f7fe ff05 	bl	8000f14 <UC1609_SetPos>
		UC1609_PutString(string4);
 800210a:	4829      	ldr	r0, [pc, #164]	; (80021b0 <main+0x530>)
 800210c:	f7fe ffd4 	bl	80010b8 <UC1609_PutString>
		UC1609_SetPos(24, 4);
 8002110:	2104      	movs	r1, #4
 8002112:	2018      	movs	r0, #24
 8002114:	f7fe fefe 	bl	8000f14 <UC1609_SetPos>
		UC1609_PutString(string5);
 8002118:	4828      	ldr	r0, [pc, #160]	; (80021bc <main+0x53c>)
 800211a:	f7fe ffcd 	bl	80010b8 <UC1609_PutString>
		UC1609_SetPos(24, 5);
 800211e:	2105      	movs	r1, #5
 8002120:	2018      	movs	r0, #24
 8002122:	f7fe fef7 	bl	8000f14 <UC1609_SetPos>
		UC1609_PutString(string6);
 8002126:	4828      	ldr	r0, [pc, #160]	; (80021c8 <main+0x548>)
 8002128:	f7fe ffc6 	bl	80010b8 <UC1609_PutString>
		UC1609_SetPos(24, 6);
 800212c:	2106      	movs	r1, #6
 800212e:	2018      	movs	r0, #24
 8002130:	f7fe fef0 	bl	8000f14 <UC1609_SetPos>
		UC1609_PutString(string7);
 8002134:	4825      	ldr	r0, [pc, #148]	; (80021cc <main+0x54c>)
 8002136:	f7fe ffbf 	bl	80010b8 <UC1609_PutString>
		UC1609_SetPos(0, 7);
 800213a:	2107      	movs	r1, #7
 800213c:	2000      	movs	r0, #0
 800213e:	f7fe fee9 	bl	8000f14 <UC1609_SetPos>
		UC1609_PutString(botString);
 8002142:	4823      	ldr	r0, [pc, #140]	; (80021d0 <main+0x550>)
 8002144:	f7fe ffb8 	bl	80010b8 <UC1609_PutString>
		UC1609_DrawDottedLine(140, 0, 140, 55);
 8002148:	2337      	movs	r3, #55	; 0x37
 800214a:	228c      	movs	r2, #140	; 0x8c
 800214c:	2100      	movs	r1, #0
 800214e:	208c      	movs	r0, #140	; 0x8c
 8002150:	f7ff f8bd 	bl	80012ce <UC1609_DrawDottedLine>
		UC1609_UpdateScreen();
 8002154:	f7fe ff00 	bl	8000f58 <UC1609_UpdateScreen>
	while (1) {
 8002158:	e5f7      	b.n	8001d4a <main+0xca>
 800215a:	bf00      	nop
 800215c:	f3af 8000 	nop.w
 8002160:	03458551 	.word	0x03458551
 8002164:	40cbafdc 	.word	0x40cbafdc
 8002168:	200008f8 	.word	0x200008f8
 800216c:	51eb851f 	.word	0x51eb851f
 8002170:	200008e8 	.word	0x200008e8
 8002174:	20000924 	.word	0x20000924
 8002178:	40b00000 	.word	0x40b00000
 800217c:	20000928 	.word	0x20000928
 8002180:	2000092c 	.word	0x2000092c
 8002184:	200008fc 	.word	0x200008fc
 8002188:	20000900 	.word	0x20000900
 800218c:	0800622c 	.word	0x0800622c
 8002190:	20000828 	.word	0x20000828
 8002194:	20000904 	.word	0x20000904
 8002198:	20000908 	.word	0x20000908
 800219c:	20000840 	.word	0x20000840
 80021a0:	08006234 	.word	0x08006234
 80021a4:	20000858 	.word	0x20000858
 80021a8:	2000090c 	.word	0x2000090c
 80021ac:	0800623c 	.word	0x0800623c
 80021b0:	20000870 	.word	0x20000870
 80021b4:	42c80000 	.word	0x42c80000
 80021b8:	08006244 	.word	0x08006244
 80021bc:	20000888 	.word	0x20000888
 80021c0:	20000000 	.word	0x20000000
 80021c4:	0800624c 	.word	0x0800624c
 80021c8:	200008a0 	.word	0x200008a0
 80021cc:	200008b8 	.word	0x200008b8
 80021d0:	200008d0 	.word	0x200008d0

080021d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b094      	sub	sp, #80	; 0x50
 80021d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80021da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021de:	2228      	movs	r2, #40	; 0x28
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f003 fba2 	bl	800592c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002204:	2301      	movs	r3, #1
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800220e:	2300      	movs	r3, #0
 8002210:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002212:	2301      	movs	r3, #1
 8002214:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002216:	2302      	movs	r3, #2
 8002218:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800221a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800221e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002220:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002224:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800222a:	4618      	mov	r0, r3
 800222c:	f001 f898 	bl	8003360 <HAL_RCC_OscConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <SystemClock_Config+0x66>
		Error_Handler();
 8002236:	f000 fb0b 	bl	8002850 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800223a:	230f      	movs	r3, #15
 800223c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223e:	2302      	movs	r3, #2
 8002240:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800224a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	2102      	movs	r1, #2
 8002256:	4618      	mov	r0, r3
 8002258:	f001 fb04 	bl	8003864 <HAL_RCC_ClockConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <SystemClock_Config+0x92>
		Error_Handler();
 8002262:	f000 faf5 	bl	8002850 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002266:	2302      	movs	r3, #2
 8002268:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800226a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800226e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	4618      	mov	r0, r3
 8002274:	f001 fc8e 	bl	8003b94 <HAL_RCCEx_PeriphCLKConfig>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <SystemClock_Config+0xae>
		Error_Handler();
 800227e:	f000 fae7 	bl	8002850 <Error_Handler>
	}
}
 8002282:	bf00      	nop
 8002284:	3750      	adds	r7, #80	; 0x50
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b08e      	sub	sp, #56	; 0x38
 8002290:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	LL_ADC_InitTypeDef ADC_InitStruct = { 0 };
 8002292:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
	LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = { 0 };
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = { 0 };
 80022a0:	f107 0318 	add.w	r3, r7, #24
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	60da      	str	r2, [r3, #12]
 80022bc:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80022be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022c2:	f7ff fbaf 	bl	8001a24 <LL_APB2_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80022c6:	2004      	movs	r0, #4
 80022c8:	f7ff fbac 	bl	8001a24 <LL_APB2_GRP1_EnableClock>
	 PA2   ------> ADC1_IN2
	 PA3   ------> ADC1_IN3
	 PA4   ------> ADC1_IN4
	 PA6   ------> ADC1_IN6
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2
 80022cc:	f645 735f 	movw	r3, #24415	; 0x5f5f
 80022d0:	607b      	str	r3, [r7, #4]
			| LL_GPIO_PIN_3 | LL_GPIO_PIN_4 | LL_GPIO_PIN_6;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	4619      	mov	r1, r3
 80022da:	4853      	ldr	r0, [pc, #332]	; (8002428 <MX_ADC1_Init+0x19c>)
 80022dc:	f003 fa87 	bl	80057ee <LL_GPIO_Init>

	/* ADC1 DMA Init */

	/* ADC1 Init */
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1,
 80022e0:	2200      	movs	r2, #0
 80022e2:	2101      	movs	r1, #1
 80022e4:	4851      	ldr	r0, [pc, #324]	; (800242c <MX_ADC1_Init+0x1a0>)
 80022e6:	f7ff f9fd 	bl	80016e4 <LL_DMA_SetDataTransferDirection>
			LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1,
 80022ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ee:	2101      	movs	r1, #1
 80022f0:	484e      	ldr	r0, [pc, #312]	; (800242c <MX_ADC1_Init+0x1a0>)
 80022f2:	f7ff fac5 	bl	8001880 <LL_DMA_SetChannelPriorityLevel>
			LL_DMA_PRIORITY_HIGH);

	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 80022f6:	2220      	movs	r2, #32
 80022f8:	2101      	movs	r1, #1
 80022fa:	484c      	ldr	r0, [pc, #304]	; (800242c <MX_ADC1_Init+0x1a0>)
 80022fc:	f7ff fa16 	bl	800172c <LL_DMA_SetMode>

	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8002300:	2200      	movs	r2, #0
 8002302:	2101      	movs	r1, #1
 8002304:	4849      	ldr	r0, [pc, #292]	; (800242c <MX_ADC1_Init+0x1a0>)
 8002306:	f7ff fa33 	bl	8001770 <LL_DMA_SetPeriphIncMode>

	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	2101      	movs	r1, #1
 800230e:	4847      	ldr	r0, [pc, #284]	; (800242c <MX_ADC1_Init+0x1a0>)
 8002310:	f7ff fa50 	bl	80017b4 <LL_DMA_SetMemoryIncMode>

	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8002314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002318:	2101      	movs	r1, #1
 800231a:	4844      	ldr	r0, [pc, #272]	; (800242c <MX_ADC1_Init+0x1a0>)
 800231c:	f7ff fa6c 	bl	80017f8 <LL_DMA_SetPeriphSize>

	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8002320:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002324:	2101      	movs	r1, #1
 8002326:	4841      	ldr	r0, [pc, #260]	; (800242c <MX_ADC1_Init+0x1a0>)
 8002328:	f7ff fa88 	bl	800183c <LL_DMA_SetMemorySize>
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800232c:	2300      	movs	r3, #0
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
	ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8002330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002334:	637b      	str	r3, [r7, #52]	; 0x34
	LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002336:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800233a:	4619      	mov	r1, r3
 800233c:	483c      	ldr	r0, [pc, #240]	; (8002430 <MX_ADC1_Init+0x1a4>)
 800233e:	f003 f931 	bl	80055a4 <LL_ADC_Init>
	ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002342:	2300      	movs	r3, #0
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002346:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800234a:	4619      	mov	r1, r3
 800234c:	4838      	ldr	r0, [pc, #224]	; (8002430 <MX_ADC1_Init+0x1a4>)
 800234e:	f003 f8f7 	bl	8005540 <LL_ADC_CommonInit>
	ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002352:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8002356:	61bb      	str	r3, [r7, #24]
	ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS;
 8002358:	f44f 03c0 	mov.w	r3, #6291456	; 0x600000
 800235c:	61fb      	str	r3, [r7, #28]
	ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	623b      	str	r3, [r7, #32]
	ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8002362:	2302      	movs	r3, #2
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
	ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8002366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
	LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800236c:	f107 0318 	add.w	r3, r7, #24
 8002370:	4619      	mov	r1, r3
 8002372:	482f      	ldr	r0, [pc, #188]	; (8002430 <MX_ADC1_Init+0x1a4>)
 8002374:	f003 f93d 	bl	80055f2 <LL_ADC_REG_Init>
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8002378:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800237c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002380:	482b      	ldr	r0, [pc, #172]	; (8002430 <MX_ADC1_Init+0x1a4>)
 8002382:	f7ff f8bf 	bl	8001504 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0,
 8002386:	2207      	movs	r2, #7
 8002388:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800238c:	4828      	ldr	r0, [pc, #160]	; (8002430 <MX_ADC1_Init+0x1a4>)
 800238e:	f7ff f8ee 	bl	800156e <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_239CYCLES_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8002392:	4a28      	ldr	r2, [pc, #160]	; (8002434 <MX_ADC1_Init+0x1a8>)
 8002394:	f240 2105 	movw	r1, #517	; 0x205
 8002398:	4825      	ldr	r0, [pc, #148]	; (8002430 <MX_ADC1_Init+0x1a4>)
 800239a:	f7ff f8b3 	bl	8001504 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1,
 800239e:	2207      	movs	r2, #7
 80023a0:	4924      	ldr	r1, [pc, #144]	; (8002434 <MX_ADC1_Init+0x1a8>)
 80023a2:	4823      	ldr	r0, [pc, #140]	; (8002430 <MX_ADC1_Init+0x1a4>)
 80023a4:	f7ff f8e3 	bl	800156e <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_239CYCLES_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 80023a8:	4a23      	ldr	r2, [pc, #140]	; (8002438 <MX_ADC1_Init+0x1ac>)
 80023aa:	f240 210a 	movw	r1, #522	; 0x20a
 80023ae:	4820      	ldr	r0, [pc, #128]	; (8002430 <MX_ADC1_Init+0x1a4>)
 80023b0:	f7ff f8a8 	bl	8001504 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2,
 80023b4:	2207      	movs	r2, #7
 80023b6:	4920      	ldr	r1, [pc, #128]	; (8002438 <MX_ADC1_Init+0x1ac>)
 80023b8:	481d      	ldr	r0, [pc, #116]	; (8002430 <MX_ADC1_Init+0x1a4>)
 80023ba:	f7ff f8d8 	bl	800156e <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_239CYCLES_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 80023be:	4a1f      	ldr	r2, [pc, #124]	; (800243c <MX_ADC1_Init+0x1b0>)
 80023c0:	f240 210f 	movw	r1, #527	; 0x20f
 80023c4:	481a      	ldr	r0, [pc, #104]	; (8002430 <MX_ADC1_Init+0x1a4>)
 80023c6:	f7ff f89d 	bl	8001504 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3,
 80023ca:	2207      	movs	r2, #7
 80023cc:	491b      	ldr	r1, [pc, #108]	; (800243c <MX_ADC1_Init+0x1b0>)
 80023ce:	4818      	ldr	r0, [pc, #96]	; (8002430 <MX_ADC1_Init+0x1a4>)
 80023d0:	f7ff f8cd 	bl	800156e <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_239CYCLES_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 80023d4:	4a1a      	ldr	r2, [pc, #104]	; (8002440 <MX_ADC1_Init+0x1b4>)
 80023d6:	f44f 7105 	mov.w	r1, #532	; 0x214
 80023da:	4815      	ldr	r0, [pc, #84]	; (8002430 <MX_ADC1_Init+0x1a4>)
 80023dc:	f7ff f892 	bl	8001504 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4,
 80023e0:	2207      	movs	r2, #7
 80023e2:	4917      	ldr	r1, [pc, #92]	; (8002440 <MX_ADC1_Init+0x1b4>)
 80023e4:	4812      	ldr	r0, [pc, #72]	; (8002430 <MX_ADC1_Init+0x1a4>)
 80023e6:	f7ff f8c2 	bl	800156e <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_239CYCLES_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_6);
 80023ea:	4a16      	ldr	r2, [pc, #88]	; (8002444 <MX_ADC1_Init+0x1b8>)
 80023ec:	f240 2119 	movw	r1, #537	; 0x219
 80023f0:	480f      	ldr	r0, [pc, #60]	; (8002430 <MX_ADC1_Init+0x1a4>)
 80023f2:	f7ff f887 	bl	8001504 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6,
 80023f6:	2207      	movs	r2, #7
 80023f8:	4912      	ldr	r1, [pc, #72]	; (8002444 <MX_ADC1_Init+0x1b8>)
 80023fa:	480d      	ldr	r0, [pc, #52]	; (8002430 <MX_ADC1_Init+0x1a4>)
 80023fc:	f7ff f8b7 	bl	800156e <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_239CYCLES_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7,
 8002400:	4a11      	ldr	r2, [pc, #68]	; (8002448 <MX_ADC1_Init+0x1bc>)
 8002402:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002406:	480a      	ldr	r0, [pc, #40]	; (8002430 <MX_ADC1_Init+0x1a4>)
 8002408:	f7ff f87c 	bl	8001504 <LL_ADC_REG_SetSequencerRanks>
			LL_ADC_CHANNEL_VREFINT);
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT,
 800240c:	2207      	movs	r2, #7
 800240e:	490e      	ldr	r1, [pc, #56]	; (8002448 <MX_ADC1_Init+0x1bc>)
 8002410:	4807      	ldr	r0, [pc, #28]	; (8002430 <MX_ADC1_Init+0x1a4>)
 8002412:	f7ff f8ac 	bl	800156e <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_239CYCLES_5);
	LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1),
 8002416:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800241a:	4805      	ldr	r0, [pc, #20]	; (8002430 <MX_ADC1_Init+0x1a4>)
 800241c:	f7ff f860 	bl	80014e0 <LL_ADC_SetCommonPathInternalCh>
			LL_ADC_PATH_INTERNAL_VREFINT);
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002420:	bf00      	nop
 8002422:	3738      	adds	r7, #56	; 0x38
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40010800 	.word	0x40010800
 800242c:	40020000 	.word	0x40020000
 8002430:	40012400 	.word	0x40012400
 8002434:	02300001 	.word	0x02300001
 8002438:	02600002 	.word	0x02600002
 800243c:	02900003 	.word	0x02900003
 8002440:	02c00004 	.word	0x02c00004
 8002444:	03200006 	.word	0x03200006
 8002448:	81500011 	.word	0x81500011

0800244c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002452:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <MX_SPI1_Init+0x68>)
 8002454:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002458:	f44f 7282 	mov.w	r2, #260	; 0x104
 800245c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <MX_SPI1_Init+0x64>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002472:	2200      	movs	r2, #0
 8002474:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800247c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002480:	2210      	movs	r2, #16
 8002482:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002486:	2200      	movs	r2, #0
 8002488:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <MX_SPI1_Init+0x64>)
 800248c:	2200      	movs	r2, #0
 800248e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002492:	2200      	movs	r2, #0
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002498:	220a      	movs	r2, #10
 800249a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800249c:	4804      	ldr	r0, [pc, #16]	; (80024b0 <MX_SPI1_Init+0x64>)
 800249e:	f001 fc2f 	bl	8003d00 <HAL_SPI_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_SPI1_Init+0x60>
		Error_Handler();
 80024a8:	f000 f9d2 	bl	8002850 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	200006b4 	.word	0x200006b4
 80024b4:	40013000 	.word	0x40013000

080024b8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b092      	sub	sp, #72	; 0x48
 80024bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80024be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80024c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
 80024d8:	615a      	str	r2, [r3, #20]
 80024da:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	2220      	movs	r2, #32
 80024e0:	2100      	movs	r1, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f003 fa22 	bl	800592c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80024e8:	4b32      	ldr	r3, [pc, #200]	; (80025b4 <MX_TIM1_Init+0xfc>)
 80024ea:	4a33      	ldr	r2, [pc, #204]	; (80025b8 <MX_TIM1_Init+0x100>)
 80024ec:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 20;
 80024ee:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <MX_TIM1_Init+0xfc>)
 80024f0:	2214      	movs	r2, #20
 80024f2:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f4:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <MX_TIM1_Init+0xfc>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 99;
 80024fa:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <MX_TIM1_Init+0xfc>)
 80024fc:	2263      	movs	r2, #99	; 0x63
 80024fe:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002500:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <MX_TIM1_Init+0xfc>)
 8002502:	2200      	movs	r2, #0
 8002504:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002506:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <MX_TIM1_Init+0xfc>)
 8002508:	2200      	movs	r2, #0
 800250a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250c:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <MX_TIM1_Init+0xfc>)
 800250e:	2200      	movs	r2, #0
 8002510:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002512:	4828      	ldr	r0, [pc, #160]	; (80025b4 <MX_TIM1_Init+0xfc>)
 8002514:	f001 fef6 	bl	8004304 <HAL_TIM_PWM_Init>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_TIM1_Init+0x6a>
		Error_Handler();
 800251e:	f000 f997 	bl	8002850 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800252a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800252e:	4619      	mov	r1, r3
 8002530:	4820      	ldr	r0, [pc, #128]	; (80025b4 <MX_TIM1_Init+0xfc>)
 8002532:	f002 fe4b 	bl	80051cc <HAL_TIMEx_MasterConfigSynchronization>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM1_Init+0x88>
			!= HAL_OK) {
		Error_Handler();
 800253c:	f000 f988 	bl	8002850 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002540:	2360      	movs	r3, #96	; 0x60
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002548:	2300      	movs	r3, #0
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800254c:	2300      	movs	r3, #0
 800254e:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002554:	2300      	movs	r3, #0
 8002556:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002558:	2300      	movs	r3, #0
 800255a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800255c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002560:	2200      	movs	r2, #0
 8002562:	4619      	mov	r1, r3
 8002564:	4813      	ldr	r0, [pc, #76]	; (80025b4 <MX_TIM1_Init+0xfc>)
 8002566:	f002 f9f1 	bl	800494c <HAL_TIM_PWM_ConfigChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM1_Init+0xbc>
			!= HAL_OK) {
		Error_Handler();
 8002570:	f000 f96e 	bl	8002850 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	4619      	mov	r1, r3
 8002596:	4807      	ldr	r0, [pc, #28]	; (80025b4 <MX_TIM1_Init+0xfc>)
 8002598:	f002 fe70 	bl	800527c <HAL_TIMEx_ConfigBreakDeadTime>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM1_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 80025a2:	f000 f955 	bl	8002850 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80025a6:	4803      	ldr	r0, [pc, #12]	; (80025b4 <MX_TIM1_Init+0xfc>)
 80025a8:	f000 fa78 	bl	8002a9c <HAL_TIM_MspPostInit>

}
 80025ac:	bf00      	nop
 80025ae:	3748      	adds	r7, #72	; 0x48
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	2000070c 	.word	0x2000070c
 80025b8:	40012c00 	.word	0x40012c00

080025bc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08c      	sub	sp, #48	; 0x30
 80025c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80025c2:	f107 030c 	add.w	r3, r7, #12
 80025c6:	2224      	movs	r2, #36	; 0x24
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 f9ae 	bl	800592c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80025d8:	4b21      	ldr	r3, [pc, #132]	; (8002660 <MX_TIM2_Init+0xa4>)
 80025da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025de:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80025e0:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <MX_TIM2_Init+0xa4>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e6:	4b1e      	ldr	r3, [pc, #120]	; (8002660 <MX_TIM2_Init+0xa4>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80025ec:	4b1c      	ldr	r3, [pc, #112]	; (8002660 <MX_TIM2_Init+0xa4>)
 80025ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f4:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <MX_TIM2_Init+0xa4>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fa:	4b19      	ldr	r3, [pc, #100]	; (8002660 <MX_TIM2_Init+0xa4>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002600:	2301      	movs	r3, #1
 8002602:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002608:	2301      	movs	r3, #1
 800260a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800260c:	2300      	movs	r3, #0
 800260e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 6;
 8002610:	2306      	movs	r3, #6
 8002612:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002614:	2300      	movs	r3, #0
 8002616:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002618:	2301      	movs	r3, #1
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 800261c:	2304      	movs	r3, #4
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 6;
 8002620:	2306      	movs	r3, #6
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8002624:	f107 030c 	add.w	r3, r7, #12
 8002628:	4619      	mov	r1, r3
 800262a:	480d      	ldr	r0, [pc, #52]	; (8002660 <MX_TIM2_Init+0xa4>)
 800262c:	f001 ff56 	bl	80044dc <HAL_TIM_Encoder_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM2_Init+0x7e>
		Error_Handler();
 8002636:	f000 f90b 	bl	8002850 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	4619      	mov	r1, r3
 8002646:	4806      	ldr	r0, [pc, #24]	; (8002660 <MX_TIM2_Init+0xa4>)
 8002648:	f002 fdc0 	bl	80051cc <HAL_TIMEx_MasterConfigSynchronization>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8002652:	f000 f8fd 	bl	8002850 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	3730      	adds	r7, #48	; 0x30
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000754 	.word	0x20000754

08002664 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002678:	463b      	mov	r3, r7
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002680:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <MX_TIM3_Init+0x94>)
 8002682:	4a1e      	ldr	r2, [pc, #120]	; (80026fc <MX_TIM3_Init+0x98>)
 8002684:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 720;
 8002686:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <MX_TIM3_Init+0x94>)
 8002688:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800268c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <MX_TIM3_Init+0x94>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 9;
 8002694:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <MX_TIM3_Init+0x94>)
 8002696:	2209      	movs	r2, #9
 8002698:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <MX_TIM3_Init+0x94>)
 800269c:	2200      	movs	r2, #0
 800269e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a0:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <MX_TIM3_Init+0x94>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80026a6:	4814      	ldr	r0, [pc, #80]	; (80026f8 <MX_TIM3_Init+0x94>)
 80026a8:	f001 fd90 	bl	80041cc <HAL_TIM_Base_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_TIM3_Init+0x52>
		Error_Handler();
 80026b2:	f000 f8cd 	bl	8002850 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ba:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80026bc:	f107 0308 	add.w	r3, r7, #8
 80026c0:	4619      	mov	r1, r3
 80026c2:	480d      	ldr	r0, [pc, #52]	; (80026f8 <MX_TIM3_Init+0x94>)
 80026c4:	f002 fa00 	bl	8004ac8 <HAL_TIM_ConfigClockSource>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM3_Init+0x6e>
		Error_Handler();
 80026ce:	f000 f8bf 	bl	8002850 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80026da:	463b      	mov	r3, r7
 80026dc:	4619      	mov	r1, r3
 80026de:	4806      	ldr	r0, [pc, #24]	; (80026f8 <MX_TIM3_Init+0x94>)
 80026e0:	f002 fd74 	bl	80051cc <HAL_TIMEx_MasterConfigSynchronization>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80026ea:	f000 f8b1 	bl	8002850 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	2000079c 	.word	0x2000079c
 80026fc:	40000400 	.word	0x40000400

08002700 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <MX_USART1_UART_Init+0x4c>)
 8002706:	4a12      	ldr	r2, [pc, #72]	; (8002750 <MX_USART1_UART_Init+0x50>)
 8002708:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <MX_USART1_UART_Init+0x4c>)
 800270c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002710:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <MX_USART1_UART_Init+0x4c>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <MX_USART1_UART_Init+0x4c>)
 800271a:	2200      	movs	r2, #0
 800271c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <MX_USART1_UART_Init+0x4c>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <MX_USART1_UART_Init+0x4c>)
 8002726:	220c      	movs	r2, #12
 8002728:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <MX_USART1_UART_Init+0x4c>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <MX_USART1_UART_Init+0x4c>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002736:	4805      	ldr	r0, [pc, #20]	; (800274c <MX_USART1_UART_Init+0x4c>)
 8002738:	f002 fe03 	bl	8005342 <HAL_UART_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002742:	f000 f885 	bl	8002850 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200007e4 	.word	0x200007e4
 8002750:	40013800 	.word	0x40013800

08002754 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0

	/* Init with LL driver */
	/* DMA controller clock enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002758:	2001      	movs	r0, #1
 800275a:	f7ff f94b 	bl	80019f4 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	NVIC_SetPriority(DMA1_Channel1_IRQn,
 800275e:	f7fe fe21 	bl	80013a4 <__NVIC_GetPriorityGrouping>
 8002762:	4603      	mov	r3, r0
 8002764:	2200      	movs	r2, #0
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f7fe fe6f 	bl	800144c <NVIC_EncodePriority>
 800276e:	4603      	mov	r3, r0
 8002770:	4619      	mov	r1, r3
 8002772:	200b      	movs	r0, #11
 8002774:	f7fe fe40 	bl	80013f8 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002778:	200b      	movs	r0, #11
 800277a:	f7fe fe21 	bl	80013c0 <__NVIC_EnableIRQ>

}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800278a:	f107 0310 	add.w	r3, r7, #16
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002798:	4b2b      	ldr	r3, [pc, #172]	; (8002848 <MX_GPIO_Init+0xc4>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	4a2a      	ldr	r2, [pc, #168]	; (8002848 <MX_GPIO_Init+0xc4>)
 800279e:	f043 0320 	orr.w	r3, r3, #32
 80027a2:	6193      	str	r3, [r2, #24]
 80027a4:	4b28      	ldr	r3, [pc, #160]	; (8002848 <MX_GPIO_Init+0xc4>)
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80027b0:	4b25      	ldr	r3, [pc, #148]	; (8002848 <MX_GPIO_Init+0xc4>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	4a24      	ldr	r2, [pc, #144]	; (8002848 <MX_GPIO_Init+0xc4>)
 80027b6:	f043 0304 	orr.w	r3, r3, #4
 80027ba:	6193      	str	r3, [r2, #24]
 80027bc:	4b22      	ldr	r3, [pc, #136]	; (8002848 <MX_GPIO_Init+0xc4>)
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80027c8:	4b1f      	ldr	r3, [pc, #124]	; (8002848 <MX_GPIO_Init+0xc4>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	4a1e      	ldr	r2, [pc, #120]	; (8002848 <MX_GPIO_Init+0xc4>)
 80027ce:	f043 0308 	orr.w	r3, r3, #8
 80027d2:	6193      	str	r3, [r2, #24]
 80027d4:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <MX_GPIO_Init+0xc4>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin | LCD_CS_Pin | LCD_DC_Pin,
 80027e0:	2200      	movs	r2, #0
 80027e2:	f640 4102 	movw	r1, #3074	; 0xc02
 80027e6:	4819      	ldr	r0, [pc, #100]	; (800284c <MX_GPIO_Init+0xc8>)
 80027e8:	f000 fda1 	bl	800332e <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : HALL_Pin ENC_BUT_Pin */
	GPIO_InitStruct.Pin = HALL_Pin | ENC_BUT_Pin;
 80027ec:	2311      	movs	r3, #17
 80027ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027f4:	2301      	movs	r3, #1
 80027f6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f8:	f107 0310 	add.w	r3, r7, #16
 80027fc:	4619      	mov	r1, r3
 80027fe:	4813      	ldr	r0, [pc, #76]	; (800284c <MX_GPIO_Init+0xc8>)
 8002800:	f000 fc02 	bl	8003008 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_RESET_Pin */
	GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8002804:	2302      	movs	r3, #2
 8002806:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002808:	2301      	movs	r3, #1
 800280a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2302      	movs	r3, #2
 8002812:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8002814:	f107 0310 	add.w	r3, r7, #16
 8002818:	4619      	mov	r1, r3
 800281a:	480c      	ldr	r0, [pc, #48]	; (800284c <MX_GPIO_Init+0xc8>)
 800281c:	f000 fbf4 	bl	8003008 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
	GPIO_InitStruct.Pin = LCD_CS_Pin | LCD_DC_Pin;
 8002820:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002824:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002826:	2301      	movs	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800282e:	2303      	movs	r3, #3
 8002830:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002832:	f107 0310 	add.w	r3, r7, #16
 8002836:	4619      	mov	r1, r3
 8002838:	4804      	ldr	r0, [pc, #16]	; (800284c <MX_GPIO_Init+0xc8>)
 800283a:	f000 fbe5 	bl	8003008 <HAL_GPIO_Init>

}
 800283e:	bf00      	nop
 8002840:	3720      	adds	r7, #32
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	40010c00 	.word	0x40010c00

08002850 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002854:	b672      	cpsid	i
}
 8002856:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002858:	e7fe      	b.n	8002858 <Error_Handler+0x8>
	...

0800285c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <HAL_MspInit+0x5c>)
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_MspInit+0x5c>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6193      	str	r3, [r2, #24]
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_MspInit+0x5c>)
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <HAL_MspInit+0x5c>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	4a0e      	ldr	r2, [pc, #56]	; (80028b8 <HAL_MspInit+0x5c>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002884:	61d3      	str	r3, [r2, #28]
 8002886:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <HAL_MspInit+0x5c>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_MspInit+0x60>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <HAL_MspInit+0x60>)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40010000 	.word	0x40010000

080028c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 0310 	add.w	r3, r7, #16
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a15      	ldr	r2, [pc, #84]	; (8002930 <HAL_SPI_MspInit+0x70>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d123      	bne.n	8002928 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <HAL_SPI_MspInit+0x74>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	4a13      	ldr	r2, [pc, #76]	; (8002934 <HAL_SPI_MspInit+0x74>)
 80028e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028ea:	6193      	str	r3, [r2, #24]
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <HAL_SPI_MspInit+0x74>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <HAL_SPI_MspInit+0x74>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	4a0d      	ldr	r2, [pc, #52]	; (8002934 <HAL_SPI_MspInit+0x74>)
 80028fe:	f043 0304 	orr.w	r3, r3, #4
 8002902:	6193      	str	r3, [r2, #24]
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_SPI_MspInit+0x74>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002910:	23a0      	movs	r3, #160	; 0xa0
 8002912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002918:	2303      	movs	r3, #3
 800291a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291c:	f107 0310 	add.w	r3, r7, #16
 8002920:	4619      	mov	r1, r3
 8002922:	4805      	ldr	r0, [pc, #20]	; (8002938 <HAL_SPI_MspInit+0x78>)
 8002924:	f000 fb70 	bl	8003008 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002928:	bf00      	nop
 800292a:	3720      	adds	r7, #32
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40013000 	.word	0x40013000
 8002934:	40021000 	.word	0x40021000
 8002938:	40010800 	.word	0x40010800

0800293c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a09      	ldr	r2, [pc, #36]	; (8002970 <HAL_TIM_PWM_MspInit+0x34>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10b      	bne.n	8002966 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <HAL_TIM_PWM_MspInit+0x38>)
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	4a08      	ldr	r2, [pc, #32]	; (8002974 <HAL_TIM_PWM_MspInit+0x38>)
 8002954:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002958:	6193      	str	r3, [r2, #24]
 800295a:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_TIM_PWM_MspInit+0x38>)
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr
 8002970:	40012c00 	.word	0x40012c00
 8002974:	40021000 	.word	0x40021000

08002978 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	; 0x28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002996:	d14e      	bne.n	8002a36 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002998:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <HAL_TIM_Encoder_MspInit+0xc8>)
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	4a28      	ldr	r2, [pc, #160]	; (8002a40 <HAL_TIM_Encoder_MspInit+0xc8>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	61d3      	str	r3, [r2, #28]
 80029a4:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <HAL_TIM_Encoder_MspInit+0xc8>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b0:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <HAL_TIM_Encoder_MspInit+0xc8>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <HAL_TIM_Encoder_MspInit+0xc8>)
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	6193      	str	r3, [r2, #24]
 80029bc:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <HAL_TIM_Encoder_MspInit+0xc8>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c8:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <HAL_TIM_Encoder_MspInit+0xc8>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	4a1c      	ldr	r2, [pc, #112]	; (8002a40 <HAL_TIM_Encoder_MspInit+0xc8>)
 80029ce:	f043 0308 	orr.w	r3, r3, #8
 80029d2:	6193      	str	r3, [r2, #24]
 80029d4:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <HAL_TIM_Encoder_MspInit+0xc8>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ea:	2301      	movs	r3, #1
 80029ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	4619      	mov	r1, r3
 80029f4:	4813      	ldr	r0, [pc, #76]	; (8002a44 <HAL_TIM_Encoder_MspInit+0xcc>)
 80029f6:	f000 fb07 	bl	8003008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029fa:	2308      	movs	r3, #8
 80029fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a02:	2301      	movs	r3, #1
 8002a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a06:	f107 0314 	add.w	r3, r7, #20
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	480e      	ldr	r0, [pc, #56]	; (8002a48 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002a0e:	f000 fafb 	bl	8003008 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002a12:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a30:	4a06      	ldr	r2, [pc, #24]	; (8002a4c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a36:	bf00      	nop
 8002a38:	3728      	adds	r7, #40	; 0x28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40010800 	.word	0x40010800
 8002a48:	40010c00 	.word	0x40010c00
 8002a4c:	40010000 	.word	0x40010000

08002a50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0d      	ldr	r2, [pc, #52]	; (8002a94 <HAL_TIM_Base_MspInit+0x44>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d113      	bne.n	8002a8a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <HAL_TIM_Base_MspInit+0x48>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <HAL_TIM_Base_MspInit+0x48>)
 8002a68:	f043 0302 	orr.w	r3, r3, #2
 8002a6c:	61d3      	str	r3, [r2, #28]
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_TIM_Base_MspInit+0x48>)
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	201d      	movs	r0, #29
 8002a80:	f000 fa8b 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a84:	201d      	movs	r0, #29
 8002a86:	f000 faa4 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40000400 	.word	0x40000400
 8002a98:	40021000 	.word	0x40021000

08002a9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 0310 	add.w	r3, r7, #16
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a10      	ldr	r2, [pc, #64]	; (8002af8 <HAL_TIM_MspPostInit+0x5c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d118      	bne.n	8002aee <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002abc:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <HAL_TIM_MspPostInit+0x60>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	4a0e      	ldr	r2, [pc, #56]	; (8002afc <HAL_TIM_MspPostInit+0x60>)
 8002ac2:	f043 0304 	orr.w	r3, r3, #4
 8002ac6:	6193      	str	r3, [r2, #24]
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <HAL_TIM_MspPostInit+0x60>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ad8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae2:	f107 0310 	add.w	r3, r7, #16
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4805      	ldr	r0, [pc, #20]	; (8002b00 <HAL_TIM_MspPostInit+0x64>)
 8002aea:	f000 fa8d 	bl	8003008 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002aee:	bf00      	nop
 8002af0:	3720      	adds	r7, #32
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40012c00 	.word	0x40012c00
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40010800 	.word	0x40010800

08002b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0c:	f107 0310 	add.w	r3, r7, #16
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <HAL_UART_MspInit+0x8c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d131      	bne.n	8002b88 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b24:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <HAL_UART_MspInit+0x90>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	4a1a      	ldr	r2, [pc, #104]	; (8002b94 <HAL_UART_MspInit+0x90>)
 8002b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b2e:	6193      	str	r3, [r2, #24]
 8002b30:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <HAL_UART_MspInit+0x90>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3c:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <HAL_UART_MspInit+0x90>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <HAL_UART_MspInit+0x90>)
 8002b42:	f043 0304 	orr.w	r3, r3, #4
 8002b46:	6193      	str	r3, [r2, #24]
 8002b48:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <HAL_UART_MspInit+0x90>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b62:	f107 0310 	add.w	r3, r7, #16
 8002b66:	4619      	mov	r1, r3
 8002b68:	480b      	ldr	r0, [pc, #44]	; (8002b98 <HAL_UART_MspInit+0x94>)
 8002b6a:	f000 fa4d 	bl	8003008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7c:	f107 0310 	add.w	r3, r7, #16
 8002b80:	4619      	mov	r1, r3
 8002b82:	4805      	ldr	r0, [pc, #20]	; (8002b98 <HAL_UART_MspInit+0x94>)
 8002b84:	f000 fa40 	bl	8003008 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b88:	bf00      	nop
 8002b8a:	3720      	adds	r7, #32
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40013800 	.word	0x40013800
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40010800 	.word	0x40010800

08002b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ba0:	e7fe      	b.n	8002ba0 <NMI_Handler+0x4>

08002ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ba6:	e7fe      	b.n	8002ba6 <HardFault_Handler+0x4>

08002ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bac:	e7fe      	b.n	8002bac <MemManage_Handler+0x4>

08002bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bb2:	e7fe      	b.n	8002bb2 <BusFault_Handler+0x4>

08002bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bb8:	e7fe      	b.n	8002bb8 <UsageFault_Handler+0x4>

08002bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002be2:	f000 f8c3 	bl	8002d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
DMA1->IFCR|=DMA_IFCR_CGIF1_Msk;
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <DMA1_Channel1_IRQHandler+0x18>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4a03      	ldr	r2, [pc, #12]	; (8002c04 <DMA1_Channel1_IRQHandler+0x18>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	6053      	str	r3, [r2, #4]
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	40020000 	.word	0x40020000

08002c08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c0c:	4802      	ldr	r0, [pc, #8]	; (8002c18 <TIM3_IRQHandler+0x10>)
 8002c0e:	f001 fd95 	bl	800473c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	2000079c 	.word	0x2000079c

08002c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <_sbrk+0x5c>)
 8002c26:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <_sbrk+0x60>)
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c30:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <_sbrk+0x64>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d102      	bne.n	8002c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <_sbrk+0x64>)
 8002c3a:	4a12      	ldr	r2, [pc, #72]	; (8002c84 <_sbrk+0x68>)
 8002c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <_sbrk+0x64>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d207      	bcs.n	8002c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c4c:	f002 fe36 	bl	80058bc <__errno>
 8002c50:	4603      	mov	r3, r0
 8002c52:	220c      	movs	r2, #12
 8002c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c56:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5a:	e009      	b.n	8002c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <_sbrk+0x64>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <_sbrk+0x64>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	4a05      	ldr	r2, [pc, #20]	; (8002c80 <_sbrk+0x64>)
 8002c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20002800 	.word	0x20002800
 8002c7c:	00000400 	.word	0x00000400
 8002c80:	20000934 	.word	0x20000934
 8002c84:	20000950 	.word	0x20000950

08002c88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c94:	480c      	ldr	r0, [pc, #48]	; (8002cc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c96:	490d      	ldr	r1, [pc, #52]	; (8002ccc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c98:	4a0d      	ldr	r2, [pc, #52]	; (8002cd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c9c:	e002      	b.n	8002ca4 <LoopCopyDataInit>

08002c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ca2:	3304      	adds	r3, #4

08002ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ca8:	d3f9      	bcc.n	8002c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002caa:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cac:	4c0a      	ldr	r4, [pc, #40]	; (8002cd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb0:	e001      	b.n	8002cb6 <LoopFillZerobss>

08002cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cb4:	3204      	adds	r2, #4

08002cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cb8:	d3fb      	bcc.n	8002cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cba:	f7ff ffe5 	bl	8002c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cbe:	f002 fe03 	bl	80058c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cc2:	f7fe ffdd 	bl	8001c80 <main>
  bx lr
 8002cc6:	4770      	bx	lr
  ldr r0, =_sdata
 8002cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ccc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002cd0:	080065fc 	.word	0x080065fc
  ldr r2, =_sbss
 8002cd4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002cd8:	2000094c 	.word	0x2000094c

08002cdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cdc:	e7fe      	b.n	8002cdc <ADC1_2_IRQHandler>
	...

08002ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce4:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <HAL_Init+0x28>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <HAL_Init+0x28>)
 8002cea:	f043 0310 	orr.w	r3, r3, #16
 8002cee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf0:	2003      	movs	r0, #3
 8002cf2:	f000 f947 	bl	8002f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cf6:	200f      	movs	r0, #15
 8002cf8:	f000 f808 	bl	8002d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cfc:	f7ff fdae 	bl	800285c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40022000 	.word	0x40022000

08002d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_InitTick+0x54>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_InitTick+0x58>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f95f 	bl	8002fee <HAL_SYSTICK_Config>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e00e      	b.n	8002d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b0f      	cmp	r3, #15
 8002d3e:	d80a      	bhi.n	8002d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d40:	2200      	movs	r2, #0
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295
 8002d48:	f000 f927 	bl	8002f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d4c:	4a06      	ldr	r2, [pc, #24]	; (8002d68 <HAL_InitTick+0x5c>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e000      	b.n	8002d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000008 	.word	0x20000008
 8002d64:	20000010 	.word	0x20000010
 8002d68:	2000000c 	.word	0x2000000c

08002d6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_IncTick+0x1c>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <HAL_IncTick+0x20>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	4a03      	ldr	r2, [pc, #12]	; (8002d8c <HAL_IncTick+0x20>)
 8002d7e:	6013      	str	r3, [r2, #0]
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr
 8002d88:	20000010 	.word	0x20000010
 8002d8c:	20000938 	.word	0x20000938

08002d90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return uwTick;
 8002d94:	4b02      	ldr	r3, [pc, #8]	; (8002da0 <HAL_GetTick+0x10>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	20000938 	.word	0x20000938

08002da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dac:	f7ff fff0 	bl	8002d90 <HAL_GetTick>
 8002db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d005      	beq.n	8002dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_Delay+0x44>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dca:	bf00      	nop
 8002dcc:	f7ff ffe0 	bl	8002d90 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d8f7      	bhi.n	8002dcc <HAL_Delay+0x28>
  {
  }
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000010 	.word	0x20000010

08002dec <__NVIC_SetPriorityGrouping>:
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <__NVIC_SetPriorityGrouping+0x44>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e1e:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <__NVIC_SetPriorityGrouping+0x44>)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	60d3      	str	r3, [r2, #12]
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <__NVIC_GetPriorityGrouping>:
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e38:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <__NVIC_GetPriorityGrouping+0x18>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	0a1b      	lsrs	r3, r3, #8
 8002e3e:	f003 0307 	and.w	r3, r3, #7
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <__NVIC_EnableIRQ>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	db0b      	blt.n	8002e7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	f003 021f 	and.w	r2, r3, #31
 8002e68:	4906      	ldr	r1, [pc, #24]	; (8002e84 <__NVIC_EnableIRQ+0x34>)
 8002e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	2001      	movs	r0, #1
 8002e72:	fa00 f202 	lsl.w	r2, r0, r2
 8002e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr
 8002e84:	e000e100 	.word	0xe000e100

08002e88 <__NVIC_SetPriority>:
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	6039      	str	r1, [r7, #0]
 8002e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	db0a      	blt.n	8002eb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	490c      	ldr	r1, [pc, #48]	; (8002ed4 <__NVIC_SetPriority+0x4c>)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002eb0:	e00a      	b.n	8002ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4908      	ldr	r1, [pc, #32]	; (8002ed8 <__NVIC_SetPriority+0x50>)
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	3b04      	subs	r3, #4
 8002ec0:	0112      	lsls	r2, r2, #4
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	761a      	strb	r2, [r3, #24]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	e000e100 	.word	0xe000e100
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <NVIC_EncodePriority>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	; 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f1c3 0307 	rsb	r3, r3, #7
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	bf28      	it	cs
 8002efa:	2304      	movcs	r3, #4
 8002efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3304      	adds	r3, #4
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d902      	bls.n	8002f0c <NVIC_EncodePriority+0x30>
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3b03      	subs	r3, #3
 8002f0a:	e000      	b.n	8002f0e <NVIC_EncodePriority+0x32>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	401a      	ands	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f24:	f04f 31ff 	mov.w	r1, #4294967295
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2e:	43d9      	mvns	r1, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f34:	4313      	orrs	r3, r2
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3724      	adds	r7, #36	; 0x24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f50:	d301      	bcc.n	8002f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00f      	b.n	8002f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f56:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <SysTick_Config+0x40>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f5e:	210f      	movs	r1, #15
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	f7ff ff90 	bl	8002e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <SysTick_Config+0x40>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6e:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <SysTick_Config+0x40>)
 8002f70:	2207      	movs	r2, #7
 8002f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	e000e010 	.word	0xe000e010

08002f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff2d 	bl	8002dec <__NVIC_SetPriorityGrouping>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fac:	f7ff ff42 	bl	8002e34 <__NVIC_GetPriorityGrouping>
 8002fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	6978      	ldr	r0, [r7, #20]
 8002fb8:	f7ff ff90 	bl	8002edc <NVIC_EncodePriority>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff5f 	bl	8002e88 <__NVIC_SetPriority>
}
 8002fca:	bf00      	nop
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff ff35 	bl	8002e50 <__NVIC_EnableIRQ>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ffa2 	bl	8002f40 <SysTick_Config>
 8002ffc:	4603      	mov	r3, r0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003008:	b480      	push	{r7}
 800300a:	b08b      	sub	sp, #44	; 0x2c
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003012:	2300      	movs	r3, #0
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003016:	2300      	movs	r3, #0
 8003018:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800301a:	e161      	b.n	80032e0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800301c:	2201      	movs	r2, #1
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	429a      	cmp	r2, r3
 8003036:	f040 8150 	bne.w	80032da <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4a97      	ldr	r2, [pc, #604]	; (800329c <HAL_GPIO_Init+0x294>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d05e      	beq.n	8003102 <HAL_GPIO_Init+0xfa>
 8003044:	4a95      	ldr	r2, [pc, #596]	; (800329c <HAL_GPIO_Init+0x294>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d875      	bhi.n	8003136 <HAL_GPIO_Init+0x12e>
 800304a:	4a95      	ldr	r2, [pc, #596]	; (80032a0 <HAL_GPIO_Init+0x298>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d058      	beq.n	8003102 <HAL_GPIO_Init+0xfa>
 8003050:	4a93      	ldr	r2, [pc, #588]	; (80032a0 <HAL_GPIO_Init+0x298>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d86f      	bhi.n	8003136 <HAL_GPIO_Init+0x12e>
 8003056:	4a93      	ldr	r2, [pc, #588]	; (80032a4 <HAL_GPIO_Init+0x29c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d052      	beq.n	8003102 <HAL_GPIO_Init+0xfa>
 800305c:	4a91      	ldr	r2, [pc, #580]	; (80032a4 <HAL_GPIO_Init+0x29c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d869      	bhi.n	8003136 <HAL_GPIO_Init+0x12e>
 8003062:	4a91      	ldr	r2, [pc, #580]	; (80032a8 <HAL_GPIO_Init+0x2a0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d04c      	beq.n	8003102 <HAL_GPIO_Init+0xfa>
 8003068:	4a8f      	ldr	r2, [pc, #572]	; (80032a8 <HAL_GPIO_Init+0x2a0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d863      	bhi.n	8003136 <HAL_GPIO_Init+0x12e>
 800306e:	4a8f      	ldr	r2, [pc, #572]	; (80032ac <HAL_GPIO_Init+0x2a4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d046      	beq.n	8003102 <HAL_GPIO_Init+0xfa>
 8003074:	4a8d      	ldr	r2, [pc, #564]	; (80032ac <HAL_GPIO_Init+0x2a4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d85d      	bhi.n	8003136 <HAL_GPIO_Init+0x12e>
 800307a:	2b12      	cmp	r3, #18
 800307c:	d82a      	bhi.n	80030d4 <HAL_GPIO_Init+0xcc>
 800307e:	2b12      	cmp	r3, #18
 8003080:	d859      	bhi.n	8003136 <HAL_GPIO_Init+0x12e>
 8003082:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <HAL_GPIO_Init+0x80>)
 8003084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003088:	08003103 	.word	0x08003103
 800308c:	080030dd 	.word	0x080030dd
 8003090:	080030ef 	.word	0x080030ef
 8003094:	08003131 	.word	0x08003131
 8003098:	08003137 	.word	0x08003137
 800309c:	08003137 	.word	0x08003137
 80030a0:	08003137 	.word	0x08003137
 80030a4:	08003137 	.word	0x08003137
 80030a8:	08003137 	.word	0x08003137
 80030ac:	08003137 	.word	0x08003137
 80030b0:	08003137 	.word	0x08003137
 80030b4:	08003137 	.word	0x08003137
 80030b8:	08003137 	.word	0x08003137
 80030bc:	08003137 	.word	0x08003137
 80030c0:	08003137 	.word	0x08003137
 80030c4:	08003137 	.word	0x08003137
 80030c8:	08003137 	.word	0x08003137
 80030cc:	080030e5 	.word	0x080030e5
 80030d0:	080030f9 	.word	0x080030f9
 80030d4:	4a76      	ldr	r2, [pc, #472]	; (80032b0 <HAL_GPIO_Init+0x2a8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d013      	beq.n	8003102 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030da:	e02c      	b.n	8003136 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	623b      	str	r3, [r7, #32]
          break;
 80030e2:	e029      	b.n	8003138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	3304      	adds	r3, #4
 80030ea:	623b      	str	r3, [r7, #32]
          break;
 80030ec:	e024      	b.n	8003138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	3308      	adds	r3, #8
 80030f4:	623b      	str	r3, [r7, #32]
          break;
 80030f6:	e01f      	b.n	8003138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	330c      	adds	r3, #12
 80030fe:	623b      	str	r3, [r7, #32]
          break;
 8003100:	e01a      	b.n	8003138 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d102      	bne.n	8003110 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800310a:	2304      	movs	r3, #4
 800310c:	623b      	str	r3, [r7, #32]
          break;
 800310e:	e013      	b.n	8003138 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d105      	bne.n	8003124 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003118:	2308      	movs	r3, #8
 800311a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69fa      	ldr	r2, [r7, #28]
 8003120:	611a      	str	r2, [r3, #16]
          break;
 8003122:	e009      	b.n	8003138 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003124:	2308      	movs	r3, #8
 8003126:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	615a      	str	r2, [r3, #20]
          break;
 800312e:	e003      	b.n	8003138 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003130:	2300      	movs	r3, #0
 8003132:	623b      	str	r3, [r7, #32]
          break;
 8003134:	e000      	b.n	8003138 <HAL_GPIO_Init+0x130>
          break;
 8003136:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2bff      	cmp	r3, #255	; 0xff
 800313c:	d801      	bhi.n	8003142 <HAL_GPIO_Init+0x13a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	e001      	b.n	8003146 <HAL_GPIO_Init+0x13e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3304      	adds	r3, #4
 8003146:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2bff      	cmp	r3, #255	; 0xff
 800314c:	d802      	bhi.n	8003154 <HAL_GPIO_Init+0x14c>
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	e002      	b.n	800315a <HAL_GPIO_Init+0x152>
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	3b08      	subs	r3, #8
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	210f      	movs	r1, #15
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	fa01 f303 	lsl.w	r3, r1, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	401a      	ands	r2, r3
 800316c:	6a39      	ldr	r1, [r7, #32]
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	431a      	orrs	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 80a9 	beq.w	80032da <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003188:	4b4a      	ldr	r3, [pc, #296]	; (80032b4 <HAL_GPIO_Init+0x2ac>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	4a49      	ldr	r2, [pc, #292]	; (80032b4 <HAL_GPIO_Init+0x2ac>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6193      	str	r3, [r2, #24]
 8003194:	4b47      	ldr	r3, [pc, #284]	; (80032b4 <HAL_GPIO_Init+0x2ac>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031a0:	4a45      	ldr	r2, [pc, #276]	; (80032b8 <HAL_GPIO_Init+0x2b0>)
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	3302      	adds	r3, #2
 80031a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	220f      	movs	r2, #15
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4013      	ands	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a3d      	ldr	r2, [pc, #244]	; (80032bc <HAL_GPIO_Init+0x2b4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00d      	beq.n	80031e8 <HAL_GPIO_Init+0x1e0>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a3c      	ldr	r2, [pc, #240]	; (80032c0 <HAL_GPIO_Init+0x2b8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d007      	beq.n	80031e4 <HAL_GPIO_Init+0x1dc>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a3b      	ldr	r2, [pc, #236]	; (80032c4 <HAL_GPIO_Init+0x2bc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d101      	bne.n	80031e0 <HAL_GPIO_Init+0x1d8>
 80031dc:	2302      	movs	r3, #2
 80031de:	e004      	b.n	80031ea <HAL_GPIO_Init+0x1e2>
 80031e0:	2303      	movs	r3, #3
 80031e2:	e002      	b.n	80031ea <HAL_GPIO_Init+0x1e2>
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <HAL_GPIO_Init+0x1e2>
 80031e8:	2300      	movs	r3, #0
 80031ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ec:	f002 0203 	and.w	r2, r2, #3
 80031f0:	0092      	lsls	r2, r2, #2
 80031f2:	4093      	lsls	r3, r2
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031fa:	492f      	ldr	r1, [pc, #188]	; (80032b8 <HAL_GPIO_Init+0x2b0>)
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	089b      	lsrs	r3, r3, #2
 8003200:	3302      	adds	r3, #2
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d006      	beq.n	8003222 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003214:	4b2c      	ldr	r3, [pc, #176]	; (80032c8 <HAL_GPIO_Init+0x2c0>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	492b      	ldr	r1, [pc, #172]	; (80032c8 <HAL_GPIO_Init+0x2c0>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	600b      	str	r3, [r1, #0]
 8003220:	e006      	b.n	8003230 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003222:	4b29      	ldr	r3, [pc, #164]	; (80032c8 <HAL_GPIO_Init+0x2c0>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	43db      	mvns	r3, r3
 800322a:	4927      	ldr	r1, [pc, #156]	; (80032c8 <HAL_GPIO_Init+0x2c0>)
 800322c:	4013      	ands	r3, r2
 800322e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d006      	beq.n	800324a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800323c:	4b22      	ldr	r3, [pc, #136]	; (80032c8 <HAL_GPIO_Init+0x2c0>)
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	4921      	ldr	r1, [pc, #132]	; (80032c8 <HAL_GPIO_Init+0x2c0>)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	4313      	orrs	r3, r2
 8003246:	604b      	str	r3, [r1, #4]
 8003248:	e006      	b.n	8003258 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800324a:	4b1f      	ldr	r3, [pc, #124]	; (80032c8 <HAL_GPIO_Init+0x2c0>)
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	43db      	mvns	r3, r3
 8003252:	491d      	ldr	r1, [pc, #116]	; (80032c8 <HAL_GPIO_Init+0x2c0>)
 8003254:	4013      	ands	r3, r2
 8003256:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d006      	beq.n	8003272 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003264:	4b18      	ldr	r3, [pc, #96]	; (80032c8 <HAL_GPIO_Init+0x2c0>)
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	4917      	ldr	r1, [pc, #92]	; (80032c8 <HAL_GPIO_Init+0x2c0>)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	4313      	orrs	r3, r2
 800326e:	608b      	str	r3, [r1, #8]
 8003270:	e006      	b.n	8003280 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003272:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <HAL_GPIO_Init+0x2c0>)
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	43db      	mvns	r3, r3
 800327a:	4913      	ldr	r1, [pc, #76]	; (80032c8 <HAL_GPIO_Init+0x2c0>)
 800327c:	4013      	ands	r3, r2
 800327e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01f      	beq.n	80032cc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800328c:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <HAL_GPIO_Init+0x2c0>)
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	490d      	ldr	r1, [pc, #52]	; (80032c8 <HAL_GPIO_Init+0x2c0>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	4313      	orrs	r3, r2
 8003296:	60cb      	str	r3, [r1, #12]
 8003298:	e01f      	b.n	80032da <HAL_GPIO_Init+0x2d2>
 800329a:	bf00      	nop
 800329c:	10320000 	.word	0x10320000
 80032a0:	10310000 	.word	0x10310000
 80032a4:	10220000 	.word	0x10220000
 80032a8:	10210000 	.word	0x10210000
 80032ac:	10120000 	.word	0x10120000
 80032b0:	10110000 	.word	0x10110000
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40010000 	.word	0x40010000
 80032bc:	40010800 	.word	0x40010800
 80032c0:	40010c00 	.word	0x40010c00
 80032c4:	40011000 	.word	0x40011000
 80032c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_GPIO_Init+0x2f4>)
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	43db      	mvns	r3, r3
 80032d4:	4909      	ldr	r1, [pc, #36]	; (80032fc <HAL_GPIO_Init+0x2f4>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	3301      	adds	r3, #1
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f47f ae96 	bne.w	800301c <HAL_GPIO_Init+0x14>
  }
}
 80032f0:	bf00      	nop
 80032f2:	bf00      	nop
 80032f4:	372c      	adds	r7, #44	; 0x2c
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr
 80032fc:	40010400 	.word	0x40010400

08003300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	887b      	ldrh	r3, [r7, #2]
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
 800331c:	e001      	b.n	8003322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800331e:	2300      	movs	r3, #0
 8003320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003322:	7bfb      	ldrb	r3, [r7, #15]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	460b      	mov	r3, r1
 8003338:	807b      	strh	r3, [r7, #2]
 800333a:	4613      	mov	r3, r2
 800333c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800333e:	787b      	ldrb	r3, [r7, #1]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003344:	887a      	ldrh	r2, [r7, #2]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800334a:	e003      	b.n	8003354 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800334c:	887b      	ldrh	r3, [r7, #2]
 800334e:	041a      	lsls	r2, r3, #16
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	611a      	str	r2, [r3, #16]
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
	...

08003360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e272      	b.n	8003858 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 8087 	beq.w	800348e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003380:	4b92      	ldr	r3, [pc, #584]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b04      	cmp	r3, #4
 800338a:	d00c      	beq.n	80033a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800338c:	4b8f      	ldr	r3, [pc, #572]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 030c 	and.w	r3, r3, #12
 8003394:	2b08      	cmp	r3, #8
 8003396:	d112      	bne.n	80033be <HAL_RCC_OscConfig+0x5e>
 8003398:	4b8c      	ldr	r3, [pc, #560]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a4:	d10b      	bne.n	80033be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a6:	4b89      	ldr	r3, [pc, #548]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d06c      	beq.n	800348c <HAL_RCC_OscConfig+0x12c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d168      	bne.n	800348c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e24c      	b.n	8003858 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c6:	d106      	bne.n	80033d6 <HAL_RCC_OscConfig+0x76>
 80033c8:	4b80      	ldr	r3, [pc, #512]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a7f      	ldr	r2, [pc, #508]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 80033ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	e02e      	b.n	8003434 <HAL_RCC_OscConfig+0xd4>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x98>
 80033de:	4b7b      	ldr	r3, [pc, #492]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a7a      	ldr	r2, [pc, #488]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 80033e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	4b78      	ldr	r3, [pc, #480]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a77      	ldr	r2, [pc, #476]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 80033f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	e01d      	b.n	8003434 <HAL_RCC_OscConfig+0xd4>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003400:	d10c      	bne.n	800341c <HAL_RCC_OscConfig+0xbc>
 8003402:	4b72      	ldr	r3, [pc, #456]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a71      	ldr	r2, [pc, #452]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 8003408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4b6f      	ldr	r3, [pc, #444]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a6e      	ldr	r2, [pc, #440]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 8003414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	e00b      	b.n	8003434 <HAL_RCC_OscConfig+0xd4>
 800341c:	4b6b      	ldr	r3, [pc, #428]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a6a      	ldr	r2, [pc, #424]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 8003422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	4b68      	ldr	r3, [pc, #416]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a67      	ldr	r2, [pc, #412]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 800342e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003432:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d013      	beq.n	8003464 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7ff fca8 	bl	8002d90 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003444:	f7ff fca4 	bl	8002d90 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	; 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e200      	b.n	8003858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003456:	4b5d      	ldr	r3, [pc, #372]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0xe4>
 8003462:	e014      	b.n	800348e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7ff fc94 	bl	8002d90 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800346c:	f7ff fc90 	bl	8002d90 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	; 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e1ec      	b.n	8003858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347e:	4b53      	ldr	r3, [pc, #332]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x10c>
 800348a:	e000      	b.n	800348e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800348c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d063      	beq.n	8003562 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800349a:	4b4c      	ldr	r3, [pc, #304]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00b      	beq.n	80034be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034a6:	4b49      	ldr	r3, [pc, #292]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d11c      	bne.n	80034ec <HAL_RCC_OscConfig+0x18c>
 80034b2:	4b46      	ldr	r3, [pc, #280]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d116      	bne.n	80034ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034be:	4b43      	ldr	r3, [pc, #268]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d005      	beq.n	80034d6 <HAL_RCC_OscConfig+0x176>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e1c0      	b.n	8003858 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d6:	4b3d      	ldr	r3, [pc, #244]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4939      	ldr	r1, [pc, #228]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ea:	e03a      	b.n	8003562 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d020      	beq.n	8003536 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f4:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fa:	f7ff fc49 	bl	8002d90 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003502:	f7ff fc45 	bl	8002d90 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e1a1      	b.n	8003858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003514:	4b2d      	ldr	r3, [pc, #180]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003520:	4b2a      	ldr	r3, [pc, #168]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4927      	ldr	r1, [pc, #156]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 8003530:	4313      	orrs	r3, r2
 8003532:	600b      	str	r3, [r1, #0]
 8003534:	e015      	b.n	8003562 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003536:	4b26      	ldr	r3, [pc, #152]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7ff fc28 	bl	8002d90 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003544:	f7ff fc24 	bl	8002d90 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e180      	b.n	8003858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003556:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d03a      	beq.n	80035e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d019      	beq.n	80035aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003576:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003578:	2201      	movs	r2, #1
 800357a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357c:	f7ff fc08 	bl	8002d90 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003584:	f7ff fc04 	bl	8002d90 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e160      	b.n	8003858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003596:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <HAL_RCC_OscConfig+0x26c>)
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035a2:	2001      	movs	r0, #1
 80035a4:	f000 fad8 	bl	8003b58 <RCC_Delay>
 80035a8:	e01c      	b.n	80035e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035aa:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b0:	f7ff fbee 	bl	8002d90 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b6:	e00f      	b.n	80035d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b8:	f7ff fbea 	bl	8002d90 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d908      	bls.n	80035d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e146      	b.n	8003858 <HAL_RCC_OscConfig+0x4f8>
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	42420000 	.word	0x42420000
 80035d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d8:	4b92      	ldr	r3, [pc, #584]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1e9      	bne.n	80035b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80a6 	beq.w	800373e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f2:	2300      	movs	r3, #0
 80035f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f6:	4b8b      	ldr	r3, [pc, #556]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10d      	bne.n	800361e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003602:	4b88      	ldr	r3, [pc, #544]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	4a87      	ldr	r2, [pc, #540]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 8003608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360c:	61d3      	str	r3, [r2, #28]
 800360e:	4b85      	ldr	r3, [pc, #532]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361a:	2301      	movs	r3, #1
 800361c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361e:	4b82      	ldr	r3, [pc, #520]	; (8003828 <HAL_RCC_OscConfig+0x4c8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d118      	bne.n	800365c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362a:	4b7f      	ldr	r3, [pc, #508]	; (8003828 <HAL_RCC_OscConfig+0x4c8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a7e      	ldr	r2, [pc, #504]	; (8003828 <HAL_RCC_OscConfig+0x4c8>)
 8003630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003636:	f7ff fbab 	bl	8002d90 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363e:	f7ff fba7 	bl	8002d90 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b64      	cmp	r3, #100	; 0x64
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e103      	b.n	8003858 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003650:	4b75      	ldr	r3, [pc, #468]	; (8003828 <HAL_RCC_OscConfig+0x4c8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d106      	bne.n	8003672 <HAL_RCC_OscConfig+0x312>
 8003664:	4b6f      	ldr	r3, [pc, #444]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	4a6e      	ldr	r2, [pc, #440]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6213      	str	r3, [r2, #32]
 8003670:	e02d      	b.n	80036ce <HAL_RCC_OscConfig+0x36e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10c      	bne.n	8003694 <HAL_RCC_OscConfig+0x334>
 800367a:	4b6a      	ldr	r3, [pc, #424]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	4a69      	ldr	r2, [pc, #420]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 8003680:	f023 0301 	bic.w	r3, r3, #1
 8003684:	6213      	str	r3, [r2, #32]
 8003686:	4b67      	ldr	r3, [pc, #412]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	4a66      	ldr	r2, [pc, #408]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 800368c:	f023 0304 	bic.w	r3, r3, #4
 8003690:	6213      	str	r3, [r2, #32]
 8003692:	e01c      	b.n	80036ce <HAL_RCC_OscConfig+0x36e>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2b05      	cmp	r3, #5
 800369a:	d10c      	bne.n	80036b6 <HAL_RCC_OscConfig+0x356>
 800369c:	4b61      	ldr	r3, [pc, #388]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4a60      	ldr	r2, [pc, #384]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	f043 0304 	orr.w	r3, r3, #4
 80036a6:	6213      	str	r3, [r2, #32]
 80036a8:	4b5e      	ldr	r3, [pc, #376]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	4a5d      	ldr	r2, [pc, #372]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6213      	str	r3, [r2, #32]
 80036b4:	e00b      	b.n	80036ce <HAL_RCC_OscConfig+0x36e>
 80036b6:	4b5b      	ldr	r3, [pc, #364]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	4a5a      	ldr	r2, [pc, #360]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	6213      	str	r3, [r2, #32]
 80036c2:	4b58      	ldr	r3, [pc, #352]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	4a57      	ldr	r2, [pc, #348]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	f023 0304 	bic.w	r3, r3, #4
 80036cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d015      	beq.n	8003702 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d6:	f7ff fb5b 	bl	8002d90 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036dc:	e00a      	b.n	80036f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7ff fb57 	bl	8002d90 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e0b1      	b.n	8003858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f4:	4b4b      	ldr	r3, [pc, #300]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0ee      	beq.n	80036de <HAL_RCC_OscConfig+0x37e>
 8003700:	e014      	b.n	800372c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003702:	f7ff fb45 	bl	8002d90 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003708:	e00a      	b.n	8003720 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370a:	f7ff fb41 	bl	8002d90 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f241 3288 	movw	r2, #5000	; 0x1388
 8003718:	4293      	cmp	r3, r2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e09b      	b.n	8003858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003720:	4b40      	ldr	r3, [pc, #256]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1ee      	bne.n	800370a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800372c:	7dfb      	ldrb	r3, [r7, #23]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d105      	bne.n	800373e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003732:	4b3c      	ldr	r3, [pc, #240]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	4a3b      	ldr	r2, [pc, #236]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8087 	beq.w	8003856 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003748:	4b36      	ldr	r3, [pc, #216]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 030c 	and.w	r3, r3, #12
 8003750:	2b08      	cmp	r3, #8
 8003752:	d061      	beq.n	8003818 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d146      	bne.n	80037ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375c:	4b33      	ldr	r3, [pc, #204]	; (800382c <HAL_RCC_OscConfig+0x4cc>)
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003762:	f7ff fb15 	bl	8002d90 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376a:	f7ff fb11 	bl	8002d90 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e06d      	b.n	8003858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377c:	4b29      	ldr	r3, [pc, #164]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f0      	bne.n	800376a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003790:	d108      	bne.n	80037a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003792:	4b24      	ldr	r3, [pc, #144]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	4921      	ldr	r1, [pc, #132]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037a4:	4b1f      	ldr	r3, [pc, #124]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a19      	ldr	r1, [r3, #32]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	430b      	orrs	r3, r1
 80037b6:	491b      	ldr	r1, [pc, #108]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037bc:	4b1b      	ldr	r3, [pc, #108]	; (800382c <HAL_RCC_OscConfig+0x4cc>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c2:	f7ff fae5 	bl	8002d90 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ca:	f7ff fae1 	bl	8002d90 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e03d      	b.n	8003858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x46a>
 80037e8:	e035      	b.n	8003856 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <HAL_RCC_OscConfig+0x4cc>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7ff face 	bl	8002d90 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f8:	f7ff faca 	bl	8002d90 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e026      	b.n	8003858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_RCC_OscConfig+0x4c4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x498>
 8003816:	e01e      	b.n	8003856 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d107      	bne.n	8003830 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e019      	b.n	8003858 <HAL_RCC_OscConfig+0x4f8>
 8003824:	40021000 	.word	0x40021000
 8003828:	40007000 	.word	0x40007000
 800382c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_RCC_OscConfig+0x500>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	429a      	cmp	r2, r3
 8003842:	d106      	bne.n	8003852 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d001      	beq.n	8003856 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40021000 	.word	0x40021000

08003864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0d0      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003878:	4b6a      	ldr	r3, [pc, #424]	; (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d910      	bls.n	80038a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003886:	4b67      	ldr	r3, [pc, #412]	; (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 0207 	bic.w	r2, r3, #7
 800388e:	4965      	ldr	r1, [pc, #404]	; (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	4313      	orrs	r3, r2
 8003894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003896:	4b63      	ldr	r3, [pc, #396]	; (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d001      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0b8      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d020      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c0:	4b59      	ldr	r3, [pc, #356]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	4a58      	ldr	r2, [pc, #352]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d8:	4b53      	ldr	r3, [pc, #332]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4a52      	ldr	r2, [pc, #328]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e4:	4b50      	ldr	r3, [pc, #320]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	494d      	ldr	r1, [pc, #308]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d040      	beq.n	8003984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d107      	bne.n	800391a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390a:	4b47      	ldr	r3, [pc, #284]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d115      	bne.n	8003942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e07f      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d107      	bne.n	8003932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003922:	4b41      	ldr	r3, [pc, #260]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e073      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003932:	4b3d      	ldr	r3, [pc, #244]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e06b      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003942:	4b39      	ldr	r3, [pc, #228]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f023 0203 	bic.w	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4936      	ldr	r1, [pc, #216]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	4313      	orrs	r3, r2
 8003952:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003954:	f7ff fa1c 	bl	8002d90 <HAL_GetTick>
 8003958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395a:	e00a      	b.n	8003972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800395c:	f7ff fa18 	bl	8002d90 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f241 3288 	movw	r2, #5000	; 0x1388
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e053      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	4b2d      	ldr	r3, [pc, #180]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f003 020c 	and.w	r2, r3, #12
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	429a      	cmp	r2, r3
 8003982:	d1eb      	bne.n	800395c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003984:	4b27      	ldr	r3, [pc, #156]	; (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d210      	bcs.n	80039b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003992:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 0207 	bic.w	r2, r3, #7
 800399a:	4922      	ldr	r1, [pc, #136]	; (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e032      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c0:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	4916      	ldr	r1, [pc, #88]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039de:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	490e      	ldr	r1, [pc, #56]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039f2:	f000 f821 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 80039f6:	4602      	mov	r2, r0
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	091b      	lsrs	r3, r3, #4
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	490a      	ldr	r1, [pc, #40]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 8003a04:	5ccb      	ldrb	r3, [r1, r3]
 8003a06:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0a:	4a09      	ldr	r2, [pc, #36]	; (8003a30 <HAL_RCC_ClockConfig+0x1cc>)
 8003a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a0e:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <HAL_RCC_ClockConfig+0x1d0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff f97a 	bl	8002d0c <HAL_InitTick>

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40022000 	.word	0x40022000
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	080065a8 	.word	0x080065a8
 8003a30:	20000008 	.word	0x20000008
 8003a34:	2000000c 	.word	0x2000000c

08003a38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a38:	b490      	push	{r4, r7}
 8003a3a:	b08a      	sub	sp, #40	; 0x28
 8003a3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a3e:	4b29      	ldr	r3, [pc, #164]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003a40:	1d3c      	adds	r4, r7, #4
 8003a42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a48:	f240 2301 	movw	r3, #513	; 0x201
 8003a4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	2300      	movs	r3, #0
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a62:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d002      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0x40>
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d003      	beq.n	8003a7e <HAL_RCC_GetSysClockFreq+0x46>
 8003a76:	e02b      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a78:	4b1c      	ldr	r3, [pc, #112]	; (8003aec <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a7a:	623b      	str	r3, [r7, #32]
      break;
 8003a7c:	e02b      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	0c9b      	lsrs	r3, r3, #18
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	3328      	adds	r3, #40	; 0x28
 8003a88:	443b      	add	r3, r7
 8003a8a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a8e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d012      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a9a:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	0c5b      	lsrs	r3, r3, #17
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	3328      	adds	r3, #40	; 0x28
 8003aa6:	443b      	add	r3, r7
 8003aa8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003aac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	4a0e      	ldr	r2, [pc, #56]	; (8003aec <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ab2:	fb03 f202 	mul.w	r2, r3, r2
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
 8003abe:	e004      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	4a0b      	ldr	r2, [pc, #44]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ac4:	fb02 f303 	mul.w	r3, r2, r3
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	623b      	str	r3, [r7, #32]
      break;
 8003ace:	e002      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ad2:	623b      	str	r3, [r7, #32]
      break;
 8003ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3728      	adds	r7, #40	; 0x28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc90      	pop	{r4, r7}
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	08006254 	.word	0x08006254
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	007a1200 	.word	0x007a1200
 8003af0:	003d0900 	.word	0x003d0900

08003af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af8:	4b02      	ldr	r3, [pc, #8]	; (8003b04 <HAL_RCC_GetHCLKFreq+0x10>)
 8003afa:	681b      	ldr	r3, [r3, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	20000008 	.word	0x20000008

08003b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b0c:	f7ff fff2 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b10:	4602      	mov	r2, r0
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	4903      	ldr	r1, [pc, #12]	; (8003b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b1e:	5ccb      	ldrb	r3, [r1, r3]
 8003b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	080065b8 	.word	0x080065b8

08003b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b34:	f7ff ffde 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	0adb      	lsrs	r3, r3, #11
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	4903      	ldr	r1, [pc, #12]	; (8003b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b46:	5ccb      	ldrb	r3, [r1, r3]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40021000 	.word	0x40021000
 8003b54:	080065b8 	.word	0x080065b8

08003b58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b60:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <RCC_Delay+0x34>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <RCC_Delay+0x38>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	0a5b      	lsrs	r3, r3, #9
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b74:	bf00      	nop
  }
  while (Delay --);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1e5a      	subs	r2, r3, #1
 8003b7a:	60fa      	str	r2, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f9      	bne.n	8003b74 <RCC_Delay+0x1c>
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr
 8003b8c:	20000008 	.word	0x20000008
 8003b90:	10624dd3 	.word	0x10624dd3

08003b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d07d      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb4:	4b4f      	ldr	r3, [pc, #316]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10d      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc0:	4b4c      	ldr	r3, [pc, #304]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	4a4b      	ldr	r2, [pc, #300]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bca:	61d3      	str	r3, [r2, #28]
 8003bcc:	4b49      	ldr	r3, [pc, #292]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bdc:	4b46      	ldr	r3, [pc, #280]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d118      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003be8:	4b43      	ldr	r3, [pc, #268]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a42      	ldr	r2, [pc, #264]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf4:	f7ff f8cc 	bl	8002d90 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfa:	e008      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfc:	f7ff f8c8 	bl	8002d90 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b64      	cmp	r3, #100	; 0x64
 8003c08:	d901      	bls.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e06d      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0e:	4b3a      	ldr	r3, [pc, #232]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c1a:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c22:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d02e      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d027      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c38:	4b2e      	ldr	r3, [pc, #184]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c42:	4b2e      	ldr	r3, [pc, #184]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c48:	4b2c      	ldr	r3, [pc, #176]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c4e:	4a29      	ldr	r2, [pc, #164]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d014      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5e:	f7ff f897 	bl	8002d90 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7ff f893 	bl	8002d90 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e036      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7c:	4b1d      	ldr	r3, [pc, #116]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0ee      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c88:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	4917      	ldr	r1, [pc, #92]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c9a:	7dfb      	ldrb	r3, [r7, #23]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d105      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca0:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	4a13      	ldr	r2, [pc, #76]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003caa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	490b      	ldr	r1, [pc, #44]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d008      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cd6:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	4904      	ldr	r1, [pc, #16]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40007000 	.word	0x40007000
 8003cfc:	42420440 	.word	0x42420440

08003d00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e076      	b.n	8003e00 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d108      	bne.n	8003d2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d22:	d009      	beq.n	8003d38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	61da      	str	r2, [r3, #28]
 8003d2a:	e005      	b.n	8003d38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d106      	bne.n	8003d58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fe fdb4 	bl	80028c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbc:	ea42 0103 	orr.w	r1, r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	0c1a      	lsrs	r2, r3, #16
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f002 0204 	and.w	r2, r2, #4
 8003dde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69da      	ldr	r2, [r3, #28]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	4613      	mov	r3, r2
 8003e16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_SPI_Transmit+0x22>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e126      	b.n	8004078 <HAL_SPI_Transmit+0x270>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e32:	f7fe ffad 	bl	8002d90 <HAL_GetTick>
 8003e36:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d002      	beq.n	8003e4e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e4c:	e10b      	b.n	8004066 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_SPI_Transmit+0x52>
 8003e54:	88fb      	ldrh	r3, [r7, #6]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d102      	bne.n	8003e60 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e5e:	e102      	b.n	8004066 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2203      	movs	r2, #3
 8003e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	88fa      	ldrh	r2, [r7, #6]
 8003e78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	88fa      	ldrh	r2, [r7, #6]
 8003e7e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea6:	d10f      	bne.n	8003ec8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ec6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b40      	cmp	r3, #64	; 0x40
 8003ed4:	d007      	beq.n	8003ee6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eee:	d14b      	bne.n	8003f88 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_SPI_Transmit+0xf6>
 8003ef8:	8afb      	ldrh	r3, [r7, #22]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d13e      	bne.n	8003f7c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	881a      	ldrh	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	1c9a      	adds	r2, r3, #2
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f22:	e02b      	b.n	8003f7c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d112      	bne.n	8003f58 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	881a      	ldrh	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	1c9a      	adds	r2, r3, #2
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f56:	e011      	b.n	8003f7c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f58:	f7fe ff1a 	bl	8002d90 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d803      	bhi.n	8003f70 <HAL_SPI_Transmit+0x168>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6e:	d102      	bne.n	8003f76 <HAL_SPI_Transmit+0x16e>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f7a:	e074      	b.n	8004066 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1ce      	bne.n	8003f24 <HAL_SPI_Transmit+0x11c>
 8003f86:	e04c      	b.n	8004022 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <HAL_SPI_Transmit+0x18e>
 8003f90:	8afb      	ldrh	r3, [r7, #22]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d140      	bne.n	8004018 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	330c      	adds	r3, #12
 8003fa0:	7812      	ldrb	r2, [r2, #0]
 8003fa2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003fbc:	e02c      	b.n	8004018 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d113      	bne.n	8003ff4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	7812      	ldrb	r2, [r2, #0]
 8003fd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ff2:	e011      	b.n	8004018 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ff4:	f7fe fecc 	bl	8002d90 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d803      	bhi.n	800400c <HAL_SPI_Transmit+0x204>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400a:	d102      	bne.n	8004012 <HAL_SPI_Transmit+0x20a>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d102      	bne.n	8004018 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004016:	e026      	b.n	8004066 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1cd      	bne.n	8003fbe <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	6839      	ldr	r1, [r7, #0]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f8b2 	bl	8004190 <SPI_EndRxTxTransaction>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004040:	2300      	movs	r3, #0
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	77fb      	strb	r3, [r7, #31]
 8004062:	e000      	b.n	8004066 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004064:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004076:	7ffb      	ldrb	r3, [r7, #31]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3720      	adds	r7, #32
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	4613      	mov	r3, r2
 800408e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004090:	f7fe fe7e 	bl	8002d90 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	4413      	add	r3, r2
 800409e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040a0:	f7fe fe76 	bl	8002d90 <HAL_GetTick>
 80040a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040a6:	4b39      	ldr	r3, [pc, #228]	; (800418c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	015b      	lsls	r3, r3, #5
 80040ac:	0d1b      	lsrs	r3, r3, #20
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
 80040b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040b6:	e054      	b.n	8004162 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040be:	d050      	beq.n	8004162 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040c0:	f7fe fe66 	bl	8002d90 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d902      	bls.n	80040d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d13d      	bne.n	8004152 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ee:	d111      	bne.n	8004114 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f8:	d004      	beq.n	8004104 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004102:	d107      	bne.n	8004114 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004112:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411c:	d10f      	bne.n	800413e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800413c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e017      	b.n	8004182 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	3b01      	subs	r3, #1
 8004160:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4013      	ands	r3, r2
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	429a      	cmp	r2, r3
 8004170:	bf0c      	ite	eq
 8004172:	2301      	moveq	r3, #1
 8004174:	2300      	movne	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	429a      	cmp	r2, r3
 800417e:	d19b      	bne.n	80040b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000008 	.word	0x20000008

08004190 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2200      	movs	r2, #0
 80041a4:	2180      	movs	r1, #128	; 0x80
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f7ff ff6a 	bl	8004080 <SPI_WaitFlagStateUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b6:	f043 0220 	orr.w	r2, r3, #32
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e000      	b.n	80041c4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e041      	b.n	8004262 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fe fc2c 	bl	8002a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3304      	adds	r3, #4
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f000 fd44 	bl	8004c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	d001      	beq.n	8004284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e035      	b.n	80042f0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a16      	ldr	r2, [pc, #88]	; (80042fc <HAL_TIM_Base_Start_IT+0x90>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d009      	beq.n	80042ba <HAL_TIM_Base_Start_IT+0x4e>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ae:	d004      	beq.n	80042ba <HAL_TIM_Base_Start_IT+0x4e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a12      	ldr	r2, [pc, #72]	; (8004300 <HAL_TIM_Base_Start_IT+0x94>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d111      	bne.n	80042de <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b06      	cmp	r3, #6
 80042ca:	d010      	beq.n	80042ee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042dc:	e007      	b.n	80042ee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0201 	orr.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40012c00 	.word	0x40012c00
 8004300:	40000400 	.word	0x40000400

08004304 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e041      	b.n	800439a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fe fb06 	bl	800293c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3304      	adds	r3, #4
 8004340:	4619      	mov	r1, r3
 8004342:	4610      	mov	r0, r2
 8004344:	f000 fca8 	bl	8004c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d109      	bne.n	80043c8 <HAL_TIM_PWM_Start+0x24>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	bf14      	ite	ne
 80043c0:	2301      	movne	r3, #1
 80043c2:	2300      	moveq	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e022      	b.n	800440e <HAL_TIM_PWM_Start+0x6a>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d109      	bne.n	80043e2 <HAL_TIM_PWM_Start+0x3e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	bf14      	ite	ne
 80043da:	2301      	movne	r3, #1
 80043dc:	2300      	moveq	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	e015      	b.n	800440e <HAL_TIM_PWM_Start+0x6a>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d109      	bne.n	80043fc <HAL_TIM_PWM_Start+0x58>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	bf14      	ite	ne
 80043f4:	2301      	movne	r3, #1
 80043f6:	2300      	moveq	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	e008      	b.n	800440e <HAL_TIM_PWM_Start+0x6a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	bf14      	ite	ne
 8004408:	2301      	movne	r3, #1
 800440a:	2300      	moveq	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e059      	b.n	80044ca <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <HAL_TIM_PWM_Start+0x82>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004424:	e013      	b.n	800444e <HAL_TIM_PWM_Start+0xaa>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d104      	bne.n	8004436 <HAL_TIM_PWM_Start+0x92>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004434:	e00b      	b.n	800444e <HAL_TIM_PWM_Start+0xaa>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d104      	bne.n	8004446 <HAL_TIM_PWM_Start+0xa2>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004444:	e003      	b.n	800444e <HAL_TIM_PWM_Start+0xaa>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2202      	movs	r2, #2
 800444a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2201      	movs	r2, #1
 8004454:	6839      	ldr	r1, [r7, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fe94 	bl	8005184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1c      	ldr	r2, [pc, #112]	; (80044d4 <HAL_TIM_PWM_Start+0x130>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d107      	bne.n	8004476 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a16      	ldr	r2, [pc, #88]	; (80044d4 <HAL_TIM_PWM_Start+0x130>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d009      	beq.n	8004494 <HAL_TIM_PWM_Start+0xf0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004488:	d004      	beq.n	8004494 <HAL_TIM_PWM_Start+0xf0>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a12      	ldr	r2, [pc, #72]	; (80044d8 <HAL_TIM_PWM_Start+0x134>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d111      	bne.n	80044b8 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b06      	cmp	r3, #6
 80044a4:	d010      	beq.n	80044c8 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 0201 	orr.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b6:	e007      	b.n	80044c8 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40012c00 	.word	0x40012c00
 80044d8:	40000400 	.word	0x40000400

080044dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e093      	b.n	8004618 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d106      	bne.n	800450a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7fe fa37 	bl	8002978 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2202      	movs	r2, #2
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004520:	f023 0307 	bic.w	r3, r3, #7
 8004524:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3304      	adds	r3, #4
 800452e:	4619      	mov	r1, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f000 fbb1 	bl	8004c98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455e:	f023 0303 	bic.w	r3, r3, #3
 8004562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	021b      	lsls	r3, r3, #8
 800456e:	4313      	orrs	r3, r2
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800457c:	f023 030c 	bic.w	r3, r3, #12
 8004580:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004588:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800458c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	4313      	orrs	r3, r2
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	011a      	lsls	r2, r3, #4
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	031b      	lsls	r3, r3, #12
 80045ac:	4313      	orrs	r3, r2
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	4313      	orrs	r3, r2
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004630:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004638:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004640:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004648:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d110      	bne.n	8004672 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004650:	7bfb      	ldrb	r3, [r7, #15]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d102      	bne.n	800465c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004656:	7b7b      	ldrb	r3, [r7, #13]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d001      	beq.n	8004660 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e069      	b.n	8004734 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004670:	e031      	b.n	80046d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b04      	cmp	r3, #4
 8004676:	d110      	bne.n	800469a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004678:	7bbb      	ldrb	r3, [r7, #14]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d102      	bne.n	8004684 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800467e:	7b3b      	ldrb	r3, [r7, #12]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d001      	beq.n	8004688 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e055      	b.n	8004734 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004698:	e01d      	b.n	80046d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d108      	bne.n	80046b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046a0:	7bbb      	ldrb	r3, [r7, #14]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d105      	bne.n	80046b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046a6:	7b7b      	ldrb	r3, [r7, #13]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d102      	bne.n	80046b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046ac:	7b3b      	ldrb	r3, [r7, #12]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d001      	beq.n	80046b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e03e      	b.n	8004734 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2202      	movs	r2, #2
 80046ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2202      	movs	r2, #2
 80046c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2202      	movs	r2, #2
 80046ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2202      	movs	r2, #2
 80046d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_TIM_Encoder_Start+0xc4>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d008      	beq.n	80046f4 <HAL_TIM_Encoder_Start+0xd4>
 80046e2:	e00f      	b.n	8004704 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2201      	movs	r2, #1
 80046ea:	2100      	movs	r1, #0
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fd49 	bl	8005184 <TIM_CCxChannelCmd>
      break;
 80046f2:	e016      	b.n	8004722 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2201      	movs	r2, #1
 80046fa:	2104      	movs	r1, #4
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fd41 	bl	8005184 <TIM_CCxChannelCmd>
      break;
 8004702:	e00e      	b.n	8004722 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2201      	movs	r2, #1
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fd39 	bl	8005184 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2201      	movs	r2, #1
 8004718:	2104      	movs	r1, #4
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fd32 	bl	8005184 <TIM_CCxChannelCmd>
      break;
 8004720:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0201 	orr.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b02      	cmp	r3, #2
 8004750:	d122      	bne.n	8004798 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b02      	cmp	r3, #2
 800475e:	d11b      	bne.n	8004798 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0202 	mvn.w	r2, #2
 8004768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fa6f 	bl	8004c62 <HAL_TIM_IC_CaptureCallback>
 8004784:	e005      	b.n	8004792 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fa62 	bl	8004c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fa71 	bl	8004c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d122      	bne.n	80047ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d11b      	bne.n	80047ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0204 	mvn.w	r2, #4
 80047bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2202      	movs	r2, #2
 80047c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fa45 	bl	8004c62 <HAL_TIM_IC_CaptureCallback>
 80047d8:	e005      	b.n	80047e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fa38 	bl	8004c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 fa47 	bl	8004c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d122      	bne.n	8004840 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b08      	cmp	r3, #8
 8004806:	d11b      	bne.n	8004840 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f06f 0208 	mvn.w	r2, #8
 8004810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2204      	movs	r2, #4
 8004816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fa1b 	bl	8004c62 <HAL_TIM_IC_CaptureCallback>
 800482c:	e005      	b.n	800483a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fa0e 	bl	8004c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 fa1d 	bl	8004c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f003 0310 	and.w	r3, r3, #16
 800484a:	2b10      	cmp	r3, #16
 800484c:	d122      	bne.n	8004894 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b10      	cmp	r3, #16
 800485a:	d11b      	bne.n	8004894 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0210 	mvn.w	r2, #16
 8004864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2208      	movs	r2, #8
 800486a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f9f1 	bl	8004c62 <HAL_TIM_IC_CaptureCallback>
 8004880:	e005      	b.n	800488e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f9e4 	bl	8004c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f9f3 	bl	8004c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d10e      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d107      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0201 	mvn.w	r2, #1
 80048b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fd f97c 	bl	8001bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ca:	2b80      	cmp	r3, #128	; 0x80
 80048cc:	d10e      	bne.n	80048ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d8:	2b80      	cmp	r3, #128	; 0x80
 80048da:	d107      	bne.n	80048ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fd22 	bl	8005330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f6:	2b40      	cmp	r3, #64	; 0x40
 80048f8:	d10e      	bne.n	8004918 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004904:	2b40      	cmp	r3, #64	; 0x40
 8004906:	d107      	bne.n	8004918 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f9b7 	bl	8004c86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b20      	cmp	r3, #32
 8004924:	d10e      	bne.n	8004944 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0320 	and.w	r3, r3, #32
 8004930:	2b20      	cmp	r3, #32
 8004932:	d107      	bne.n	8004944 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0220 	mvn.w	r2, #32
 800493c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fced 	bl	800531e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004962:	2302      	movs	r3, #2
 8004964:	e0ac      	b.n	8004ac0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b0c      	cmp	r3, #12
 8004972:	f200 809f 	bhi.w	8004ab4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004976:	a201      	add	r2, pc, #4	; (adr r2, 800497c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	080049b1 	.word	0x080049b1
 8004980:	08004ab5 	.word	0x08004ab5
 8004984:	08004ab5 	.word	0x08004ab5
 8004988:	08004ab5 	.word	0x08004ab5
 800498c:	080049f1 	.word	0x080049f1
 8004990:	08004ab5 	.word	0x08004ab5
 8004994:	08004ab5 	.word	0x08004ab5
 8004998:	08004ab5 	.word	0x08004ab5
 800499c:	08004a33 	.word	0x08004a33
 80049a0:	08004ab5 	.word	0x08004ab5
 80049a4:	08004ab5 	.word	0x08004ab5
 80049a8:	08004ab5 	.word	0x08004ab5
 80049ac:	08004a73 	.word	0x08004a73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 f9c6 	bl	8004d48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0208 	orr.w	r2, r2, #8
 80049ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0204 	bic.w	r2, r2, #4
 80049da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6999      	ldr	r1, [r3, #24]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	619a      	str	r2, [r3, #24]
      break;
 80049ee:	e062      	b.n	8004ab6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68b9      	ldr	r1, [r7, #8]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fa0c 	bl	8004e14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6999      	ldr	r1, [r3, #24]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	021a      	lsls	r2, r3, #8
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	619a      	str	r2, [r3, #24]
      break;
 8004a30:	e041      	b.n	8004ab6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fa55 	bl	8004ee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69da      	ldr	r2, [r3, #28]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f042 0208 	orr.w	r2, r2, #8
 8004a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69da      	ldr	r2, [r3, #28]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0204 	bic.w	r2, r2, #4
 8004a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69d9      	ldr	r1, [r3, #28]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	61da      	str	r2, [r3, #28]
      break;
 8004a70:	e021      	b.n	8004ab6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fa9f 	bl	8004fbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69da      	ldr	r2, [r3, #28]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69d9      	ldr	r1, [r3, #28]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	021a      	lsls	r2, r3, #8
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	61da      	str	r2, [r3, #28]
      break;
 8004ab2:	e000      	b.n	8004ab6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004ab4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_TIM_ConfigClockSource+0x18>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e0b3      	b.n	8004c48 <HAL_TIM_ConfigClockSource+0x180>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b18:	d03e      	beq.n	8004b98 <HAL_TIM_ConfigClockSource+0xd0>
 8004b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b1e:	f200 8087 	bhi.w	8004c30 <HAL_TIM_ConfigClockSource+0x168>
 8004b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b26:	f000 8085 	beq.w	8004c34 <HAL_TIM_ConfigClockSource+0x16c>
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2e:	d87f      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x168>
 8004b30:	2b70      	cmp	r3, #112	; 0x70
 8004b32:	d01a      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0xa2>
 8004b34:	2b70      	cmp	r3, #112	; 0x70
 8004b36:	d87b      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x168>
 8004b38:	2b60      	cmp	r3, #96	; 0x60
 8004b3a:	d050      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0x116>
 8004b3c:	2b60      	cmp	r3, #96	; 0x60
 8004b3e:	d877      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x168>
 8004b40:	2b50      	cmp	r3, #80	; 0x50
 8004b42:	d03c      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0xf6>
 8004b44:	2b50      	cmp	r3, #80	; 0x50
 8004b46:	d873      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x168>
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d058      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x136>
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d86f      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x168>
 8004b50:	2b30      	cmp	r3, #48	; 0x30
 8004b52:	d064      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x156>
 8004b54:	2b30      	cmp	r3, #48	; 0x30
 8004b56:	d86b      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x168>
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d060      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x156>
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d867      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x168>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d05c      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x156>
 8004b64:	2b10      	cmp	r3, #16
 8004b66:	d05a      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004b68:	e062      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6818      	ldr	r0, [r3, #0]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	6899      	ldr	r1, [r3, #8]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f000 fae4 	bl	8005146 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	609a      	str	r2, [r3, #8]
      break;
 8004b96:	e04e      	b.n	8004c36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	6899      	ldr	r1, [r3, #8]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f000 facd 	bl	8005146 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bba:	609a      	str	r2, [r3, #8]
      break;
 8004bbc:	e03b      	b.n	8004c36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6859      	ldr	r1, [r3, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f000 fa44 	bl	8005058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2150      	movs	r1, #80	; 0x50
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fa9b 	bl	8005112 <TIM_ITRx_SetConfig>
      break;
 8004bdc:	e02b      	b.n	8004c36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6859      	ldr	r1, [r3, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	461a      	mov	r2, r3
 8004bec:	f000 fa62 	bl	80050b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2160      	movs	r1, #96	; 0x60
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fa8b 	bl	8005112 <TIM_ITRx_SetConfig>
      break;
 8004bfc:	e01b      	b.n	8004c36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6859      	ldr	r1, [r3, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f000 fa24 	bl	8005058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2140      	movs	r1, #64	; 0x40
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fa7b 	bl	8005112 <TIM_ITRx_SetConfig>
      break;
 8004c1c:	e00b      	b.n	8004c36 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4619      	mov	r1, r3
 8004c28:	4610      	mov	r0, r2
 8004c2a:	f000 fa72 	bl	8005112 <TIM_ITRx_SetConfig>
        break;
 8004c2e:	e002      	b.n	8004c36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c30:	bf00      	nop
 8004c32:	e000      	b.n	8004c36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr

08004c62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr

08004c74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr

08004c86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr

08004c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a25      	ldr	r2, [pc, #148]	; (8004d40 <TIM_Base_SetConfig+0xa8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d007      	beq.n	8004cc0 <TIM_Base_SetConfig+0x28>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb6:	d003      	beq.n	8004cc0 <TIM_Base_SetConfig+0x28>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a22      	ldr	r2, [pc, #136]	; (8004d44 <TIM_Base_SetConfig+0xac>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d108      	bne.n	8004cd2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a1a      	ldr	r2, [pc, #104]	; (8004d40 <TIM_Base_SetConfig+0xa8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d007      	beq.n	8004cea <TIM_Base_SetConfig+0x52>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce0:	d003      	beq.n	8004cea <TIM_Base_SetConfig+0x52>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a17      	ldr	r2, [pc, #92]	; (8004d44 <TIM_Base_SetConfig+0xac>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d108      	bne.n	8004cfc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a07      	ldr	r2, [pc, #28]	; (8004d40 <TIM_Base_SetConfig+0xa8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d103      	bne.n	8004d30 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	615a      	str	r2, [r3, #20]
}
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr
 8004d40:	40012c00 	.word	0x40012c00
 8004d44:	40000400 	.word	0x40000400

08004d48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	f023 0201 	bic.w	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0303 	bic.w	r3, r3, #3
 8004d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f023 0302 	bic.w	r3, r3, #2
 8004d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a1c      	ldr	r2, [pc, #112]	; (8004e10 <TIM_OC1_SetConfig+0xc8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d10c      	bne.n	8004dbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f023 0308 	bic.w	r3, r3, #8
 8004daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f023 0304 	bic.w	r3, r3, #4
 8004dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a13      	ldr	r2, [pc, #76]	; (8004e10 <TIM_OC1_SetConfig+0xc8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d111      	bne.n	8004dea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	621a      	str	r2, [r3, #32]
}
 8004e04:	bf00      	nop
 8004e06:	371c      	adds	r7, #28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bc80      	pop	{r7}
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40012c00 	.word	0x40012c00

08004e14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	f023 0210 	bic.w	r2, r3, #16
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f023 0320 	bic.w	r3, r3, #32
 8004e5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <TIM_OC2_SetConfig+0xd0>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d10d      	bne.n	8004e90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a14      	ldr	r2, [pc, #80]	; (8004ee4 <TIM_OC2_SetConfig+0xd0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d113      	bne.n	8004ec0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	621a      	str	r2, [r3, #32]
}
 8004eda:	bf00      	nop
 8004edc:	371c      	adds	r7, #28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr
 8004ee4:	40012c00 	.word	0x40012c00

08004ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0303 	bic.w	r3, r3, #3
 8004f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a1d      	ldr	r2, [pc, #116]	; (8004fb8 <TIM_OC3_SetConfig+0xd0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d10d      	bne.n	8004f62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	021b      	lsls	r3, r3, #8
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a14      	ldr	r2, [pc, #80]	; (8004fb8 <TIM_OC3_SetConfig+0xd0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d113      	bne.n	8004f92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	621a      	str	r2, [r3, #32]
}
 8004fac:	bf00      	nop
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40012c00 	.word	0x40012c00

08004fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	021b      	lsls	r3, r3, #8
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	031b      	lsls	r3, r3, #12
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a0f      	ldr	r2, [pc, #60]	; (8005054 <TIM_OC4_SetConfig+0x98>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d109      	bne.n	8005030 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	019b      	lsls	r3, r3, #6
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	621a      	str	r2, [r3, #32]
}
 800504a:	bf00      	nop
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr
 8005054:	40012c00 	.word	0x40012c00

08005058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f023 0201 	bic.w	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f023 030a 	bic.w	r3, r3, #10
 8005094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr

080050b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f023 0210 	bic.w	r2, r3, #16
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	031b      	lsls	r3, r3, #12
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	621a      	str	r2, [r3, #32]
}
 8005108:	bf00      	nop
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	bc80      	pop	{r7}
 8005110:	4770      	bx	lr

08005112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	f043 0307 	orr.w	r3, r3, #7
 8005134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	609a      	str	r2, [r3, #8]
}
 800513c:	bf00      	nop
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr

08005146 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005146:	b480      	push	{r7}
 8005148:	b087      	sub	sp, #28
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	607a      	str	r2, [r7, #4]
 8005152:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005160:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	021a      	lsls	r2, r3, #8
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	431a      	orrs	r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	4313      	orrs	r3, r2
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	609a      	str	r2, [r3, #8]
}
 800517a:	bf00      	nop
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	2201      	movs	r2, #1
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a1a      	ldr	r2, [r3, #32]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	43db      	mvns	r3, r3
 80051a6:	401a      	ands	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a1a      	ldr	r2, [r3, #32]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f003 031f 	and.w	r3, r3, #31
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	fa01 f303 	lsl.w	r3, r1, r3
 80051bc:	431a      	orrs	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr

080051cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051e0:	2302      	movs	r3, #2
 80051e2:	e041      	b.n	8005268 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a14      	ldr	r2, [pc, #80]	; (8005274 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d009      	beq.n	800523c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005230:	d004      	beq.n	800523c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a10      	ldr	r2, [pc, #64]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d10c      	bne.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005242:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	4313      	orrs	r3, r2
 800524c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40012c00 	.word	0x40012c00
 8005278:	40000400 	.word	0x40000400

0800527c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005294:	2302      	movs	r3, #2
 8005296:	e03d      	b.n	8005314 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	bc80      	pop	{r7}
 800531c:	4770      	bx	lr

0800531e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	bc80      	pop	{r7}
 800532e:	4770      	bx	lr

08005330 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr

08005342 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e03f      	b.n	80053d4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fd fbcb 	bl	8002b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2224      	movs	r2, #36	; 0x24
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005384:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f828 	bl	80053dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691a      	ldr	r2, [r3, #16]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800539a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695a      	ldr	r2, [r3, #20]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005416:	f023 030c 	bic.w	r3, r3, #12
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	430b      	orrs	r3, r1
 8005422:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a2c      	ldr	r2, [pc, #176]	; (80054f0 <UART_SetConfig+0x114>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d103      	bne.n	800544c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005444:	f7fe fb74 	bl	8003b30 <HAL_RCC_GetPCLK2Freq>
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	e002      	b.n	8005452 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800544c:	f7fe fb5c 	bl	8003b08 <HAL_RCC_GetPCLK1Freq>
 8005450:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	009a      	lsls	r2, r3, #2
 800545c:	441a      	add	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	fbb2 f3f3 	udiv	r3, r2, r3
 8005468:	4a22      	ldr	r2, [pc, #136]	; (80054f4 <UART_SetConfig+0x118>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	0119      	lsls	r1, r3, #4
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	009a      	lsls	r2, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	fbb2 f2f3 	udiv	r2, r2, r3
 8005488:	4b1a      	ldr	r3, [pc, #104]	; (80054f4 <UART_SetConfig+0x118>)
 800548a:	fba3 0302 	umull	r0, r3, r3, r2
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	2064      	movs	r0, #100	; 0x64
 8005492:	fb00 f303 	mul.w	r3, r0, r3
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	3332      	adds	r3, #50	; 0x32
 800549c:	4a15      	ldr	r2, [pc, #84]	; (80054f4 <UART_SetConfig+0x118>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054a8:	4419      	add	r1, r3
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	009a      	lsls	r2, r3, #2
 80054b4:	441a      	add	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80054c0:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <UART_SetConfig+0x118>)
 80054c2:	fba3 0302 	umull	r0, r3, r3, r2
 80054c6:	095b      	lsrs	r3, r3, #5
 80054c8:	2064      	movs	r0, #100	; 0x64
 80054ca:	fb00 f303 	mul.w	r3, r0, r3
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	3332      	adds	r3, #50	; 0x32
 80054d4:	4a07      	ldr	r2, [pc, #28]	; (80054f4 <UART_SetConfig+0x118>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	f003 020f 	and.w	r2, r3, #15
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	440a      	add	r2, r1
 80054e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40013800 	.word	0x40013800
 80054f4:	51eb851f 	.word	0x51eb851f

080054f8 <LL_ADC_REG_SetSequencerLength>:
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005506:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	431a      	orrs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	bc80      	pop	{r7}
 800551a:	4770      	bx	lr

0800551c <LL_ADC_IsEnabled>:
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b01      	cmp	r3, #1
 800552e:	bf0c      	ite	eq
 8005530:	2301      	moveq	r3, #1
 8005532:	2300      	movne	r3, #0
 8005534:	b2db      	uxtb	r3, r3
}
 8005536:	4618      	mov	r0, r3
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr

08005540 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8005540:	b590      	push	{r4, r7, lr}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800554a:	2300      	movs	r3, #0
 800554c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800554e:	4813      	ldr	r0, [pc, #76]	; (800559c <LL_ADC_CommonInit+0x5c>)
 8005550:	f7ff ffe4 	bl	800551c <LL_ADC_IsEnabled>
 8005554:	4604      	mov	r4, r0
 8005556:	4812      	ldr	r0, [pc, #72]	; (80055a0 <LL_ADC_CommonInit+0x60>)
 8005558:	f7ff ffe0 	bl	800551c <LL_ADC_IsEnabled>
 800555c:	4603      	mov	r3, r0
 800555e:	4323      	orrs	r3, r4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d114      	bne.n	800558e <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d009      	beq.n	8005580 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	431a      	orrs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	605a      	str	r2, [r3, #4]
 800557e:	e008      	b.n	8005592 <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	605a      	str	r2, [r3, #4]
 800558c:	e001      	b.n	8005592 <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8005592:	7bfb      	ldrb	r3, [r7, #15]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	bd90      	pop	{r4, r7, pc}
 800559c:	40012400 	.word	0x40012400
 80055a0:	40012800 	.word	0x40012800

080055a4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80055ae:	2300      	movs	r3, #0
 80055b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff ffb2 	bl	800551c <LL_ADC_IsEnabled>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d112      	bne.n	80055e4 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	609a      	str	r2, [r3, #8]
 80055e2:	e001      	b.n	80055e8 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80055fc:	2300      	movs	r3, #0
 80055fe:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff ff8b 	bl	800551c <LL_ADC_IsEnabled>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d131      	bne.n	8005670 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00c      	beq.n	800562e <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	6859      	ldr	r1, [r3, #4]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	430b      	orrs	r3, r1
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	605a      	str	r2, [r3, #4]
 800562c:	e008      	b.n	8005640 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8005648:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	6811      	ldr	r1, [r2, #0]
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	68d2      	ldr	r2, [r2, #12]
 8005654:	4311      	orrs	r1, r2
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	6912      	ldr	r2, [r2, #16]
 800565a:	430a      	orrs	r2, r1
 800565c:	431a      	orrs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	4619      	mov	r1, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff ff45 	bl	80054f8 <LL_ADC_REG_SetSequencerLength>
 800566e:	e001      	b.n	8005674 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800567e:	b490      	push	{r4, r7}
 8005680:	b088      	sub	sp, #32
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	461a      	mov	r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	0e1b      	lsrs	r3, r3, #24
 8005692:	4413      	add	r3, r2
 8005694:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8005696:	6822      	ldr	r2, [r4, #0]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	fa93 f3a3 	rbit	r3, r3
 80056a2:	613b      	str	r3, [r7, #16]
  return result;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	fab3 f383 	clz	r3, r3
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	210f      	movs	r1, #15
 80056b0:	fa01 f303 	lsl.w	r3, r1, r3
 80056b4:	43db      	mvns	r3, r3
 80056b6:	401a      	ands	r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	fa93 f3a3 	rbit	r3, r3
 80056c2:	61bb      	str	r3, [r7, #24]
  return result;
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	fab3 f383 	clz	r3, r3
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	fa01 f303 	lsl.w	r3, r1, r3
 80056d4:	4313      	orrs	r3, r2
 80056d6:	6023      	str	r3, [r4, #0]
}
 80056d8:	bf00      	nop
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc90      	pop	{r4, r7}
 80056e0:	4770      	bx	lr

080056e2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80056e2:	b490      	push	{r4, r7}
 80056e4:	b088      	sub	sp, #32
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	461a      	mov	r2, r3
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	0e1b      	lsrs	r3, r3, #24
 80056f6:	4413      	add	r3, r2
 80056f8:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80056fa:	6822      	ldr	r2, [r4, #0]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	fa93 f3a3 	rbit	r3, r3
 8005706:	613b      	str	r3, [r7, #16]
  return result;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	fab3 f383 	clz	r3, r3
 800570e:	b2db      	uxtb	r3, r3
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	2103      	movs	r1, #3
 8005714:	fa01 f303 	lsl.w	r3, r1, r3
 8005718:	43db      	mvns	r3, r3
 800571a:	401a      	ands	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	fa93 f3a3 	rbit	r3, r3
 8005726:	61bb      	str	r3, [r7, #24]
  return result;
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	fab3 f383 	clz	r3, r3
 800572e:	b2db      	uxtb	r3, r3
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	fa01 f303 	lsl.w	r3, r1, r3
 8005738:	4313      	orrs	r3, r2
 800573a:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 800573c:	bf00      	nop
 800573e:	3720      	adds	r7, #32
 8005740:	46bd      	mov	sp, r7
 8005742:	bc90      	pop	{r4, r7}
 8005744:	4770      	bx	lr

08005746 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8005746:	b490      	push	{r4, r7}
 8005748:	b088      	sub	sp, #32
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	461a      	mov	r2, r3
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	0e1b      	lsrs	r3, r3, #24
 800575a:	4413      	add	r3, r2
 800575c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800575e:	6822      	ldr	r2, [r4, #0]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	fa93 f3a3 	rbit	r3, r3
 800576a:	613b      	str	r3, [r7, #16]
  return result;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	fab3 f383 	clz	r3, r3
 8005772:	b2db      	uxtb	r3, r3
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	2104      	movs	r1, #4
 8005778:	fa01 f303 	lsl.w	r3, r1, r3
 800577c:	43db      	mvns	r3, r3
 800577e:	401a      	ands	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	fa93 f3a3 	rbit	r3, r3
 800578a:	61bb      	str	r3, [r7, #24]
  return result;
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	fab3 f383 	clz	r3, r3
 8005792:	b2db      	uxtb	r3, r3
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	fa01 f303 	lsl.w	r3, r1, r3
 800579c:	4313      	orrs	r3, r2
 800579e:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 80057a0:	bf00      	nop
 80057a2:	3720      	adds	r7, #32
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bc90      	pop	{r4, r7}
 80057a8:	4770      	bx	lr

080057aa <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b087      	sub	sp, #28
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	0a1b      	lsrs	r3, r3, #8
 80057be:	43db      	mvns	r3, r3
 80057c0:	401a      	ands	r2, r3
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	0a1b      	lsrs	r3, r3, #8
 80057c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	fa93 f3a3 	rbit	r3, r3
 80057ce:	613b      	str	r3, [r7, #16]
  return result;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	fab3 f383 	clz	r3, r3
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	4619      	mov	r1, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	408b      	lsls	r3, r1
 80057de:	431a      	orrs	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	60da      	str	r2, [r3, #12]
}
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bc80      	pop	{r7}
 80057ec:	4770      	bx	lr

080057ee <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b088      	sub	sp, #32
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	0c1b      	lsrs	r3, r3, #16
 8005800:	617b      	str	r3, [r7, #20]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	fa93 f3a3 	rbit	r3, r3
 800580c:	60fb      	str	r3, [r7, #12]
  return result;
 800580e:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8005810:	fab3 f383 	clz	r3, r3
 8005814:	b2db      	uxtb	r3, r3
 8005816:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8005818:	e044      	b.n	80058a4 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800581a:	2201      	movs	r2, #1
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	409a      	lsls	r2, r3
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	4013      	ands	r3, r2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d03a      	beq.n	800589e <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2b07      	cmp	r3, #7
 800582c:	d806      	bhi.n	800583c <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800582e:	f240 1201 	movw	r2, #257	; 0x101
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	e008      	b.n	800584e <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	3b08      	subs	r3, #8
 8005840:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800584c:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2b08      	cmp	r3, #8
 8005854:	d106      	bne.n	8005864 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	461a      	mov	r2, r3
 800585c:	69b9      	ldr	r1, [r7, #24]
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7ff ffa3 	bl	80057aa <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	461a      	mov	r2, r3
 800586a:	69b9      	ldr	r1, [r7, #24]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7ff ff06 	bl	800567e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d003      	beq.n	8005882 <LL_GPIO_Init+0x94>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2b09      	cmp	r3, #9
 8005880:	d10d      	bne.n	800589e <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	461a      	mov	r2, r3
 8005888:	69b9      	ldr	r1, [r7, #24]
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff ff29 	bl	80056e2 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	461a      	mov	r2, r3
 8005896:	69b9      	ldr	r1, [r7, #24]
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff ff54 	bl	8005746 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	3301      	adds	r3, #1
 80058a2:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	fa22 f303 	lsr.w	r3, r2, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1b4      	bne.n	800581a <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3720      	adds	r7, #32
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <__errno>:
 80058bc:	4b01      	ldr	r3, [pc, #4]	; (80058c4 <__errno+0x8>)
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20000014 	.word	0x20000014

080058c8 <__libc_init_array>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	2600      	movs	r6, #0
 80058cc:	4d0c      	ldr	r5, [pc, #48]	; (8005900 <__libc_init_array+0x38>)
 80058ce:	4c0d      	ldr	r4, [pc, #52]	; (8005904 <__libc_init_array+0x3c>)
 80058d0:	1b64      	subs	r4, r4, r5
 80058d2:	10a4      	asrs	r4, r4, #2
 80058d4:	42a6      	cmp	r6, r4
 80058d6:	d109      	bne.n	80058ec <__libc_init_array+0x24>
 80058d8:	f000 fc9c 	bl	8006214 <_init>
 80058dc:	2600      	movs	r6, #0
 80058de:	4d0a      	ldr	r5, [pc, #40]	; (8005908 <__libc_init_array+0x40>)
 80058e0:	4c0a      	ldr	r4, [pc, #40]	; (800590c <__libc_init_array+0x44>)
 80058e2:	1b64      	subs	r4, r4, r5
 80058e4:	10a4      	asrs	r4, r4, #2
 80058e6:	42a6      	cmp	r6, r4
 80058e8:	d105      	bne.n	80058f6 <__libc_init_array+0x2e>
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
 80058ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f0:	4798      	blx	r3
 80058f2:	3601      	adds	r6, #1
 80058f4:	e7ee      	b.n	80058d4 <__libc_init_array+0xc>
 80058f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058fa:	4798      	blx	r3
 80058fc:	3601      	adds	r6, #1
 80058fe:	e7f2      	b.n	80058e6 <__libc_init_array+0x1e>
 8005900:	080065f4 	.word	0x080065f4
 8005904:	080065f4 	.word	0x080065f4
 8005908:	080065f4 	.word	0x080065f4
 800590c:	080065f8 	.word	0x080065f8

08005910 <memcpy>:
 8005910:	440a      	add	r2, r1
 8005912:	4291      	cmp	r1, r2
 8005914:	f100 33ff 	add.w	r3, r0, #4294967295
 8005918:	d100      	bne.n	800591c <memcpy+0xc>
 800591a:	4770      	bx	lr
 800591c:	b510      	push	{r4, lr}
 800591e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005922:	4291      	cmp	r1, r2
 8005924:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005928:	d1f9      	bne.n	800591e <memcpy+0xe>
 800592a:	bd10      	pop	{r4, pc}

0800592c <memset>:
 800592c:	4603      	mov	r3, r0
 800592e:	4402      	add	r2, r0
 8005930:	4293      	cmp	r3, r2
 8005932:	d100      	bne.n	8005936 <memset+0xa>
 8005934:	4770      	bx	lr
 8005936:	f803 1b01 	strb.w	r1, [r3], #1
 800593a:	e7f9      	b.n	8005930 <memset+0x4>

0800593c <siprintf>:
 800593c:	b40e      	push	{r1, r2, r3}
 800593e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005942:	b500      	push	{lr}
 8005944:	b09c      	sub	sp, #112	; 0x70
 8005946:	ab1d      	add	r3, sp, #116	; 0x74
 8005948:	9002      	str	r0, [sp, #8]
 800594a:	9006      	str	r0, [sp, #24]
 800594c:	9107      	str	r1, [sp, #28]
 800594e:	9104      	str	r1, [sp, #16]
 8005950:	4808      	ldr	r0, [pc, #32]	; (8005974 <siprintf+0x38>)
 8005952:	4909      	ldr	r1, [pc, #36]	; (8005978 <siprintf+0x3c>)
 8005954:	f853 2b04 	ldr.w	r2, [r3], #4
 8005958:	9105      	str	r1, [sp, #20]
 800595a:	6800      	ldr	r0, [r0, #0]
 800595c:	a902      	add	r1, sp, #8
 800595e:	9301      	str	r3, [sp, #4]
 8005960:	f000 f868 	bl	8005a34 <_svfiprintf_r>
 8005964:	2200      	movs	r2, #0
 8005966:	9b02      	ldr	r3, [sp, #8]
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	b01c      	add	sp, #112	; 0x70
 800596c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005970:	b003      	add	sp, #12
 8005972:	4770      	bx	lr
 8005974:	20000014 	.word	0x20000014
 8005978:	ffff0208 	.word	0xffff0208

0800597c <__ssputs_r>:
 800597c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005980:	688e      	ldr	r6, [r1, #8]
 8005982:	4682      	mov	sl, r0
 8005984:	429e      	cmp	r6, r3
 8005986:	460c      	mov	r4, r1
 8005988:	4690      	mov	r8, r2
 800598a:	461f      	mov	r7, r3
 800598c:	d838      	bhi.n	8005a00 <__ssputs_r+0x84>
 800598e:	898a      	ldrh	r2, [r1, #12]
 8005990:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005994:	d032      	beq.n	80059fc <__ssputs_r+0x80>
 8005996:	6825      	ldr	r5, [r4, #0]
 8005998:	6909      	ldr	r1, [r1, #16]
 800599a:	3301      	adds	r3, #1
 800599c:	eba5 0901 	sub.w	r9, r5, r1
 80059a0:	6965      	ldr	r5, [r4, #20]
 80059a2:	444b      	add	r3, r9
 80059a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059ac:	106d      	asrs	r5, r5, #1
 80059ae:	429d      	cmp	r5, r3
 80059b0:	bf38      	it	cc
 80059b2:	461d      	movcc	r5, r3
 80059b4:	0553      	lsls	r3, r2, #21
 80059b6:	d531      	bpl.n	8005a1c <__ssputs_r+0xa0>
 80059b8:	4629      	mov	r1, r5
 80059ba:	f000 fb61 	bl	8006080 <_malloc_r>
 80059be:	4606      	mov	r6, r0
 80059c0:	b950      	cbnz	r0, 80059d8 <__ssputs_r+0x5c>
 80059c2:	230c      	movs	r3, #12
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295
 80059c8:	f8ca 3000 	str.w	r3, [sl]
 80059cc:	89a3      	ldrh	r3, [r4, #12]
 80059ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059d2:	81a3      	strh	r3, [r4, #12]
 80059d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d8:	464a      	mov	r2, r9
 80059da:	6921      	ldr	r1, [r4, #16]
 80059dc:	f7ff ff98 	bl	8005910 <memcpy>
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ea:	81a3      	strh	r3, [r4, #12]
 80059ec:	6126      	str	r6, [r4, #16]
 80059ee:	444e      	add	r6, r9
 80059f0:	6026      	str	r6, [r4, #0]
 80059f2:	463e      	mov	r6, r7
 80059f4:	6165      	str	r5, [r4, #20]
 80059f6:	eba5 0509 	sub.w	r5, r5, r9
 80059fa:	60a5      	str	r5, [r4, #8]
 80059fc:	42be      	cmp	r6, r7
 80059fe:	d900      	bls.n	8005a02 <__ssputs_r+0x86>
 8005a00:	463e      	mov	r6, r7
 8005a02:	4632      	mov	r2, r6
 8005a04:	4641      	mov	r1, r8
 8005a06:	6820      	ldr	r0, [r4, #0]
 8005a08:	f000 fab8 	bl	8005f7c <memmove>
 8005a0c:	68a3      	ldr	r3, [r4, #8]
 8005a0e:	2000      	movs	r0, #0
 8005a10:	1b9b      	subs	r3, r3, r6
 8005a12:	60a3      	str	r3, [r4, #8]
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	4433      	add	r3, r6
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	e7db      	b.n	80059d4 <__ssputs_r+0x58>
 8005a1c:	462a      	mov	r2, r5
 8005a1e:	f000 fba3 	bl	8006168 <_realloc_r>
 8005a22:	4606      	mov	r6, r0
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d1e1      	bne.n	80059ec <__ssputs_r+0x70>
 8005a28:	4650      	mov	r0, sl
 8005a2a:	6921      	ldr	r1, [r4, #16]
 8005a2c:	f000 fac0 	bl	8005fb0 <_free_r>
 8005a30:	e7c7      	b.n	80059c2 <__ssputs_r+0x46>
	...

08005a34 <_svfiprintf_r>:
 8005a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a38:	4698      	mov	r8, r3
 8005a3a:	898b      	ldrh	r3, [r1, #12]
 8005a3c:	4607      	mov	r7, r0
 8005a3e:	061b      	lsls	r3, r3, #24
 8005a40:	460d      	mov	r5, r1
 8005a42:	4614      	mov	r4, r2
 8005a44:	b09d      	sub	sp, #116	; 0x74
 8005a46:	d50e      	bpl.n	8005a66 <_svfiprintf_r+0x32>
 8005a48:	690b      	ldr	r3, [r1, #16]
 8005a4a:	b963      	cbnz	r3, 8005a66 <_svfiprintf_r+0x32>
 8005a4c:	2140      	movs	r1, #64	; 0x40
 8005a4e:	f000 fb17 	bl	8006080 <_malloc_r>
 8005a52:	6028      	str	r0, [r5, #0]
 8005a54:	6128      	str	r0, [r5, #16]
 8005a56:	b920      	cbnz	r0, 8005a62 <_svfiprintf_r+0x2e>
 8005a58:	230c      	movs	r3, #12
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a60:	e0d1      	b.n	8005c06 <_svfiprintf_r+0x1d2>
 8005a62:	2340      	movs	r3, #64	; 0x40
 8005a64:	616b      	str	r3, [r5, #20]
 8005a66:	2300      	movs	r3, #0
 8005a68:	9309      	str	r3, [sp, #36]	; 0x24
 8005a6a:	2320      	movs	r3, #32
 8005a6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a70:	2330      	movs	r3, #48	; 0x30
 8005a72:	f04f 0901 	mov.w	r9, #1
 8005a76:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005c20 <_svfiprintf_r+0x1ec>
 8005a7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a82:	4623      	mov	r3, r4
 8005a84:	469a      	mov	sl, r3
 8005a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a8a:	b10a      	cbz	r2, 8005a90 <_svfiprintf_r+0x5c>
 8005a8c:	2a25      	cmp	r2, #37	; 0x25
 8005a8e:	d1f9      	bne.n	8005a84 <_svfiprintf_r+0x50>
 8005a90:	ebba 0b04 	subs.w	fp, sl, r4
 8005a94:	d00b      	beq.n	8005aae <_svfiprintf_r+0x7a>
 8005a96:	465b      	mov	r3, fp
 8005a98:	4622      	mov	r2, r4
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	4638      	mov	r0, r7
 8005a9e:	f7ff ff6d 	bl	800597c <__ssputs_r>
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	f000 80aa 	beq.w	8005bfc <_svfiprintf_r+0x1c8>
 8005aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aaa:	445a      	add	r2, fp
 8005aac:	9209      	str	r2, [sp, #36]	; 0x24
 8005aae:	f89a 3000 	ldrb.w	r3, [sl]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 80a2 	beq.w	8005bfc <_svfiprintf_r+0x1c8>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f04f 32ff 	mov.w	r2, #4294967295
 8005abe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ac2:	f10a 0a01 	add.w	sl, sl, #1
 8005ac6:	9304      	str	r3, [sp, #16]
 8005ac8:	9307      	str	r3, [sp, #28]
 8005aca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ace:	931a      	str	r3, [sp, #104]	; 0x68
 8005ad0:	4654      	mov	r4, sl
 8005ad2:	2205      	movs	r2, #5
 8005ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad8:	4851      	ldr	r0, [pc, #324]	; (8005c20 <_svfiprintf_r+0x1ec>)
 8005ada:	f000 fa41 	bl	8005f60 <memchr>
 8005ade:	9a04      	ldr	r2, [sp, #16]
 8005ae0:	b9d8      	cbnz	r0, 8005b1a <_svfiprintf_r+0xe6>
 8005ae2:	06d0      	lsls	r0, r2, #27
 8005ae4:	bf44      	itt	mi
 8005ae6:	2320      	movmi	r3, #32
 8005ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aec:	0711      	lsls	r1, r2, #28
 8005aee:	bf44      	itt	mi
 8005af0:	232b      	movmi	r3, #43	; 0x2b
 8005af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005af6:	f89a 3000 	ldrb.w	r3, [sl]
 8005afa:	2b2a      	cmp	r3, #42	; 0x2a
 8005afc:	d015      	beq.n	8005b2a <_svfiprintf_r+0xf6>
 8005afe:	4654      	mov	r4, sl
 8005b00:	2000      	movs	r0, #0
 8005b02:	f04f 0c0a 	mov.w	ip, #10
 8005b06:	9a07      	ldr	r2, [sp, #28]
 8005b08:	4621      	mov	r1, r4
 8005b0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b0e:	3b30      	subs	r3, #48	; 0x30
 8005b10:	2b09      	cmp	r3, #9
 8005b12:	d94e      	bls.n	8005bb2 <_svfiprintf_r+0x17e>
 8005b14:	b1b0      	cbz	r0, 8005b44 <_svfiprintf_r+0x110>
 8005b16:	9207      	str	r2, [sp, #28]
 8005b18:	e014      	b.n	8005b44 <_svfiprintf_r+0x110>
 8005b1a:	eba0 0308 	sub.w	r3, r0, r8
 8005b1e:	fa09 f303 	lsl.w	r3, r9, r3
 8005b22:	4313      	orrs	r3, r2
 8005b24:	46a2      	mov	sl, r4
 8005b26:	9304      	str	r3, [sp, #16]
 8005b28:	e7d2      	b.n	8005ad0 <_svfiprintf_r+0x9c>
 8005b2a:	9b03      	ldr	r3, [sp, #12]
 8005b2c:	1d19      	adds	r1, r3, #4
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	9103      	str	r1, [sp, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	bfbb      	ittet	lt
 8005b36:	425b      	neglt	r3, r3
 8005b38:	f042 0202 	orrlt.w	r2, r2, #2
 8005b3c:	9307      	strge	r3, [sp, #28]
 8005b3e:	9307      	strlt	r3, [sp, #28]
 8005b40:	bfb8      	it	lt
 8005b42:	9204      	strlt	r2, [sp, #16]
 8005b44:	7823      	ldrb	r3, [r4, #0]
 8005b46:	2b2e      	cmp	r3, #46	; 0x2e
 8005b48:	d10c      	bne.n	8005b64 <_svfiprintf_r+0x130>
 8005b4a:	7863      	ldrb	r3, [r4, #1]
 8005b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b4e:	d135      	bne.n	8005bbc <_svfiprintf_r+0x188>
 8005b50:	9b03      	ldr	r3, [sp, #12]
 8005b52:	3402      	adds	r4, #2
 8005b54:	1d1a      	adds	r2, r3, #4
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	9203      	str	r2, [sp, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	bfb8      	it	lt
 8005b5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b62:	9305      	str	r3, [sp, #20]
 8005b64:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005c24 <_svfiprintf_r+0x1f0>
 8005b68:	2203      	movs	r2, #3
 8005b6a:	4650      	mov	r0, sl
 8005b6c:	7821      	ldrb	r1, [r4, #0]
 8005b6e:	f000 f9f7 	bl	8005f60 <memchr>
 8005b72:	b140      	cbz	r0, 8005b86 <_svfiprintf_r+0x152>
 8005b74:	2340      	movs	r3, #64	; 0x40
 8005b76:	eba0 000a 	sub.w	r0, r0, sl
 8005b7a:	fa03 f000 	lsl.w	r0, r3, r0
 8005b7e:	9b04      	ldr	r3, [sp, #16]
 8005b80:	3401      	adds	r4, #1
 8005b82:	4303      	orrs	r3, r0
 8005b84:	9304      	str	r3, [sp, #16]
 8005b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b8a:	2206      	movs	r2, #6
 8005b8c:	4826      	ldr	r0, [pc, #152]	; (8005c28 <_svfiprintf_r+0x1f4>)
 8005b8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b92:	f000 f9e5 	bl	8005f60 <memchr>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	d038      	beq.n	8005c0c <_svfiprintf_r+0x1d8>
 8005b9a:	4b24      	ldr	r3, [pc, #144]	; (8005c2c <_svfiprintf_r+0x1f8>)
 8005b9c:	bb1b      	cbnz	r3, 8005be6 <_svfiprintf_r+0x1b2>
 8005b9e:	9b03      	ldr	r3, [sp, #12]
 8005ba0:	3307      	adds	r3, #7
 8005ba2:	f023 0307 	bic.w	r3, r3, #7
 8005ba6:	3308      	adds	r3, #8
 8005ba8:	9303      	str	r3, [sp, #12]
 8005baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bac:	4433      	add	r3, r6
 8005bae:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb0:	e767      	b.n	8005a82 <_svfiprintf_r+0x4e>
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	2001      	movs	r0, #1
 8005bb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bba:	e7a5      	b.n	8005b08 <_svfiprintf_r+0xd4>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f04f 0c0a 	mov.w	ip, #10
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	3401      	adds	r4, #1
 8005bc6:	9305      	str	r3, [sp, #20]
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bce:	3a30      	subs	r2, #48	; 0x30
 8005bd0:	2a09      	cmp	r2, #9
 8005bd2:	d903      	bls.n	8005bdc <_svfiprintf_r+0x1a8>
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d0c5      	beq.n	8005b64 <_svfiprintf_r+0x130>
 8005bd8:	9105      	str	r1, [sp, #20]
 8005bda:	e7c3      	b.n	8005b64 <_svfiprintf_r+0x130>
 8005bdc:	4604      	mov	r4, r0
 8005bde:	2301      	movs	r3, #1
 8005be0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005be4:	e7f0      	b.n	8005bc8 <_svfiprintf_r+0x194>
 8005be6:	ab03      	add	r3, sp, #12
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	462a      	mov	r2, r5
 8005bec:	4638      	mov	r0, r7
 8005bee:	4b10      	ldr	r3, [pc, #64]	; (8005c30 <_svfiprintf_r+0x1fc>)
 8005bf0:	a904      	add	r1, sp, #16
 8005bf2:	f3af 8000 	nop.w
 8005bf6:	1c42      	adds	r2, r0, #1
 8005bf8:	4606      	mov	r6, r0
 8005bfa:	d1d6      	bne.n	8005baa <_svfiprintf_r+0x176>
 8005bfc:	89ab      	ldrh	r3, [r5, #12]
 8005bfe:	065b      	lsls	r3, r3, #25
 8005c00:	f53f af2c 	bmi.w	8005a5c <_svfiprintf_r+0x28>
 8005c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c06:	b01d      	add	sp, #116	; 0x74
 8005c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c0c:	ab03      	add	r3, sp, #12
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	462a      	mov	r2, r5
 8005c12:	4638      	mov	r0, r7
 8005c14:	4b06      	ldr	r3, [pc, #24]	; (8005c30 <_svfiprintf_r+0x1fc>)
 8005c16:	a904      	add	r1, sp, #16
 8005c18:	f000 f87c 	bl	8005d14 <_printf_i>
 8005c1c:	e7eb      	b.n	8005bf6 <_svfiprintf_r+0x1c2>
 8005c1e:	bf00      	nop
 8005c20:	080065c0 	.word	0x080065c0
 8005c24:	080065c6 	.word	0x080065c6
 8005c28:	080065ca 	.word	0x080065ca
 8005c2c:	00000000 	.word	0x00000000
 8005c30:	0800597d 	.word	0x0800597d

08005c34 <_printf_common>:
 8005c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c38:	4616      	mov	r6, r2
 8005c3a:	4699      	mov	r9, r3
 8005c3c:	688a      	ldr	r2, [r1, #8]
 8005c3e:	690b      	ldr	r3, [r1, #16]
 8005c40:	4607      	mov	r7, r0
 8005c42:	4293      	cmp	r3, r2
 8005c44:	bfb8      	it	lt
 8005c46:	4613      	movlt	r3, r2
 8005c48:	6033      	str	r3, [r6, #0]
 8005c4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c4e:	460c      	mov	r4, r1
 8005c50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c54:	b10a      	cbz	r2, 8005c5a <_printf_common+0x26>
 8005c56:	3301      	adds	r3, #1
 8005c58:	6033      	str	r3, [r6, #0]
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	0699      	lsls	r1, r3, #26
 8005c5e:	bf42      	ittt	mi
 8005c60:	6833      	ldrmi	r3, [r6, #0]
 8005c62:	3302      	addmi	r3, #2
 8005c64:	6033      	strmi	r3, [r6, #0]
 8005c66:	6825      	ldr	r5, [r4, #0]
 8005c68:	f015 0506 	ands.w	r5, r5, #6
 8005c6c:	d106      	bne.n	8005c7c <_printf_common+0x48>
 8005c6e:	f104 0a19 	add.w	sl, r4, #25
 8005c72:	68e3      	ldr	r3, [r4, #12]
 8005c74:	6832      	ldr	r2, [r6, #0]
 8005c76:	1a9b      	subs	r3, r3, r2
 8005c78:	42ab      	cmp	r3, r5
 8005c7a:	dc28      	bgt.n	8005cce <_printf_common+0x9a>
 8005c7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c80:	1e13      	subs	r3, r2, #0
 8005c82:	6822      	ldr	r2, [r4, #0]
 8005c84:	bf18      	it	ne
 8005c86:	2301      	movne	r3, #1
 8005c88:	0692      	lsls	r2, r2, #26
 8005c8a:	d42d      	bmi.n	8005ce8 <_printf_common+0xb4>
 8005c8c:	4649      	mov	r1, r9
 8005c8e:	4638      	mov	r0, r7
 8005c90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c94:	47c0      	blx	r8
 8005c96:	3001      	adds	r0, #1
 8005c98:	d020      	beq.n	8005cdc <_printf_common+0xa8>
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	68e5      	ldr	r5, [r4, #12]
 8005c9e:	f003 0306 	and.w	r3, r3, #6
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	bf18      	it	ne
 8005ca6:	2500      	movne	r5, #0
 8005ca8:	6832      	ldr	r2, [r6, #0]
 8005caa:	f04f 0600 	mov.w	r6, #0
 8005cae:	68a3      	ldr	r3, [r4, #8]
 8005cb0:	bf08      	it	eq
 8005cb2:	1aad      	subeq	r5, r5, r2
 8005cb4:	6922      	ldr	r2, [r4, #16]
 8005cb6:	bf08      	it	eq
 8005cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	bfc4      	itt	gt
 8005cc0:	1a9b      	subgt	r3, r3, r2
 8005cc2:	18ed      	addgt	r5, r5, r3
 8005cc4:	341a      	adds	r4, #26
 8005cc6:	42b5      	cmp	r5, r6
 8005cc8:	d11a      	bne.n	8005d00 <_printf_common+0xcc>
 8005cca:	2000      	movs	r0, #0
 8005ccc:	e008      	b.n	8005ce0 <_printf_common+0xac>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	4652      	mov	r2, sl
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	4638      	mov	r0, r7
 8005cd6:	47c0      	blx	r8
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d103      	bne.n	8005ce4 <_printf_common+0xb0>
 8005cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce4:	3501      	adds	r5, #1
 8005ce6:	e7c4      	b.n	8005c72 <_printf_common+0x3e>
 8005ce8:	2030      	movs	r0, #48	; 0x30
 8005cea:	18e1      	adds	r1, r4, r3
 8005cec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cf0:	1c5a      	adds	r2, r3, #1
 8005cf2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cf6:	4422      	add	r2, r4
 8005cf8:	3302      	adds	r3, #2
 8005cfa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cfe:	e7c5      	b.n	8005c8c <_printf_common+0x58>
 8005d00:	2301      	movs	r3, #1
 8005d02:	4622      	mov	r2, r4
 8005d04:	4649      	mov	r1, r9
 8005d06:	4638      	mov	r0, r7
 8005d08:	47c0      	blx	r8
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	d0e6      	beq.n	8005cdc <_printf_common+0xa8>
 8005d0e:	3601      	adds	r6, #1
 8005d10:	e7d9      	b.n	8005cc6 <_printf_common+0x92>
	...

08005d14 <_printf_i>:
 8005d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d18:	7e0f      	ldrb	r7, [r1, #24]
 8005d1a:	4691      	mov	r9, r2
 8005d1c:	2f78      	cmp	r7, #120	; 0x78
 8005d1e:	4680      	mov	r8, r0
 8005d20:	460c      	mov	r4, r1
 8005d22:	469a      	mov	sl, r3
 8005d24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d2a:	d807      	bhi.n	8005d3c <_printf_i+0x28>
 8005d2c:	2f62      	cmp	r7, #98	; 0x62
 8005d2e:	d80a      	bhi.n	8005d46 <_printf_i+0x32>
 8005d30:	2f00      	cmp	r7, #0
 8005d32:	f000 80d9 	beq.w	8005ee8 <_printf_i+0x1d4>
 8005d36:	2f58      	cmp	r7, #88	; 0x58
 8005d38:	f000 80a4 	beq.w	8005e84 <_printf_i+0x170>
 8005d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d44:	e03a      	b.n	8005dbc <_printf_i+0xa8>
 8005d46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d4a:	2b15      	cmp	r3, #21
 8005d4c:	d8f6      	bhi.n	8005d3c <_printf_i+0x28>
 8005d4e:	a101      	add	r1, pc, #4	; (adr r1, 8005d54 <_printf_i+0x40>)
 8005d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d54:	08005dad 	.word	0x08005dad
 8005d58:	08005dc1 	.word	0x08005dc1
 8005d5c:	08005d3d 	.word	0x08005d3d
 8005d60:	08005d3d 	.word	0x08005d3d
 8005d64:	08005d3d 	.word	0x08005d3d
 8005d68:	08005d3d 	.word	0x08005d3d
 8005d6c:	08005dc1 	.word	0x08005dc1
 8005d70:	08005d3d 	.word	0x08005d3d
 8005d74:	08005d3d 	.word	0x08005d3d
 8005d78:	08005d3d 	.word	0x08005d3d
 8005d7c:	08005d3d 	.word	0x08005d3d
 8005d80:	08005ecf 	.word	0x08005ecf
 8005d84:	08005df1 	.word	0x08005df1
 8005d88:	08005eb1 	.word	0x08005eb1
 8005d8c:	08005d3d 	.word	0x08005d3d
 8005d90:	08005d3d 	.word	0x08005d3d
 8005d94:	08005ef1 	.word	0x08005ef1
 8005d98:	08005d3d 	.word	0x08005d3d
 8005d9c:	08005df1 	.word	0x08005df1
 8005da0:	08005d3d 	.word	0x08005d3d
 8005da4:	08005d3d 	.word	0x08005d3d
 8005da8:	08005eb9 	.word	0x08005eb9
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	1d1a      	adds	r2, r3, #4
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	602a      	str	r2, [r5, #0]
 8005db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e0a4      	b.n	8005f0a <_printf_i+0x1f6>
 8005dc0:	6820      	ldr	r0, [r4, #0]
 8005dc2:	6829      	ldr	r1, [r5, #0]
 8005dc4:	0606      	lsls	r6, r0, #24
 8005dc6:	f101 0304 	add.w	r3, r1, #4
 8005dca:	d50a      	bpl.n	8005de2 <_printf_i+0xce>
 8005dcc:	680e      	ldr	r6, [r1, #0]
 8005dce:	602b      	str	r3, [r5, #0]
 8005dd0:	2e00      	cmp	r6, #0
 8005dd2:	da03      	bge.n	8005ddc <_printf_i+0xc8>
 8005dd4:	232d      	movs	r3, #45	; 0x2d
 8005dd6:	4276      	negs	r6, r6
 8005dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ddc:	230a      	movs	r3, #10
 8005dde:	485e      	ldr	r0, [pc, #376]	; (8005f58 <_printf_i+0x244>)
 8005de0:	e019      	b.n	8005e16 <_printf_i+0x102>
 8005de2:	680e      	ldr	r6, [r1, #0]
 8005de4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005de8:	602b      	str	r3, [r5, #0]
 8005dea:	bf18      	it	ne
 8005dec:	b236      	sxthne	r6, r6
 8005dee:	e7ef      	b.n	8005dd0 <_printf_i+0xbc>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	6820      	ldr	r0, [r4, #0]
 8005df4:	1d19      	adds	r1, r3, #4
 8005df6:	6029      	str	r1, [r5, #0]
 8005df8:	0601      	lsls	r1, r0, #24
 8005dfa:	d501      	bpl.n	8005e00 <_printf_i+0xec>
 8005dfc:	681e      	ldr	r6, [r3, #0]
 8005dfe:	e002      	b.n	8005e06 <_printf_i+0xf2>
 8005e00:	0646      	lsls	r6, r0, #25
 8005e02:	d5fb      	bpl.n	8005dfc <_printf_i+0xe8>
 8005e04:	881e      	ldrh	r6, [r3, #0]
 8005e06:	2f6f      	cmp	r7, #111	; 0x6f
 8005e08:	bf0c      	ite	eq
 8005e0a:	2308      	moveq	r3, #8
 8005e0c:	230a      	movne	r3, #10
 8005e0e:	4852      	ldr	r0, [pc, #328]	; (8005f58 <_printf_i+0x244>)
 8005e10:	2100      	movs	r1, #0
 8005e12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e16:	6865      	ldr	r5, [r4, #4]
 8005e18:	2d00      	cmp	r5, #0
 8005e1a:	bfa8      	it	ge
 8005e1c:	6821      	ldrge	r1, [r4, #0]
 8005e1e:	60a5      	str	r5, [r4, #8]
 8005e20:	bfa4      	itt	ge
 8005e22:	f021 0104 	bicge.w	r1, r1, #4
 8005e26:	6021      	strge	r1, [r4, #0]
 8005e28:	b90e      	cbnz	r6, 8005e2e <_printf_i+0x11a>
 8005e2a:	2d00      	cmp	r5, #0
 8005e2c:	d04d      	beq.n	8005eca <_printf_i+0x1b6>
 8005e2e:	4615      	mov	r5, r2
 8005e30:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e34:	fb03 6711 	mls	r7, r3, r1, r6
 8005e38:	5dc7      	ldrb	r7, [r0, r7]
 8005e3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e3e:	4637      	mov	r7, r6
 8005e40:	42bb      	cmp	r3, r7
 8005e42:	460e      	mov	r6, r1
 8005e44:	d9f4      	bls.n	8005e30 <_printf_i+0x11c>
 8005e46:	2b08      	cmp	r3, #8
 8005e48:	d10b      	bne.n	8005e62 <_printf_i+0x14e>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	07de      	lsls	r6, r3, #31
 8005e4e:	d508      	bpl.n	8005e62 <_printf_i+0x14e>
 8005e50:	6923      	ldr	r3, [r4, #16]
 8005e52:	6861      	ldr	r1, [r4, #4]
 8005e54:	4299      	cmp	r1, r3
 8005e56:	bfde      	ittt	le
 8005e58:	2330      	movle	r3, #48	; 0x30
 8005e5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e62:	1b52      	subs	r2, r2, r5
 8005e64:	6122      	str	r2, [r4, #16]
 8005e66:	464b      	mov	r3, r9
 8005e68:	4621      	mov	r1, r4
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	f8cd a000 	str.w	sl, [sp]
 8005e70:	aa03      	add	r2, sp, #12
 8005e72:	f7ff fedf 	bl	8005c34 <_printf_common>
 8005e76:	3001      	adds	r0, #1
 8005e78:	d14c      	bne.n	8005f14 <_printf_i+0x200>
 8005e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7e:	b004      	add	sp, #16
 8005e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e84:	4834      	ldr	r0, [pc, #208]	; (8005f58 <_printf_i+0x244>)
 8005e86:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e8a:	6829      	ldr	r1, [r5, #0]
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e92:	6029      	str	r1, [r5, #0]
 8005e94:	061d      	lsls	r5, r3, #24
 8005e96:	d514      	bpl.n	8005ec2 <_printf_i+0x1ae>
 8005e98:	07df      	lsls	r7, r3, #31
 8005e9a:	bf44      	itt	mi
 8005e9c:	f043 0320 	orrmi.w	r3, r3, #32
 8005ea0:	6023      	strmi	r3, [r4, #0]
 8005ea2:	b91e      	cbnz	r6, 8005eac <_printf_i+0x198>
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	f023 0320 	bic.w	r3, r3, #32
 8005eaa:	6023      	str	r3, [r4, #0]
 8005eac:	2310      	movs	r3, #16
 8005eae:	e7af      	b.n	8005e10 <_printf_i+0xfc>
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	f043 0320 	orr.w	r3, r3, #32
 8005eb6:	6023      	str	r3, [r4, #0]
 8005eb8:	2378      	movs	r3, #120	; 0x78
 8005eba:	4828      	ldr	r0, [pc, #160]	; (8005f5c <_printf_i+0x248>)
 8005ebc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ec0:	e7e3      	b.n	8005e8a <_printf_i+0x176>
 8005ec2:	0659      	lsls	r1, r3, #25
 8005ec4:	bf48      	it	mi
 8005ec6:	b2b6      	uxthmi	r6, r6
 8005ec8:	e7e6      	b.n	8005e98 <_printf_i+0x184>
 8005eca:	4615      	mov	r5, r2
 8005ecc:	e7bb      	b.n	8005e46 <_printf_i+0x132>
 8005ece:	682b      	ldr	r3, [r5, #0]
 8005ed0:	6826      	ldr	r6, [r4, #0]
 8005ed2:	1d18      	adds	r0, r3, #4
 8005ed4:	6961      	ldr	r1, [r4, #20]
 8005ed6:	6028      	str	r0, [r5, #0]
 8005ed8:	0635      	lsls	r5, r6, #24
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	d501      	bpl.n	8005ee2 <_printf_i+0x1ce>
 8005ede:	6019      	str	r1, [r3, #0]
 8005ee0:	e002      	b.n	8005ee8 <_printf_i+0x1d4>
 8005ee2:	0670      	lsls	r0, r6, #25
 8005ee4:	d5fb      	bpl.n	8005ede <_printf_i+0x1ca>
 8005ee6:	8019      	strh	r1, [r3, #0]
 8005ee8:	2300      	movs	r3, #0
 8005eea:	4615      	mov	r5, r2
 8005eec:	6123      	str	r3, [r4, #16]
 8005eee:	e7ba      	b.n	8005e66 <_printf_i+0x152>
 8005ef0:	682b      	ldr	r3, [r5, #0]
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	1d1a      	adds	r2, r3, #4
 8005ef6:	602a      	str	r2, [r5, #0]
 8005ef8:	681d      	ldr	r5, [r3, #0]
 8005efa:	6862      	ldr	r2, [r4, #4]
 8005efc:	4628      	mov	r0, r5
 8005efe:	f000 f82f 	bl	8005f60 <memchr>
 8005f02:	b108      	cbz	r0, 8005f08 <_printf_i+0x1f4>
 8005f04:	1b40      	subs	r0, r0, r5
 8005f06:	6060      	str	r0, [r4, #4]
 8005f08:	6863      	ldr	r3, [r4, #4]
 8005f0a:	6123      	str	r3, [r4, #16]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f12:	e7a8      	b.n	8005e66 <_printf_i+0x152>
 8005f14:	462a      	mov	r2, r5
 8005f16:	4649      	mov	r1, r9
 8005f18:	4640      	mov	r0, r8
 8005f1a:	6923      	ldr	r3, [r4, #16]
 8005f1c:	47d0      	blx	sl
 8005f1e:	3001      	adds	r0, #1
 8005f20:	d0ab      	beq.n	8005e7a <_printf_i+0x166>
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	079b      	lsls	r3, r3, #30
 8005f26:	d413      	bmi.n	8005f50 <_printf_i+0x23c>
 8005f28:	68e0      	ldr	r0, [r4, #12]
 8005f2a:	9b03      	ldr	r3, [sp, #12]
 8005f2c:	4298      	cmp	r0, r3
 8005f2e:	bfb8      	it	lt
 8005f30:	4618      	movlt	r0, r3
 8005f32:	e7a4      	b.n	8005e7e <_printf_i+0x16a>
 8005f34:	2301      	movs	r3, #1
 8005f36:	4632      	mov	r2, r6
 8005f38:	4649      	mov	r1, r9
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	47d0      	blx	sl
 8005f3e:	3001      	adds	r0, #1
 8005f40:	d09b      	beq.n	8005e7a <_printf_i+0x166>
 8005f42:	3501      	adds	r5, #1
 8005f44:	68e3      	ldr	r3, [r4, #12]
 8005f46:	9903      	ldr	r1, [sp, #12]
 8005f48:	1a5b      	subs	r3, r3, r1
 8005f4a:	42ab      	cmp	r3, r5
 8005f4c:	dcf2      	bgt.n	8005f34 <_printf_i+0x220>
 8005f4e:	e7eb      	b.n	8005f28 <_printf_i+0x214>
 8005f50:	2500      	movs	r5, #0
 8005f52:	f104 0619 	add.w	r6, r4, #25
 8005f56:	e7f5      	b.n	8005f44 <_printf_i+0x230>
 8005f58:	080065d1 	.word	0x080065d1
 8005f5c:	080065e2 	.word	0x080065e2

08005f60 <memchr>:
 8005f60:	4603      	mov	r3, r0
 8005f62:	b510      	push	{r4, lr}
 8005f64:	b2c9      	uxtb	r1, r1
 8005f66:	4402      	add	r2, r0
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	d101      	bne.n	8005f72 <memchr+0x12>
 8005f6e:	2000      	movs	r0, #0
 8005f70:	e003      	b.n	8005f7a <memchr+0x1a>
 8005f72:	7804      	ldrb	r4, [r0, #0]
 8005f74:	3301      	adds	r3, #1
 8005f76:	428c      	cmp	r4, r1
 8005f78:	d1f6      	bne.n	8005f68 <memchr+0x8>
 8005f7a:	bd10      	pop	{r4, pc}

08005f7c <memmove>:
 8005f7c:	4288      	cmp	r0, r1
 8005f7e:	b510      	push	{r4, lr}
 8005f80:	eb01 0402 	add.w	r4, r1, r2
 8005f84:	d902      	bls.n	8005f8c <memmove+0x10>
 8005f86:	4284      	cmp	r4, r0
 8005f88:	4623      	mov	r3, r4
 8005f8a:	d807      	bhi.n	8005f9c <memmove+0x20>
 8005f8c:	1e43      	subs	r3, r0, #1
 8005f8e:	42a1      	cmp	r1, r4
 8005f90:	d008      	beq.n	8005fa4 <memmove+0x28>
 8005f92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f9a:	e7f8      	b.n	8005f8e <memmove+0x12>
 8005f9c:	4601      	mov	r1, r0
 8005f9e:	4402      	add	r2, r0
 8005fa0:	428a      	cmp	r2, r1
 8005fa2:	d100      	bne.n	8005fa6 <memmove+0x2a>
 8005fa4:	bd10      	pop	{r4, pc}
 8005fa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005faa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fae:	e7f7      	b.n	8005fa0 <memmove+0x24>

08005fb0 <_free_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	2900      	cmp	r1, #0
 8005fb6:	d040      	beq.n	800603a <_free_r+0x8a>
 8005fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fbc:	1f0c      	subs	r4, r1, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	bfb8      	it	lt
 8005fc2:	18e4      	addlt	r4, r4, r3
 8005fc4:	f000 f910 	bl	80061e8 <__malloc_lock>
 8005fc8:	4a1c      	ldr	r2, [pc, #112]	; (800603c <_free_r+0x8c>)
 8005fca:	6813      	ldr	r3, [r2, #0]
 8005fcc:	b933      	cbnz	r3, 8005fdc <_free_r+0x2c>
 8005fce:	6063      	str	r3, [r4, #4]
 8005fd0:	6014      	str	r4, [r2, #0]
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fd8:	f000 b90c 	b.w	80061f4 <__malloc_unlock>
 8005fdc:	42a3      	cmp	r3, r4
 8005fde:	d908      	bls.n	8005ff2 <_free_r+0x42>
 8005fe0:	6820      	ldr	r0, [r4, #0]
 8005fe2:	1821      	adds	r1, r4, r0
 8005fe4:	428b      	cmp	r3, r1
 8005fe6:	bf01      	itttt	eq
 8005fe8:	6819      	ldreq	r1, [r3, #0]
 8005fea:	685b      	ldreq	r3, [r3, #4]
 8005fec:	1809      	addeq	r1, r1, r0
 8005fee:	6021      	streq	r1, [r4, #0]
 8005ff0:	e7ed      	b.n	8005fce <_free_r+0x1e>
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	b10b      	cbz	r3, 8005ffc <_free_r+0x4c>
 8005ff8:	42a3      	cmp	r3, r4
 8005ffa:	d9fa      	bls.n	8005ff2 <_free_r+0x42>
 8005ffc:	6811      	ldr	r1, [r2, #0]
 8005ffe:	1850      	adds	r0, r2, r1
 8006000:	42a0      	cmp	r0, r4
 8006002:	d10b      	bne.n	800601c <_free_r+0x6c>
 8006004:	6820      	ldr	r0, [r4, #0]
 8006006:	4401      	add	r1, r0
 8006008:	1850      	adds	r0, r2, r1
 800600a:	4283      	cmp	r3, r0
 800600c:	6011      	str	r1, [r2, #0]
 800600e:	d1e0      	bne.n	8005fd2 <_free_r+0x22>
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	4401      	add	r1, r0
 8006016:	6011      	str	r1, [r2, #0]
 8006018:	6053      	str	r3, [r2, #4]
 800601a:	e7da      	b.n	8005fd2 <_free_r+0x22>
 800601c:	d902      	bls.n	8006024 <_free_r+0x74>
 800601e:	230c      	movs	r3, #12
 8006020:	602b      	str	r3, [r5, #0]
 8006022:	e7d6      	b.n	8005fd2 <_free_r+0x22>
 8006024:	6820      	ldr	r0, [r4, #0]
 8006026:	1821      	adds	r1, r4, r0
 8006028:	428b      	cmp	r3, r1
 800602a:	bf01      	itttt	eq
 800602c:	6819      	ldreq	r1, [r3, #0]
 800602e:	685b      	ldreq	r3, [r3, #4]
 8006030:	1809      	addeq	r1, r1, r0
 8006032:	6021      	streq	r1, [r4, #0]
 8006034:	6063      	str	r3, [r4, #4]
 8006036:	6054      	str	r4, [r2, #4]
 8006038:	e7cb      	b.n	8005fd2 <_free_r+0x22>
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	2000093c 	.word	0x2000093c

08006040 <sbrk_aligned>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	4e0e      	ldr	r6, [pc, #56]	; (800607c <sbrk_aligned+0x3c>)
 8006044:	460c      	mov	r4, r1
 8006046:	6831      	ldr	r1, [r6, #0]
 8006048:	4605      	mov	r5, r0
 800604a:	b911      	cbnz	r1, 8006052 <sbrk_aligned+0x12>
 800604c:	f000 f8bc 	bl	80061c8 <_sbrk_r>
 8006050:	6030      	str	r0, [r6, #0]
 8006052:	4621      	mov	r1, r4
 8006054:	4628      	mov	r0, r5
 8006056:	f000 f8b7 	bl	80061c8 <_sbrk_r>
 800605a:	1c43      	adds	r3, r0, #1
 800605c:	d00a      	beq.n	8006074 <sbrk_aligned+0x34>
 800605e:	1cc4      	adds	r4, r0, #3
 8006060:	f024 0403 	bic.w	r4, r4, #3
 8006064:	42a0      	cmp	r0, r4
 8006066:	d007      	beq.n	8006078 <sbrk_aligned+0x38>
 8006068:	1a21      	subs	r1, r4, r0
 800606a:	4628      	mov	r0, r5
 800606c:	f000 f8ac 	bl	80061c8 <_sbrk_r>
 8006070:	3001      	adds	r0, #1
 8006072:	d101      	bne.n	8006078 <sbrk_aligned+0x38>
 8006074:	f04f 34ff 	mov.w	r4, #4294967295
 8006078:	4620      	mov	r0, r4
 800607a:	bd70      	pop	{r4, r5, r6, pc}
 800607c:	20000940 	.word	0x20000940

08006080 <_malloc_r>:
 8006080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006084:	1ccd      	adds	r5, r1, #3
 8006086:	f025 0503 	bic.w	r5, r5, #3
 800608a:	3508      	adds	r5, #8
 800608c:	2d0c      	cmp	r5, #12
 800608e:	bf38      	it	cc
 8006090:	250c      	movcc	r5, #12
 8006092:	2d00      	cmp	r5, #0
 8006094:	4607      	mov	r7, r0
 8006096:	db01      	blt.n	800609c <_malloc_r+0x1c>
 8006098:	42a9      	cmp	r1, r5
 800609a:	d905      	bls.n	80060a8 <_malloc_r+0x28>
 800609c:	230c      	movs	r3, #12
 800609e:	2600      	movs	r6, #0
 80060a0:	603b      	str	r3, [r7, #0]
 80060a2:	4630      	mov	r0, r6
 80060a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060a8:	4e2e      	ldr	r6, [pc, #184]	; (8006164 <_malloc_r+0xe4>)
 80060aa:	f000 f89d 	bl	80061e8 <__malloc_lock>
 80060ae:	6833      	ldr	r3, [r6, #0]
 80060b0:	461c      	mov	r4, r3
 80060b2:	bb34      	cbnz	r4, 8006102 <_malloc_r+0x82>
 80060b4:	4629      	mov	r1, r5
 80060b6:	4638      	mov	r0, r7
 80060b8:	f7ff ffc2 	bl	8006040 <sbrk_aligned>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	4604      	mov	r4, r0
 80060c0:	d14d      	bne.n	800615e <_malloc_r+0xde>
 80060c2:	6834      	ldr	r4, [r6, #0]
 80060c4:	4626      	mov	r6, r4
 80060c6:	2e00      	cmp	r6, #0
 80060c8:	d140      	bne.n	800614c <_malloc_r+0xcc>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	4631      	mov	r1, r6
 80060ce:	4638      	mov	r0, r7
 80060d0:	eb04 0803 	add.w	r8, r4, r3
 80060d4:	f000 f878 	bl	80061c8 <_sbrk_r>
 80060d8:	4580      	cmp	r8, r0
 80060da:	d13a      	bne.n	8006152 <_malloc_r+0xd2>
 80060dc:	6821      	ldr	r1, [r4, #0]
 80060de:	3503      	adds	r5, #3
 80060e0:	1a6d      	subs	r5, r5, r1
 80060e2:	f025 0503 	bic.w	r5, r5, #3
 80060e6:	3508      	adds	r5, #8
 80060e8:	2d0c      	cmp	r5, #12
 80060ea:	bf38      	it	cc
 80060ec:	250c      	movcc	r5, #12
 80060ee:	4638      	mov	r0, r7
 80060f0:	4629      	mov	r1, r5
 80060f2:	f7ff ffa5 	bl	8006040 <sbrk_aligned>
 80060f6:	3001      	adds	r0, #1
 80060f8:	d02b      	beq.n	8006152 <_malloc_r+0xd2>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	442b      	add	r3, r5
 80060fe:	6023      	str	r3, [r4, #0]
 8006100:	e00e      	b.n	8006120 <_malloc_r+0xa0>
 8006102:	6822      	ldr	r2, [r4, #0]
 8006104:	1b52      	subs	r2, r2, r5
 8006106:	d41e      	bmi.n	8006146 <_malloc_r+0xc6>
 8006108:	2a0b      	cmp	r2, #11
 800610a:	d916      	bls.n	800613a <_malloc_r+0xba>
 800610c:	1961      	adds	r1, r4, r5
 800610e:	42a3      	cmp	r3, r4
 8006110:	6025      	str	r5, [r4, #0]
 8006112:	bf18      	it	ne
 8006114:	6059      	strne	r1, [r3, #4]
 8006116:	6863      	ldr	r3, [r4, #4]
 8006118:	bf08      	it	eq
 800611a:	6031      	streq	r1, [r6, #0]
 800611c:	5162      	str	r2, [r4, r5]
 800611e:	604b      	str	r3, [r1, #4]
 8006120:	4638      	mov	r0, r7
 8006122:	f104 060b 	add.w	r6, r4, #11
 8006126:	f000 f865 	bl	80061f4 <__malloc_unlock>
 800612a:	f026 0607 	bic.w	r6, r6, #7
 800612e:	1d23      	adds	r3, r4, #4
 8006130:	1af2      	subs	r2, r6, r3
 8006132:	d0b6      	beq.n	80060a2 <_malloc_r+0x22>
 8006134:	1b9b      	subs	r3, r3, r6
 8006136:	50a3      	str	r3, [r4, r2]
 8006138:	e7b3      	b.n	80060a2 <_malloc_r+0x22>
 800613a:	6862      	ldr	r2, [r4, #4]
 800613c:	42a3      	cmp	r3, r4
 800613e:	bf0c      	ite	eq
 8006140:	6032      	streq	r2, [r6, #0]
 8006142:	605a      	strne	r2, [r3, #4]
 8006144:	e7ec      	b.n	8006120 <_malloc_r+0xa0>
 8006146:	4623      	mov	r3, r4
 8006148:	6864      	ldr	r4, [r4, #4]
 800614a:	e7b2      	b.n	80060b2 <_malloc_r+0x32>
 800614c:	4634      	mov	r4, r6
 800614e:	6876      	ldr	r6, [r6, #4]
 8006150:	e7b9      	b.n	80060c6 <_malloc_r+0x46>
 8006152:	230c      	movs	r3, #12
 8006154:	4638      	mov	r0, r7
 8006156:	603b      	str	r3, [r7, #0]
 8006158:	f000 f84c 	bl	80061f4 <__malloc_unlock>
 800615c:	e7a1      	b.n	80060a2 <_malloc_r+0x22>
 800615e:	6025      	str	r5, [r4, #0]
 8006160:	e7de      	b.n	8006120 <_malloc_r+0xa0>
 8006162:	bf00      	nop
 8006164:	2000093c 	.word	0x2000093c

08006168 <_realloc_r>:
 8006168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800616c:	4680      	mov	r8, r0
 800616e:	4614      	mov	r4, r2
 8006170:	460e      	mov	r6, r1
 8006172:	b921      	cbnz	r1, 800617e <_realloc_r+0x16>
 8006174:	4611      	mov	r1, r2
 8006176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800617a:	f7ff bf81 	b.w	8006080 <_malloc_r>
 800617e:	b92a      	cbnz	r2, 800618c <_realloc_r+0x24>
 8006180:	f7ff ff16 	bl	8005fb0 <_free_r>
 8006184:	4625      	mov	r5, r4
 8006186:	4628      	mov	r0, r5
 8006188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800618c:	f000 f838 	bl	8006200 <_malloc_usable_size_r>
 8006190:	4284      	cmp	r4, r0
 8006192:	4607      	mov	r7, r0
 8006194:	d802      	bhi.n	800619c <_realloc_r+0x34>
 8006196:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800619a:	d812      	bhi.n	80061c2 <_realloc_r+0x5a>
 800619c:	4621      	mov	r1, r4
 800619e:	4640      	mov	r0, r8
 80061a0:	f7ff ff6e 	bl	8006080 <_malloc_r>
 80061a4:	4605      	mov	r5, r0
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d0ed      	beq.n	8006186 <_realloc_r+0x1e>
 80061aa:	42bc      	cmp	r4, r7
 80061ac:	4622      	mov	r2, r4
 80061ae:	4631      	mov	r1, r6
 80061b0:	bf28      	it	cs
 80061b2:	463a      	movcs	r2, r7
 80061b4:	f7ff fbac 	bl	8005910 <memcpy>
 80061b8:	4631      	mov	r1, r6
 80061ba:	4640      	mov	r0, r8
 80061bc:	f7ff fef8 	bl	8005fb0 <_free_r>
 80061c0:	e7e1      	b.n	8006186 <_realloc_r+0x1e>
 80061c2:	4635      	mov	r5, r6
 80061c4:	e7df      	b.n	8006186 <_realloc_r+0x1e>
	...

080061c8 <_sbrk_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	2300      	movs	r3, #0
 80061cc:	4d05      	ldr	r5, [pc, #20]	; (80061e4 <_sbrk_r+0x1c>)
 80061ce:	4604      	mov	r4, r0
 80061d0:	4608      	mov	r0, r1
 80061d2:	602b      	str	r3, [r5, #0]
 80061d4:	f7fc fd22 	bl	8002c1c <_sbrk>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d102      	bne.n	80061e2 <_sbrk_r+0x1a>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	b103      	cbz	r3, 80061e2 <_sbrk_r+0x1a>
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
 80061e4:	20000944 	.word	0x20000944

080061e8 <__malloc_lock>:
 80061e8:	4801      	ldr	r0, [pc, #4]	; (80061f0 <__malloc_lock+0x8>)
 80061ea:	f000 b811 	b.w	8006210 <__retarget_lock_acquire_recursive>
 80061ee:	bf00      	nop
 80061f0:	20000948 	.word	0x20000948

080061f4 <__malloc_unlock>:
 80061f4:	4801      	ldr	r0, [pc, #4]	; (80061fc <__malloc_unlock+0x8>)
 80061f6:	f000 b80c 	b.w	8006212 <__retarget_lock_release_recursive>
 80061fa:	bf00      	nop
 80061fc:	20000948 	.word	0x20000948

08006200 <_malloc_usable_size_r>:
 8006200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006204:	1f18      	subs	r0, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	bfbc      	itt	lt
 800620a:	580b      	ldrlt	r3, [r1, r0]
 800620c:	18c0      	addlt	r0, r0, r3
 800620e:	4770      	bx	lr

08006210 <__retarget_lock_acquire_recursive>:
 8006210:	4770      	bx	lr

08006212 <__retarget_lock_release_recursive>:
 8006212:	4770      	bx	lr

08006214 <_init>:
 8006214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006216:	bf00      	nop
 8006218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621a:	bc08      	pop	{r3}
 800621c:	469e      	mov	lr, r3
 800621e:	4770      	bx	lr

08006220 <_fini>:
 8006220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006222:	bf00      	nop
 8006224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006226:	bc08      	pop	{r3}
 8006228:	469e      	mov	lr, r3
 800622a:	4770      	bx	lr


FanTester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f6c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800607c  0800607c  0001607c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006444  08006444  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006444  08006444  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006444  08006444  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006444  08006444  00016444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006448  08006448  00016448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800644c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d0c  20000078  080064c4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d84  080064c4  00020d84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ad2  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a23  00000000  00000000  00032b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00035598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00036638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acdf  00000000  00000000  000375c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114bf  00000000  00000000  000522a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096c2d  00000000  00000000  00063766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa393  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b00  00000000  00000000  000fa3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08006064 	.word	0x08006064

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08006064 	.word	0x08006064

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <AveragerAddValue>:
#include "main.h"

void AveragerAddValue(Averager_t *v, uint16_t value) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]
	v->sum -= v->array[v->currentPosition];
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000bc8:	1ad2      	subs	r2, r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	v->sum += value;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	441a      	add	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	v->array[v->currentPosition] = value;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000be6:	4619      	mov	r1, r3
 8000be8:	887a      	ldrh	r2, [r7, #2]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	v->currentPosition = (v->currentPosition > (AVERAGER_ARRAY_SIZE - 2)) ? 0 : v->currentPosition+1;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000bf6:	2b7e      	cmp	r3, #126	; 0x7e
 8000bf8:	d805      	bhi.n	8000c06 <AveragerAddValue+0x5e>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000c00:	3301      	adds	r3, #1
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	e000      	b.n	8000c08 <AveragerAddValue+0x60>
 8000c06:	2200      	movs	r2, #0
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	if (v->currentPosition == 0)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d103      	bne.n	8000c20 <AveragerAddValue+0x78>
		v->fullCircle = 1;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208

	if (v->fullCircle)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d008      	beq.n	8000c3c <AveragerAddValue+0x94>
		v->average = v->sum / AVERAGER_ARRAY_SIZE;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000c30:	09db      	lsrs	r3, r3, #7
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
	else
		v->average = v->sum / v->currentPosition;
}
 8000c3a:	e00b      	b.n	8000c54 <AveragerAddValue+0xac>
		v->average = v->sum / v->currentPosition;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
 8000c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr

08000c5e <sign>:
uint16_t cdPin;
GPIO_TypeDef *rstPort;
uint16_t rstPin;
uint8_t biasRatio = 0x88;

int sign(int val) {
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
	if (val >= 0)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db01      	blt.n	8000c70 <sign+0x12>
		return 1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e001      	b.n	8000c74 <sign+0x16>
	return -1;
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
	...

08000c80 <sendCommand>:

void sendCommand(uint8_t com) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(csPort, csPin, 0);
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <sendCommand+0x50>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a11      	ldr	r2, [pc, #68]	; (8000cd4 <sendCommand+0x54>)
 8000c90:	8811      	ldrh	r1, [r2, #0]
 8000c92:	2200      	movs	r2, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 fab2 	bl	80031fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cdPort, cdPin, 0);
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <sendCommand+0x58>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <sendCommand+0x5c>)
 8000ca0:	8811      	ldrh	r1, [r2, #0]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f002 faaa 	bl	80031fe <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &com, 1, 10);
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <sendCommand+0x60>)
 8000cac:	6818      	ldr	r0, [r3, #0]
 8000cae:	1df9      	adds	r1, r7, #7
 8000cb0:	230a      	movs	r3, #10
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f003 f810 	bl	8003cd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(csPort, csPin, 1);
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <sendCommand+0x50>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <sendCommand+0x54>)
 8000cbe:	8811      	ldrh	r1, [r2, #0]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 fa9b 	bl	80031fe <HAL_GPIO_WritePin>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200006d4 	.word	0x200006d4
 8000cd4:	200000c6 	.word	0x200000c6
 8000cd8:	200006c8 	.word	0x200006c8
 8000cdc:	200006ce 	.word	0x200006ce
 8000ce0:	200006d8 	.word	0x200006d8

08000ce4 <UC1609_SoftwareReset>:

void UC1609_SoftwareReset() {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	sendCommand(0b11100010);
 8000ce8:	20e2      	movs	r0, #226	; 0xe2
 8000cea:	f7ff ffc9 	bl	8000c80 <sendCommand>
	HAL_Delay(20);
 8000cee:	2014      	movs	r0, #20
 8000cf0:	f001 ffc2 	bl	8002c78 <HAL_Delay>
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <UC1609_HardwareReset>:

void UC1609_HardwareReset() {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(rstPort, rstPin, 0);
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <UC1609_HardwareReset+0x34>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <UC1609_HardwareReset+0x38>)
 8000d02:	8811      	ldrh	r1, [r2, #0]
 8000d04:	2200      	movs	r2, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 fa79 	bl	80031fe <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f001 ffb3 	bl	8002c78 <HAL_Delay>
	HAL_GPIO_WritePin(rstPort, rstPin, 1);
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <UC1609_HardwareReset+0x34>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a06      	ldr	r2, [pc, #24]	; (8000d30 <UC1609_HardwareReset+0x38>)
 8000d18:	8811      	ldrh	r1, [r2, #0]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 fa6e 	bl	80031fe <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000d22:	2005      	movs	r0, #5
 8000d24:	f001 ffa8 	bl	8002c78 <HAL_Delay>
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200006d0 	.word	0x200006d0
 8000d30:	200006cc 	.word	0x200006cc

08000d34 <UC1609_Init>:
void UC1609_Init(SPI_HandleTypeDef *spiHandler, GPIO_TypeDef *csGpioPort,
		uint16_t csGpioPin, GPIO_TypeDef *cdGpioPort, uint16_t cdGpioPin,
		GPIO_TypeDef *rstGpioPort, uint16_t rstGpioPin) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	4613      	mov	r3, r2
 8000d42:	80fb      	strh	r3, [r7, #6]
	hspi = spiHandler;
 8000d44:	4a1a      	ldr	r2, [pc, #104]	; (8000db0 <UC1609_Init+0x7c>)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	6013      	str	r3, [r2, #0]
	csPort = csGpioPort;
 8000d4a:	4a1a      	ldr	r2, [pc, #104]	; (8000db4 <UC1609_Init+0x80>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	6013      	str	r3, [r2, #0]
	csPin = csGpioPin;
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <UC1609_Init+0x84>)
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	8013      	strh	r3, [r2, #0]
	cdPort = cdGpioPort;
 8000d56:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <UC1609_Init+0x88>)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	6013      	str	r3, [r2, #0]
	cdPin = cdGpioPin;
 8000d5c:	4a18      	ldr	r2, [pc, #96]	; (8000dc0 <UC1609_Init+0x8c>)
 8000d5e:	8b3b      	ldrh	r3, [r7, #24]
 8000d60:	8013      	strh	r3, [r2, #0]
	rstPort = rstGpioPort;
 8000d62:	4a18      	ldr	r2, [pc, #96]	; (8000dc4 <UC1609_Init+0x90>)
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	6013      	str	r3, [r2, #0]
	rstPin = rstGpioPin;
 8000d68:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <UC1609_Init+0x94>)
 8000d6a:	8c3b      	ldrh	r3, [r7, #32]
 8000d6c:	8013      	strh	r3, [r2, #0]
	if (rstPin == 0 || rstPort == 0) {
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <UC1609_Init+0x94>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <UC1609_Init+0x4a>
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <UC1609_Init+0x90>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d102      	bne.n	8000d84 <UC1609_Init+0x50>
		UC1609_SoftwareReset();
 8000d7e:	f7ff ffb1 	bl	8000ce4 <UC1609_SoftwareReset>
 8000d82:	e001      	b.n	8000d88 <UC1609_Init+0x54>
	} else {
		UC1609_HardwareReset();
 8000d84:	f7ff ffb8 	bl	8000cf8 <UC1609_HardwareReset>
	}
	sendCommand(UC1609_CMD_MAPPING | MIRROR_X);
 8000d88:	20c4      	movs	r0, #196	; 0xc4
 8000d8a:	f7ff ff79 	bl	8000c80 <sendCommand>
	sendCommand(UC1609_CMD_SET_BIAS_RATIO | DEFAULT_BIAS_RATIO);
 8000d8e:	20eb      	movs	r0, #235	; 0xeb
 8000d90:	f7ff ff76 	bl	8000c80 <sendCommand>
	sendCommand(UC_1609_CMD_SET_BIAS_POTENTIOMETER);
 8000d94:	2081      	movs	r0, #129	; 0x81
 8000d96:	f7ff ff73 	bl	8000c80 <sendCommand>
	sendCommand(0xb0);
 8000d9a:	20b0      	movs	r0, #176	; 0xb0
 8000d9c:	f7ff ff70 	bl	8000c80 <sendCommand>
	UC1609_Scroll(0);
 8000da0:	2000      	movs	r0, #0
 8000da2:	f000 f947 	bl	8001034 <UC1609_Scroll>
}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200006d8 	.word	0x200006d8
 8000db4:	200006d4 	.word	0x200006d4
 8000db8:	200000c6 	.word	0x200000c6
 8000dbc:	200006c8 	.word	0x200006c8
 8000dc0:	200006ce 	.word	0x200006ce
 8000dc4:	200006d0 	.word	0x200006d0
 8000dc8:	200006cc 	.word	0x200006cc

08000dcc <UC1609_SetXY>:

// HAL Func
void UC1609_SetXY(uint8_t x, uint8_t y) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	460a      	mov	r2, r1
 8000dd6:	71fb      	strb	r3, [r7, #7]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	71bb      	strb	r3, [r7, #6]
	sendCommand(0b00000000 | (x & 0xF));
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff4b 	bl	8000c80 <sendCommand>
	sendCommand(0b00010000 | ((x >> 4) & 0xF));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	091b      	lsrs	r3, r3, #4
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	f043 0310 	orr.w	r3, r3, #16
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff40 	bl	8000c80 <sendCommand>
	sendCommand(0b10110000 | y);
 8000e00:	79bb      	ldrb	r3, [r7, #6]
 8000e02:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff39 	bl	8000c80 <sendCommand>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <UC1609_SetPos>:

// In uc_lcd_buffer
void UC1609_SetPos(uint8_t x, uint8_t y) {
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	460a      	mov	r2, r1
 8000e22:	71fb      	strb	r3, [r7, #7]
 8000e24:	4613      	mov	r3, r2
 8000e26:	71bb      	strb	r3, [r7, #6]
	uc_cursor = x * 6 + UC1609_WIDTH * y;
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	0052      	lsls	r2, r2, #1
 8000e30:	4413      	add	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	79bb      	ldrb	r3, [r7, #6]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	0049      	lsls	r1, r1, #1
 8000e3e:	440b      	add	r3, r1
 8000e40:	019b      	lsls	r3, r3, #6
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	4413      	add	r3, r2
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <UC1609_SetPos+0x40>)
 8000e4a:	801a      	strh	r2, [r3, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	200000c4 	.word	0x200000c4

08000e5c <UC1609_UpdateScreen>:

void UC1609_UpdateScreen() {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0

	UC1609_SetXY(0, 0);
 8000e60:	2100      	movs	r1, #0
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff ffb2 	bl	8000dcc <UC1609_SetXY>
	HAL_GPIO_WritePin(csPort, csPin, 0);
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <UC1609_UpdateScreen+0x58>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <UC1609_UpdateScreen+0x5c>)
 8000e6e:	8811      	ldrh	r1, [r2, #0]
 8000e70:	2200      	movs	r2, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 f9c3 	bl	80031fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cdPort, cdPin, 1);
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <UC1609_UpdateScreen+0x60>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <UC1609_UpdateScreen+0x64>)
 8000e7e:	8811      	ldrh	r1, [r2, #0]
 8000e80:	2201      	movs	r2, #1
 8000e82:	4618      	mov	r0, r3
 8000e84:	f002 f9bb 	bl	80031fe <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, uc_lcd_buffer, UC1609_BUFFER_SIZE, 1000);
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <UC1609_UpdateScreen+0x68>)
 8000e8a:	6818      	ldr	r0, [r3, #0]
 8000e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e90:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <UC1609_UpdateScreen+0x6c>)
 8000e96:	f002 ff1f 	bl	8003cd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(csPort, csPin, 1);
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <UC1609_UpdateScreen+0x58>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <UC1609_UpdateScreen+0x5c>)
 8000ea0:	8811      	ldrh	r1, [r2, #0]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f002 f9aa 	bl	80031fe <HAL_GPIO_WritePin>
	sendCommand(UC1609_CMD_ENABLE);
 8000eaa:	20af      	movs	r0, #175	; 0xaf
 8000eac:	f7ff fee8 	bl	8000c80 <sendCommand>
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200006d4 	.word	0x200006d4
 8000eb8:	200000c6 	.word	0x200000c6
 8000ebc:	200006c8 	.word	0x200006c8
 8000ec0:	200006ce 	.word	0x200006ce
 8000ec4:	200006d8 	.word	0x200006d8
 8000ec8:	200000c8 	.word	0x200000c8

08000ecc <UC1609_Clean>:

void UC1609_Clean() {
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < UC1609_BUFFER_SIZE; ++i)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	80fb      	strh	r3, [r7, #6]
 8000ed6:	e006      	b.n	8000ee6 <UC1609_Clean+0x1a>
		uc_lcd_buffer[i] = 0;
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <UC1609_Clean+0x30>)
 8000edc:	2100      	movs	r1, #0
 8000ede:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < UC1609_BUFFER_SIZE; ++i)
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	80fb      	strh	r3, [r7, #6]
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000eec:	d3f4      	bcc.n	8000ed8 <UC1609_Clean+0xc>
}
 8000eee:	bf00      	nop
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	200000c8 	.word	0x200000c8

08000f00 <UC1609_PutRuC>:

void UC1609_PutRuC(char *c) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

	uint8_t pos;
	if (*c == 0xD0)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2bd0      	cmp	r3, #208	; 0xd0
 8000f0e:	d105      	bne.n	8000f1c <UC1609_PutRuC+0x1c>
		pos = *(c + 1) - 144 + 101;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3301      	adds	r3, #1
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	3b2b      	subs	r3, #43	; 0x2b
 8000f18:	73fb      	strb	r3, [r7, #15]
 8000f1a:	e008      	b.n	8000f2e <UC1609_PutRuC+0x2e>
	else if (*c == 0xD1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2bd1      	cmp	r3, #209	; 0xd1
 8000f22:	d11a      	bne.n	8000f5a <UC1609_PutRuC+0x5a>
		pos = *(c + 1) - 128 + 149;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3301      	adds	r3, #1
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	3315      	adds	r3, #21
 8000f2c:	73fb      	strb	r3, [r7, #15]
	else
		return;
	memcpy(uc_lcd_buffer + uc_cursor, &myFont[pos][0], 5);
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <UC1609_PutRuC+0x64>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <UC1609_PutRuC+0x68>)
 8000f36:	18d0      	adds	r0, r2, r3
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <UC1609_PutRuC+0x6c>)
 8000f42:	4413      	add	r3, r2
 8000f44:	2205      	movs	r2, #5
 8000f46:	4619      	mov	r1, r3
 8000f48:	f004 fc4a 	bl	80057e0 <memcpy>
	uc_cursor += 5;
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <UC1609_PutRuC+0x64>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	3305      	adds	r3, #5
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <UC1609_PutRuC+0x64>)
 8000f56:	801a      	strh	r2, [r3, #0]
 8000f58:	e000      	b.n	8000f5c <UC1609_PutRuC+0x5c>
		return;
 8000f5a:	bf00      	nop
}
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200000c4 	.word	0x200000c4
 8000f68:	200000c8 	.word	0x200000c8
 8000f6c:	080060bc 	.word	0x080060bc

08000f70 <UC1609_Put>:

void UC1609_Put(char c) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	memcpy(uc_lcd_buffer + uc_cursor, &myFont[c - 0x20][0], 5);
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <UC1609_Put+0x40>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <UC1609_Put+0x44>)
 8000f82:	18d0      	adds	r0, r2, r3
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f1a3 0220 	sub.w	r2, r3, #32
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <UC1609_Put+0x48>)
 8000f92:	4413      	add	r3, r2
 8000f94:	2205      	movs	r2, #5
 8000f96:	4619      	mov	r1, r3
 8000f98:	f004 fc22 	bl	80057e0 <memcpy>
	uc_cursor += 5;
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <UC1609_Put+0x40>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	3305      	adds	r3, #5
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	4b02      	ldr	r3, [pc, #8]	; (8000fb0 <UC1609_Put+0x40>)
 8000fa6:	801a      	strh	r2, [r3, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200000c4 	.word	0x200000c4
 8000fb4:	200000c8 	.word	0x200000c8
 8000fb8:	080060bc 	.word	0x080060bc

08000fbc <UC1609_PutString>:

void UC1609_PutString(char *c) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	while (*c) {
 8000fc4:	e029      	b.n	800101a <UC1609_PutString+0x5e>
		uc_cursor %= UC1609_BUFFER_SIZE;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <UC1609_PutString+0x70>)
 8000fc8:	881a      	ldrh	r2, [r3, #0]
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <UC1609_PutString+0x74>)
 8000fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8000fd0:	0a99      	lsrs	r1, r3, #10
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	440b      	add	r3, r1
 8000fd8:	025b      	lsls	r3, r3, #9
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <UC1609_PutString+0x70>)
 8000fe0:	801a      	strh	r2, [r3, #0]
		if (*c == 0xD0 || *c == 0xD1) {
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2bd0      	cmp	r3, #208	; 0xd0
 8000fe8:	d003      	beq.n	8000ff2 <UC1609_PutString+0x36>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2bd1      	cmp	r3, #209	; 0xd1
 8000ff0:	d106      	bne.n	8001000 <UC1609_PutString+0x44>
			UC1609_PutRuC(c);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff84 	bl	8000f00 <UC1609_PutRuC>
			c += 2;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	e006      	b.n	800100e <UC1609_PutString+0x52>
		} else
			UC1609_Put(*c++);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ffb1 	bl	8000f70 <UC1609_Put>
		uc_cursor++;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <UC1609_PutString+0x70>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	3301      	adds	r3, #1
 8001014:	b29a      	uxth	r2, r3
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <UC1609_PutString+0x70>)
 8001018:	801a      	strh	r2, [r3, #0]
	while (*c) {
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1d1      	bne.n	8000fc6 <UC1609_PutString+0xa>
	}
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200000c4 	.word	0x200000c4
 8001030:	aaaaaaab 	.word	0xaaaaaaab

08001034 <UC1609_Scroll>:

void UC1609_SetInversion(uint8_t invert) {
	sendCommand(UC1609_CMD_INVERSION | invert);
}

void UC1609_Scroll(uint8_t lines) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	lines %= 64;
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001044:	71fb      	strb	r3, [r7, #7]
	sendCommand(UC1609_CMD_SCROLL | lines);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fe16 	bl	8000c80 <sendCommand>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <UC1609_PutPixel>:

void UC1609_DrawBitmap(uint8_t *buf) {
	memcpy(uc_lcd_buffer, buf, sizeof(uc_lcd_buffer));
}

void UC1609_PutPixel(uint8_t x, uint8_t y) {
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	460a      	mov	r2, r1
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	4613      	mov	r3, r2
 800106a:	71bb      	strb	r3, [r7, #6]
	uc_lcd_buffer[(x + (y / 8) * UC1609_WIDTH) % UC1609_BUFFER_SIZE] |= 1
 800106c:	79fa      	ldrb	r2, [r7, #7]
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	08db      	lsrs	r3, r3, #3
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4619      	mov	r1, r3
 8001076:	460b      	mov	r3, r1
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	440b      	add	r3, r1
 800107c:	019b      	lsls	r3, r3, #6
 800107e:	18d1      	adds	r1, r2, r3
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <UC1609_PutPixel+0x64>)
 8001082:	fb83 2301 	smull	r2, r3, r3, r1
 8001086:	121a      	asrs	r2, r3, #8
 8001088:	17cb      	asrs	r3, r1, #31
 800108a:	1ad2      	subs	r2, r2, r3
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	025b      	lsls	r3, r3, #9
 8001094:	1aca      	subs	r2, r1, r3
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <UC1609_PutPixel+0x68>)
 8001098:	5c9b      	ldrb	r3, [r3, r2]
 800109a:	b259      	sxtb	r1, r3
			<< (y % 8);
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	2001      	movs	r0, #1
 80010a4:	fa00 f303 	lsl.w	r3, r0, r3
	uc_lcd_buffer[(x + (y / 8) * UC1609_WIDTH) % UC1609_BUFFER_SIZE] |= 1
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	430b      	orrs	r3, r1
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	b2d9      	uxtb	r1, r3
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <UC1609_PutPixel+0x68>)
 80010b2:	5499      	strb	r1, [r3, r2]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	2aaaaaab 	.word	0x2aaaaaab
 80010c4:	200000c8 	.word	0x200000c8

080010c8 <UC1609_DrawLine>:

void UC1609_DrawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4604      	mov	r4, r0
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4623      	mov	r3, r4
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	4603      	mov	r3, r0
 80010dc:	71bb      	strb	r3, [r7, #6]
 80010de:	460b      	mov	r3, r1
 80010e0:	717b      	strb	r3, [r7, #5]
 80010e2:	4613      	mov	r3, r2
 80010e4:	713b      	strb	r3, [r7, #4]
	if (x2 == x1 && y2 == y1) {
 80010e6:	797a      	ldrb	r2, [r7, #5]
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d10a      	bne.n	8001104 <UC1609_DrawLine+0x3c>
 80010ee:	793a      	ldrb	r2, [r7, #4]
 80010f0:	79bb      	ldrb	r3, [r7, #6]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d106      	bne.n	8001104 <UC1609_DrawLine+0x3c>
		UC1609_PutPixel(x1, y1);
 80010f6:	79ba      	ldrb	r2, [r7, #6]
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ffad 	bl	800105c <UC1609_PutPixel>
		return;
 8001102:	e063      	b.n	80011cc <UC1609_DrawLine+0x104>
	 y2 = y1;
	 y1 = temp;
	 }
	 */

	if (abs(x2 - x1) > abs(y2 - y1)) {
 8001104:	797a      	ldrb	r2, [r7, #5]
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800110e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001112:	7939      	ldrb	r1, [r7, #4]
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	1acb      	subs	r3, r1, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	bfb8      	it	lt
 800111c:	425b      	neglt	r3, r3
 800111e:	429a      	cmp	r2, r3
 8001120:	dd2a      	ble.n	8001178 <UC1609_DrawLine+0xb0>
		int step = sign(x2 - x1);
 8001122:	797a      	ldrb	r2, [r7, #5]
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fd98 	bl	8000c5e <sign>
 800112e:	60f8      	str	r0, [r7, #12]
		for (uint8_t i = x1; i != x2 + 1; i+=step) {
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	75fb      	strb	r3, [r7, #23]
 8001134:	e01a      	b.n	800116c <UC1609_DrawLine+0xa4>
			UC1609_PutPixel(i, y1 + (y2 - y1) * (i - x1) / (x2 - x1));
 8001136:	793a      	ldrb	r2, [r7, #4]
 8001138:	79bb      	ldrb	r3, [r7, #6]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	7df9      	ldrb	r1, [r7, #23]
 800113e:	79fa      	ldrb	r2, [r7, #7]
 8001140:	1a8a      	subs	r2, r1, r2
 8001142:	fb02 f203 	mul.w	r2, r2, r3
 8001146:	7979      	ldrb	r1, [r7, #5]
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	1acb      	subs	r3, r1, r3
 800114c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001150:	b2da      	uxtb	r2, r3
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	4413      	add	r3, r2
 8001156:	b2da      	uxtb	r2, r3
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff7d 	bl	800105c <UC1609_PutPixel>
		for (uint8_t i = x1; i != x2 + 1; i+=step) {
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	7dfb      	ldrb	r3, [r7, #23]
 8001168:	4413      	add	r3, r2
 800116a:	75fb      	strb	r3, [r7, #23]
 800116c:	7dfa      	ldrb	r2, [r7, #23]
 800116e:	797b      	ldrb	r3, [r7, #5]
 8001170:	3301      	adds	r3, #1
 8001172:	429a      	cmp	r2, r3
 8001174:	d1df      	bne.n	8001136 <UC1609_DrawLine+0x6e>
 8001176:	e029      	b.n	80011cc <UC1609_DrawLine+0x104>
		}
	} else {
		int step = sign(y2 - y1);
 8001178:	793a      	ldrb	r2, [r7, #4]
 800117a:	79bb      	ldrb	r3, [r7, #6]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fd6d 	bl	8000c5e <sign>
 8001184:	6138      	str	r0, [r7, #16]
		for (uint8_t i = y1; i != y2 + 1; i+=step) {
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	75bb      	strb	r3, [r7, #22]
 800118a:	e01a      	b.n	80011c2 <UC1609_DrawLine+0xfa>
			UC1609_PutPixel(x1 + (x2 - x1) * (i - y1) / (y2 - y1), i);
 800118c:	797a      	ldrb	r2, [r7, #5]
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	7db9      	ldrb	r1, [r7, #22]
 8001194:	79ba      	ldrb	r2, [r7, #6]
 8001196:	1a8a      	subs	r2, r1, r2
 8001198:	fb02 f203 	mul.w	r2, r2, r3
 800119c:	7939      	ldrb	r1, [r7, #4]
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	1acb      	subs	r3, r1, r3
 80011a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	4413      	add	r3, r2
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	7dba      	ldrb	r2, [r7, #22]
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff52 	bl	800105c <UC1609_PutPixel>
		for (uint8_t i = y1; i != y2 + 1; i+=step) {
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	7dbb      	ldrb	r3, [r7, #22]
 80011be:	4413      	add	r3, r2
 80011c0:	75bb      	strb	r3, [r7, #22]
 80011c2:	7dba      	ldrb	r2, [r7, #22]
 80011c4:	793b      	ldrb	r3, [r7, #4]
 80011c6:	3301      	adds	r3, #1
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d1df      	bne.n	800118c <UC1609_DrawLine+0xc4>
		}
	}
}
 80011cc:	371c      	adds	r7, #28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd90      	pop	{r4, r7, pc}

080011d2 <UC1609_DrawDottedLine>:

void UC1609_DrawDottedLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 80011d2:	b590      	push	{r4, r7, lr}
 80011d4:	b085      	sub	sp, #20
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4604      	mov	r4, r0
 80011da:	4608      	mov	r0, r1
 80011dc:	4611      	mov	r1, r2
 80011de:	461a      	mov	r2, r3
 80011e0:	4623      	mov	r3, r4
 80011e2:	71fb      	strb	r3, [r7, #7]
 80011e4:	4603      	mov	r3, r0
 80011e6:	71bb      	strb	r3, [r7, #6]
 80011e8:	460b      	mov	r3, r1
 80011ea:	717b      	strb	r3, [r7, #5]
 80011ec:	4613      	mov	r3, r2
 80011ee:	713b      	strb	r3, [r7, #4]
	if (x2 == x1 && y2 == y1) {
 80011f0:	797a      	ldrb	r2, [r7, #5]
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d10a      	bne.n	800120e <UC1609_DrawDottedLine+0x3c>
 80011f8:	793a      	ldrb	r2, [r7, #4]
 80011fa:	79bb      	ldrb	r3, [r7, #6]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d106      	bne.n	800120e <UC1609_DrawDottedLine+0x3c>
		UC1609_PutPixel(x1, y1);
 8001200:	79ba      	ldrb	r2, [r7, #6]
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff28 	bl	800105c <UC1609_PutPixel>
		return;
 800120c:	e048      	b.n	80012a0 <UC1609_DrawDottedLine+0xce>
	}
	if (x2 - x1 > y2 - y1) {
 800120e:	797a      	ldrb	r2, [r7, #5]
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	1ad2      	subs	r2, r2, r3
 8001214:	7939      	ldrb	r1, [r7, #4]
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	1acb      	subs	r3, r1, r3
 800121a:	429a      	cmp	r2, r3
 800121c:	dd20      	ble.n	8001260 <UC1609_DrawDottedLine+0x8e>
		for (uint8_t i = x1; i < x2 + 1; i += 2) {
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	e018      	b.n	8001256 <UC1609_DrawDottedLine+0x84>
			UC1609_PutPixel(i, y1 + (y2 - y1) * (i - x1) / (x2 - x1));
 8001224:	793a      	ldrb	r2, [r7, #4]
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	7bf9      	ldrb	r1, [r7, #15]
 800122c:	79fa      	ldrb	r2, [r7, #7]
 800122e:	1a8a      	subs	r2, r1, r2
 8001230:	fb02 f203 	mul.w	r2, r2, r3
 8001234:	7979      	ldrb	r1, [r7, #5]
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	1acb      	subs	r3, r1, r3
 800123a:	fb92 f3f3 	sdiv	r3, r2, r3
 800123e:	b2da      	uxtb	r2, r3
 8001240:	79bb      	ldrb	r3, [r7, #6]
 8001242:	4413      	add	r3, r2
 8001244:	b2da      	uxtb	r2, r3
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff06 	bl	800105c <UC1609_PutPixel>
		for (uint8_t i = x1; i < x2 + 1; i += 2) {
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	3302      	adds	r3, #2
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	797a      	ldrb	r2, [r7, #5]
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	429a      	cmp	r2, r3
 800125c:	d2e2      	bcs.n	8001224 <UC1609_DrawDottedLine+0x52>
 800125e:	e01f      	b.n	80012a0 <UC1609_DrawDottedLine+0xce>
		}
	} else {
		for (uint8_t i = y1; i < y2 + 1; i += 2) {
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	73bb      	strb	r3, [r7, #14]
 8001264:	e018      	b.n	8001298 <UC1609_DrawDottedLine+0xc6>
			UC1609_PutPixel(x1 + (x2 - x1) * (i - y1) / (y2 - y1), i);
 8001266:	797a      	ldrb	r2, [r7, #5]
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	7bb9      	ldrb	r1, [r7, #14]
 800126e:	79ba      	ldrb	r2, [r7, #6]
 8001270:	1a8a      	subs	r2, r1, r2
 8001272:	fb02 f203 	mul.w	r2, r2, r3
 8001276:	7939      	ldrb	r1, [r7, #4]
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	1acb      	subs	r3, r1, r3
 800127c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001280:	b2da      	uxtb	r2, r3
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	4413      	add	r3, r2
 8001286:	b2db      	uxtb	r3, r3
 8001288:	7bba      	ldrb	r2, [r7, #14]
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fee5 	bl	800105c <UC1609_PutPixel>
		for (uint8_t i = y1; i < y2 + 1; i += 2) {
 8001292:	7bbb      	ldrb	r3, [r7, #14]
 8001294:	3302      	adds	r3, #2
 8001296:	73bb      	strb	r3, [r7, #14]
 8001298:	793a      	ldrb	r2, [r7, #4]
 800129a:	7bbb      	ldrb	r3, [r7, #14]
 800129c:	429a      	cmp	r2, r3
 800129e:	d2e2      	bcs.n	8001266 <UC1609_DrawDottedLine+0x94>
		}
	}
}
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd90      	pop	{r4, r7, pc}
	...

080012a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db0b      	blt.n	80012ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	4906      	ldr	r1, [pc, #24]	; (80012f8 <__NVIC_EnableIRQ+0x34>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	; (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	; (800134c <__NVIC_SetPriority+0x50>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0U;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d103      	bne.n	80013d0 <LL_ADC_DMA_GetRegAddr+0x1c>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t)&(ADCx->DR);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	334c      	adds	r3, #76	; 0x4c
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	e001      	b.n	80013d4 <LL_ADC_DMA_GetRegAddr+0x20>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register of multimode data */
    data_reg_addr = (uint32_t)&(ADC12_COMMON->DR);
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <LL_ADC_DMA_GetRegAddr+0x2c>)
 80013d2:	60fb      	str	r3, [r7, #12]
  }
  
  return data_reg_addr;
 80013d4:	68fb      	ldr	r3, [r7, #12]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	4001244c 	.word	0x4001244c

080013e4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	609a      	str	r2, [r3, #8]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	332c      	adds	r3, #44	; 0x2c
 8001418:	4619      	mov	r1, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001420:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001424:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	fa92 f2a2 	rbit	r2, r2
 800142c:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	fab2 f282 	clz	r2, r2
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	40d3      	lsrs	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	f003 031f 	and.w	r3, r3, #31
 8001448:	211f      	movs	r1, #31
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	401a      	ands	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f003 011f 	and.w	r1, r3, #31
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	431a      	orrs	r2, r3
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001468:	bf00      	nop
 800146a:	3724      	adds	r7, #36	; 0x24
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001472:	b480      	push	{r7}
 8001474:	b08d      	sub	sp, #52	; 0x34
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	330c      	adds	r3, #12
 8001482:	4619      	mov	r1, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800148e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	fa92 f2a2 	rbit	r2, r2
 8001496:	617a      	str	r2, [r7, #20]
  return result;
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	fab2 f282 	clz	r2, r2
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	40d3      	lsrs	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 80014a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80014b2:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80014b6:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b8:	6a39      	ldr	r1, [r7, #32]
 80014ba:	fa91 f1a1 	rbit	r1, r1
 80014be:	61f9      	str	r1, [r7, #28]
  return result;
 80014c0:	69f9      	ldr	r1, [r7, #28]
 80014c2:	fab1 f181 	clz	r1, r1
 80014c6:	b2c9      	uxtb	r1, r1
 80014c8:	40cb      	lsrs	r3, r1
 80014ca:	2107      	movs	r1, #7
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	401a      	ands	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80014da:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80014de:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014e2:	fa91 f1a1 	rbit	r1, r1
 80014e6:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80014e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ea:	fab1 f181 	clz	r1, r1
 80014ee:	b2c9      	uxtb	r1, r1
 80014f0:	40cb      	lsrs	r3, r1
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	431a      	orrs	r2, r3
 80014fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80014fe:	bf00      	nop
 8001500:	3734      	adds	r7, #52	; 0x34
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f043 0201 	orr.w	r2, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	609a      	str	r2, [r3, #8]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f043 0204 	orr.w	r2, r3, #4
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	609a      	str	r2, [r3, #8]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	609a      	str	r2, [r3, #8]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
	...

08001564 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	3b01      	subs	r3, #1
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <LL_DMA_EnableChannel+0x38>)
 8001574:	5cd3      	ldrb	r3, [r2, r3]
 8001576:	461a      	mov	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4413      	add	r3, r2
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	3a01      	subs	r2, #1
 8001582:	4906      	ldr	r1, [pc, #24]	; (800159c <LL_DMA_EnableChannel+0x38>)
 8001584:	5c8a      	ldrb	r2, [r1, r2]
 8001586:	4611      	mov	r1, r2
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	440a      	add	r2, r1
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6013      	str	r3, [r2, #0]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	080060b4 	.word	0x080060b4

080015a0 <LL_DMA_ConfigTransfer>:
  *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDATAALIGN_WORD
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configuration)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <LL_DMA_ConfigTransfer+0x44>)
 80015b2:	5cd3      	ldrb	r3, [r2, r3]
 80015b4:	461a      	mov	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4413      	add	r3, r2
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	3a01      	subs	r2, #1
 80015c8:	4906      	ldr	r1, [pc, #24]	; (80015e4 <LL_DMA_ConfigTransfer+0x44>)
 80015ca:	5c8a      	ldrb	r2, [r1, r2]
 80015cc:	4611      	mov	r1, r2
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	440a      	add	r2, r1
 80015d2:	4611      	mov	r1, r2
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_PSIZE | DMA_CCR_MSIZE | DMA_CCR_PL,
             Configuration);
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	080060b4 	.word	0x080060b4

080015e8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	4a0c      	ldr	r2, [pc, #48]	; (800162c <LL_DMA_SetDataTransferDirection+0x44>)
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	461a      	mov	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4413      	add	r3, r2
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001608:	f023 0310 	bic.w	r3, r3, #16
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	3a01      	subs	r2, #1
 8001610:	4906      	ldr	r1, [pc, #24]	; (800162c <LL_DMA_SetDataTransferDirection+0x44>)
 8001612:	5c8a      	ldrb	r2, [r1, r2]
 8001614:	4611      	mov	r1, r2
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	440a      	add	r2, r1
 800161a:	4611      	mov	r1, r2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	4313      	orrs	r3, r2
 8001620:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	080060b4 	.word	0x080060b4

08001630 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	3b01      	subs	r3, #1
 8001640:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <LL_DMA_SetMode+0x40>)
 8001642:	5cd3      	ldrb	r3, [r2, r3]
 8001644:	461a      	mov	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4413      	add	r3, r2
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f023 0220 	bic.w	r2, r3, #32
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	3b01      	subs	r3, #1
 8001654:	4906      	ldr	r1, [pc, #24]	; (8001670 <LL_DMA_SetMode+0x40>)
 8001656:	5ccb      	ldrb	r3, [r1, r3]
 8001658:	4619      	mov	r1, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	440b      	add	r3, r1
 800165e:	4619      	mov	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
             Mode);
}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	080060b4 	.word	0x080060b4

08001674 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	3b01      	subs	r3, #1
 8001684:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <LL_DMA_SetPeriphIncMode+0x40>)
 8001686:	5cd3      	ldrb	r3, [r2, r3]
 8001688:	461a      	mov	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4413      	add	r3, r2
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	3b01      	subs	r3, #1
 8001698:	4906      	ldr	r1, [pc, #24]	; (80016b4 <LL_DMA_SetPeriphIncMode+0x40>)
 800169a:	5ccb      	ldrb	r3, [r1, r3]
 800169c:	4619      	mov	r1, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	440b      	add	r3, r1
 80016a2:	4619      	mov	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	080060b4 	.word	0x080060b4

080016b8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <LL_DMA_SetMemoryIncMode+0x40>)
 80016ca:	5cd3      	ldrb	r3, [r2, r3]
 80016cc:	461a      	mov	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4413      	add	r3, r2
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	3b01      	subs	r3, #1
 80016dc:	4906      	ldr	r1, [pc, #24]	; (80016f8 <LL_DMA_SetMemoryIncMode+0x40>)
 80016de:	5ccb      	ldrb	r3, [r1, r3]
 80016e0:	4619      	mov	r1, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	440b      	add	r3, r1
 80016e6:	4619      	mov	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80016ee:	bf00      	nop
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	080060b4 	.word	0x080060b4

080016fc <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	3b01      	subs	r3, #1
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <LL_DMA_SetPeriphSize+0x40>)
 800170e:	5cd3      	ldrb	r3, [r2, r3]
 8001710:	461a      	mov	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4413      	add	r3, r2
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	3b01      	subs	r3, #1
 8001720:	4906      	ldr	r1, [pc, #24]	; (800173c <LL_DMA_SetPeriphSize+0x40>)
 8001722:	5ccb      	ldrb	r3, [r1, r3]
 8001724:	4619      	mov	r1, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	440b      	add	r3, r1
 800172a:	4619      	mov	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	080060b4 	.word	0x080060b4

08001740 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	3b01      	subs	r3, #1
 8001750:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <LL_DMA_SetMemorySize+0x40>)
 8001752:	5cd3      	ldrb	r3, [r2, r3]
 8001754:	461a      	mov	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4413      	add	r3, r2
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	3b01      	subs	r3, #1
 8001764:	4906      	ldr	r1, [pc, #24]	; (8001780 <LL_DMA_SetMemorySize+0x40>)
 8001766:	5ccb      	ldrb	r3, [r1, r3]
 8001768:	4619      	mov	r1, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	440b      	add	r3, r1
 800176e:	4619      	mov	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	080060b4 	.word	0x080060b4

08001784 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	3b01      	subs	r3, #1
 8001794:	4a0b      	ldr	r2, [pc, #44]	; (80017c4 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001796:	5cd3      	ldrb	r3, [r2, r3]
 8001798:	461a      	mov	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4413      	add	r3, r2
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	4906      	ldr	r1, [pc, #24]	; (80017c4 <LL_DMA_SetChannelPriorityLevel+0x40>)
 80017aa:	5ccb      	ldrb	r3, [r1, r3]
 80017ac:	4619      	mov	r1, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	440b      	add	r3, r1
 80017b2:	4619      	mov	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
             Priority);
}
 80017ba:	bf00      	nop
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	080060b4 	.word	0x080060b4

080017c8 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <LL_DMA_SetDataLength+0x40>)
 80017da:	5cd3      	ldrb	r3, [r2, r3]
 80017dc:	461a      	mov	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4413      	add	r3, r2
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	0c1b      	lsrs	r3, r3, #16
 80017e6:	041b      	lsls	r3, r3, #16
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	3a01      	subs	r2, #1
 80017ec:	4906      	ldr	r1, [pc, #24]	; (8001808 <LL_DMA_SetDataLength+0x40>)
 80017ee:	5c8a      	ldrb	r2, [r1, r2]
 80017f0:	4611      	mov	r1, r2
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	440a      	add	r2, r1
 80017f6:	4611      	mov	r1, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80017fe:	bf00      	nop
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	080060b4 	.word	0x080060b4

0800180c <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	2b10      	cmp	r3, #16
 800181e:	d114      	bne.n	800184a <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	3b01      	subs	r3, #1
 8001824:	4a15      	ldr	r2, [pc, #84]	; (800187c <LL_DMA_ConfigAddresses+0x70>)
 8001826:	5cd3      	ldrb	r3, [r2, r3]
 8001828:	461a      	mov	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4413      	add	r3, r2
 800182e:	461a      	mov	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	3b01      	subs	r3, #1
 8001838:	4a10      	ldr	r2, [pc, #64]	; (800187c <LL_DMA_ConfigAddresses+0x70>)
 800183a:	5cd3      	ldrb	r3, [r2, r3]
 800183c:	461a      	mov	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4413      	add	r3, r2
 8001842:	461a      	mov	r2, r3
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 8001848:	e013      	b.n	8001872 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	3b01      	subs	r3, #1
 800184e:	4a0b      	ldr	r2, [pc, #44]	; (800187c <LL_DMA_ConfigAddresses+0x70>)
 8001850:	5cd3      	ldrb	r3, [r2, r3]
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	461a      	mov	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	3b01      	subs	r3, #1
 8001862:	4a06      	ldr	r2, [pc, #24]	; (800187c <LL_DMA_ConfigAddresses+0x70>)
 8001864:	5cd3      	ldrb	r3, [r2, r3]
 8001866:	461a      	mov	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	461a      	mov	r2, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	60d3      	str	r3, [r2, #12]
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	080060b4 	.word	0x080060b4

08001880 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	3b01      	subs	r3, #1
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <LL_DMA_EnableIT_TC+0x38>)
 8001890:	5cd3      	ldrb	r3, [r2, r3]
 8001892:	461a      	mov	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	3a01      	subs	r2, #1
 800189e:	4906      	ldr	r1, [pc, #24]	; (80018b8 <LL_DMA_EnableIT_TC+0x38>)
 80018a0:	5c8a      	ldrb	r2, [r1, r2]
 80018a2:	4611      	mov	r1, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	440a      	add	r2, r1
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6013      	str	r3, [r2, #0]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	080060b4 	.word	0x080060b4

080018bc <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <LL_DMA_EnableIT_TE+0x38>)
 80018cc:	5cd3      	ldrb	r3, [r2, r3]
 80018ce:	461a      	mov	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4413      	add	r3, r2
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	3a01      	subs	r2, #1
 80018da:	4906      	ldr	r1, [pc, #24]	; (80018f4 <LL_DMA_EnableIT_TE+0x38>)
 80018dc:	5c8a      	ldrb	r2, [r1, r2]
 80018de:	4611      	mov	r1, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	440a      	add	r2, r1
 80018e4:	f043 0308 	orr.w	r3, r3, #8
 80018e8:	6013      	str	r3, [r2, #0]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	080060b4 	.word	0x080060b4

080018f8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001902:	695a      	ldr	r2, [r3, #20]
 8001904:	4907      	ldr	r1, [pc, #28]	; (8001924 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4313      	orrs	r3, r2
 800190a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4013      	ands	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001916:	68fb      	ldr	r3, [r7, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000

08001928 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001932:	699a      	ldr	r2, [r3, #24]
 8001934:	4907      	ldr	r1, [pc, #28]	; (8001954 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4313      	orrs	r3, r2
 800193a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <LL_APB2_GRP1_EnableClock+0x2c>)
 800193e:	699a      	ldr	r2, [r3, #24]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4013      	ands	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001946:	68fb      	ldr	r3, [r7, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000

08001958 <getPwm>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int getPwm(int period, int tick) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
	if (HAL_GetTick() - lastStop < 1000)
 8001962:	f001 f97f 	bl	8002c64 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	4b49      	ldr	r3, [pc, #292]	; (8001a90 <getPwm+0x138>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001972:	d202      	bcs.n	800197a <getPwm+0x22>
		return pwm;
 8001974:	4b47      	ldr	r3, [pc, #284]	; (8001a94 <getPwm+0x13c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	e085      	b.n	8001a86 <getPwm+0x12e>
	ap = (period * a) / 100;
 800197a:	4b47      	ldr	r3, [pc, #284]	; (8001a98 <getPwm+0x140>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	fb02 f303 	mul.w	r3, r2, r3
 8001984:	4a45      	ldr	r2, [pc, #276]	; (8001a9c <getPwm+0x144>)
 8001986:	fb82 1203 	smull	r1, r2, r2, r3
 800198a:	1152      	asrs	r2, r2, #5
 800198c:	17db      	asrs	r3, r3, #31
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	4a43      	ldr	r2, [pc, #268]	; (8001aa0 <getPwm+0x148>)
 8001992:	6013      	str	r3, [r2, #0]
	bp = (period - ap) * b / 100;
 8001994:	4b42      	ldr	r3, [pc, #264]	; (8001aa0 <getPwm+0x148>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	4a41      	ldr	r2, [pc, #260]	; (8001aa4 <getPwm+0x14c>)
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	fb02 f303 	mul.w	r3, r2, r3
 80019a4:	4a3d      	ldr	r2, [pc, #244]	; (8001a9c <getPwm+0x144>)
 80019a6:	fb82 1203 	smull	r1, r2, r2, r3
 80019aa:	1152      	asrs	r2, r2, #5
 80019ac:	17db      	asrs	r3, r3, #31
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	4a3d      	ldr	r2, [pc, #244]	; (8001aa8 <getPwm+0x150>)
 80019b2:	6013      	str	r3, [r2, #0]
	cp = ((period - ap - bp) * c) / 100;
 80019b4:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <getPwm+0x148>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	1ad2      	subs	r2, r2, r3
 80019bc:	4b3a      	ldr	r3, [pc, #232]	; (8001aa8 <getPwm+0x150>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	4a3a      	ldr	r2, [pc, #232]	; (8001aac <getPwm+0x154>)
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	4a34      	ldr	r2, [pc, #208]	; (8001a9c <getPwm+0x144>)
 80019cc:	fb82 1203 	smull	r1, r2, r2, r3
 80019d0:	1152      	asrs	r2, r2, #5
 80019d2:	17db      	asrs	r3, r3, #31
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	4a36      	ldr	r2, [pc, #216]	; (8001ab0 <getPwm+0x158>)
 80019d8:	6013      	str	r3, [r2, #0]
	dp = ((period - ap - bp - cp) * d) / 100;
 80019da:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <getPwm+0x148>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	1ad2      	subs	r2, r2, r3
 80019e2:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <getPwm+0x150>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	1ad2      	subs	r2, r2, r3
 80019e8:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <getPwm+0x158>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	4a31      	ldr	r2, [pc, #196]	; (8001ab4 <getPwm+0x15c>)
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	fb02 f303 	mul.w	r3, r2, r3
 80019f6:	4a29      	ldr	r2, [pc, #164]	; (8001a9c <getPwm+0x144>)
 80019f8:	fb82 1203 	smull	r1, r2, r2, r3
 80019fc:	1152      	asrs	r2, r2, #5
 80019fe:	17db      	asrs	r3, r3, #31
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	4a2d      	ldr	r2, [pc, #180]	; (8001ab8 <getPwm+0x160>)
 8001a04:	6013      	str	r3, [r2, #0]
	if (tick < ap)
 8001a06:	4b26      	ldr	r3, [pc, #152]	; (8001aa0 <getPwm+0x148>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	da01      	bge.n	8001a14 <getPwm+0xbc>
		return 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	e038      	b.n	8001a86 <getPwm+0x12e>
	if (tick < (ap + cp))
 8001a14:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <getPwm+0x148>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <getPwm+0x158>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	da0c      	bge.n	8001a3e <getPwm+0xe6>
		return pwm * (tick - ap) / cp;
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <getPwm+0x148>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	4a19      	ldr	r2, [pc, #100]	; (8001a94 <getPwm+0x13c>)
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	fb02 f203 	mul.w	r2, r2, r3
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <getPwm+0x158>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a3c:	e023      	b.n	8001a86 <getPwm+0x12e>
	if (tick < (period - bp - dp))
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <getPwm+0x150>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	1ad2      	subs	r2, r2, r3
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <getPwm+0x160>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	da02      	bge.n	8001a58 <getPwm+0x100>
		return pwm;
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <getPwm+0x13c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	e016      	b.n	8001a86 <getPwm+0x12e>
	if (tick < (period - bp))
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <getPwm+0x150>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	da0e      	bge.n	8001a84 <getPwm+0x12c>
		return pwm * (period - tick - bp) / dp;
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	1ad2      	subs	r2, r2, r3
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <getPwm+0x150>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <getPwm+0x13c>)
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	fb02 f203 	mul.w	r2, r2, r3
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <getPwm+0x160>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a82:	e000      	b.n	8001a86 <getPwm+0x12e>
	return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200000b4 	.word	0x200000b4
 8001a94:	200000a4 	.word	0x200000a4
 8001a98:	20000d54 	.word	0x20000d54
 8001a9c:	51eb851f 	.word	0x51eb851f
 8001aa0:	20000924 	.word	0x20000924
 8001aa4:	200008f0 	.word	0x200008f0
 8001aa8:	200008ec 	.word	0x200008ec
 8001aac:	20000a20 	.word	0x20000a20
 8001ab0:	200006dc 	.word	0x200006dc
 8001ab4:	20000a88 	.word	0x20000a88
 8001ab8:	20000c98 	.word	0x20000c98

08001abc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

	if (htim == &htim3) {
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a26      	ldr	r2, [pc, #152]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d144      	bne.n	8001b56 <HAL_TIM_PeriodElapsedCallback+0x9a>
		uint32_t pinRead = HAL_GPIO_ReadPin(HALL_GPIO_Port, HALL_Pin);
 8001acc:	2101      	movs	r1, #1
 8001ace:	4825      	ldr	r0, [pc, #148]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001ad0:	f001 fb7e 	bl	80031d0 <HAL_GPIO_ReadPin>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	60fb      	str	r3, [r7, #12]
		if (hallSensor != pinRead && tick > 20) {
 8001ad8:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d017      	beq.n	8001b12 <HAL_TIM_PeriodElapsedCallback+0x56>
 8001ae2:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b14      	cmp	r3, #20
 8001ae8:	dd13      	ble.n	8001b12 <HAL_TIM_PeriodElapsedCallback+0x56>
			hallSensor = pinRead;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4a1e      	ldr	r2, [pc, #120]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001aee:	6013      	str	r3, [r2, #0]
			period = tick;
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1e      	ldr	r2, [pc, #120]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001af6:	6013      	str	r3, [r2, #0]
			tick = 0;
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
			revMeas = 2500 / (1 + period);
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	3301      	adds	r3, #1
 8001b04:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001b08:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b0c:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	e004      	b.n	8001b1c <HAL_TIM_PeriodElapsedCallback+0x60>
		} else {
			tick++;
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001b1a:	6013      	str	r3, [r2, #0]
		}
		if (tick > 25000) {
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001b24:	4293      	cmp	r3, r2
 8001b26:	dd0b      	ble.n	8001b40 <HAL_TIM_PeriodElapsedCallback+0x84>
			tick = 0;
 8001b28:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
			period = 25000;
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001b30:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001b34:	601a      	str	r2, [r3, #0]
			lastStop = HAL_GetTick();
 8001b36:	f001 f895 	bl	8002c64 <HAL_GetTick>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001b3e:	6013      	str	r3, [r2, #0]
		}
		TIM1->CCR1 = getPwm(period, tick);
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff04 	bl	8001958 <getPwm>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001b54:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000940 	.word	0x20000940
 8001b64:	40010c00 	.word	0x40010c00
 8001b68:	200000a8 	.word	0x200000a8
 8001b6c:	20000004 	.word	0x20000004
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000a3c 	.word	0x20000a3c
 8001b78:	200000b4 	.word	0x200000b4
 8001b7c:	40012c00 	.word	0x40012c00

08001b80 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001b86:	f001 f815 	bl	8002bb4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001b8a:	f000 fa8d 	bl	80020a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001b8e:	f000 fd63 	bl	8002658 <MX_GPIO_Init>
	MX_TIM1_Init();
 8001b92:	f000 fbfb 	bl	800238c <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8001b96:	f000 fd1d 	bl	80025d4 <MX_USART1_UART_Init>
	MX_SPI1_Init();
 8001b9a:	f000 fbc1 	bl	8002320 <MX_SPI1_Init>
	MX_ADC1_Init();
 8001b9e:	f000 fadf 	bl	8002160 <MX_ADC1_Init>
	MX_DMA_Init();
 8001ba2:	f000 fd41 	bl	8002628 <MX_DMA_Init>
	MX_TIM3_Init();
 8001ba6:	f000 fcc7 	bl	8002538 <MX_TIM3_Init>
	MX_TIM2_Init();
 8001baa:	f000 fc71 	bl	8002490 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	hallSensor = HAL_GPIO_ReadPin(HALL_GPIO_Port, HALL_Pin);
 8001bae:	2101      	movs	r1, #1
 8001bb0:	48ac      	ldr	r0, [pc, #688]	; (8001e64 <main+0x2e4>)
 8001bb2:	f001 fb0d 	bl	80031d0 <HAL_GPIO_ReadPin>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4bab      	ldr	r3, [pc, #684]	; (8001e68 <main+0x2e8>)
 8001bbc:	601a      	str	r2, [r3, #0]

	LL_ADC_StartCalibration(ADC1);
 8001bbe:	48ab      	ldr	r0, [pc, #684]	; (8001e6c <main+0x2ec>)
 8001bc0:	f7ff fcb1 	bl	8001526 <LL_ADC_StartCalibration>

	UC1609_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port,
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	9302      	str	r3, [sp, #8]
 8001bc8:	4ba6      	ldr	r3, [pc, #664]	; (8001e64 <main+0x2e4>)
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	4ba4      	ldr	r3, [pc, #656]	; (8001e64 <main+0x2e4>)
 8001bd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bd8:	49a2      	ldr	r1, [pc, #648]	; (8001e64 <main+0x2e4>)
 8001bda:	48a5      	ldr	r0, [pc, #660]	; (8001e70 <main+0x2f0>)
 8001bdc:	f7ff f8aa 	bl	8000d34 <UC1609_Init>
	LCD_DC_Pin,
	LCD_RESET_GPIO_Port, LCD_RESET_Pin);

	HAL_TIM_Base_Start_IT(&htim3);
 8001be0:	48a4      	ldr	r0, [pc, #656]	; (8001e74 <main+0x2f4>)
 8001be2:	f002 faab 	bl	800413c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001be6:	2100      	movs	r1, #0
 8001be8:	48a3      	ldr	r0, [pc, #652]	; (8001e78 <main+0x2f8>)
 8001bea:	f002 fb43 	bl	8004274 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001bee:	213c      	movs	r1, #60	; 0x3c
 8001bf0:	48a2      	ldr	r0, [pc, #648]	; (8001e7c <main+0x2fc>)
 8001bf2:	f002 fc7d 	bl	80044f0 <HAL_TIM_Encoder_Start>

	LL_DMA_ConfigTransfer(DMA1,
 8001bf6:	f242 52a0 	movw	r2, #9632	; 0x25a0
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	48a0      	ldr	r0, [pc, #640]	; (8001e80 <main+0x300>)
 8001bfe:	f7ff fccf 	bl	80015a0 <LL_DMA_ConfigTransfer>
	LL_DMA_PERIPH_NOINCREMENT |
	LL_DMA_MEMORY_INCREMENT |
	LL_DMA_PDATAALIGN_HALFWORD |
	LL_DMA_MDATAALIGN_HALFWORD |
	LL_DMA_PRIORITY_HIGH);
	LL_DMA_ConfigAddresses(DMA1,
 8001c02:	2100      	movs	r1, #0
 8001c04:	4899      	ldr	r0, [pc, #612]	; (8001e6c <main+0x2ec>)
 8001c06:	f7ff fbd5 	bl	80013b4 <LL_ADC_DMA_GetRegAddr>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	499d      	ldr	r1, [pc, #628]	; (8001e84 <main+0x304>)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	460b      	mov	r3, r1
 8001c14:	2101      	movs	r1, #1
 8001c16:	489a      	ldr	r0, [pc, #616]	; (8001e80 <main+0x300>)
 8001c18:	f7ff fdf8 	bl	800180c <LL_DMA_ConfigAddresses>
	LL_DMA_CHANNEL_1, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA), (uint32_t) &adc,
	LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 7);
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	2101      	movs	r1, #1
 8001c20:	4897      	ldr	r0, [pc, #604]	; (8001e80 <main+0x300>)
 8001c22:	f7ff fdd1 	bl	80017c8 <LL_DMA_SetDataLength>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 8001c26:	2101      	movs	r1, #1
 8001c28:	4895      	ldr	r0, [pc, #596]	; (8001e80 <main+0x300>)
 8001c2a:	f7ff fe29 	bl	8001880 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4893      	ldr	r0, [pc, #588]	; (8001e80 <main+0x300>)
 8001c32:	f7ff fe43 	bl	80018bc <LL_DMA_EnableIT_TE>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8001c36:	2101      	movs	r1, #1
 8001c38:	4891      	ldr	r0, [pc, #580]	; (8001e80 <main+0x300>)
 8001c3a:	f7ff fc93 	bl	8001564 <LL_DMA_EnableChannel>

	LL_ADC_Enable(ADC1);
 8001c3e:	488b      	ldr	r0, [pc, #556]	; (8001e6c <main+0x2ec>)
 8001c40:	f7ff fc62 	bl	8001508 <LL_ADC_Enable>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	LL_ADC_REG_StartConversionSWStart(ADC1);
 8001c44:	4889      	ldr	r0, [pc, #548]	; (8001e6c <main+0x2ec>)
 8001c46:	f7ff fc7d 	bl	8001544 <LL_ADC_REG_StartConversionSWStart>

	while (1) {
		a = (adc[0] - 45) / 40;
 8001c4a:	4b8e      	ldr	r3, [pc, #568]	; (8001e84 <main+0x304>)
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	3b2d      	subs	r3, #45	; 0x2d
 8001c52:	4a8d      	ldr	r2, [pc, #564]	; (8001e88 <main+0x308>)
 8001c54:	fb82 1203 	smull	r1, r2, r2, r3
 8001c58:	1112      	asrs	r2, r2, #4
 8001c5a:	17db      	asrs	r3, r3, #31
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	4a8b      	ldr	r2, [pc, #556]	; (8001e8c <main+0x30c>)
 8001c60:	6013      	str	r3, [r2, #0]
		b = (adc[1] - 45) / 40;
 8001c62:	4b88      	ldr	r3, [pc, #544]	; (8001e84 <main+0x304>)
 8001c64:	885b      	ldrh	r3, [r3, #2]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3b2d      	subs	r3, #45	; 0x2d
 8001c6a:	4a87      	ldr	r2, [pc, #540]	; (8001e88 <main+0x308>)
 8001c6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c70:	1112      	asrs	r2, r2, #4
 8001c72:	17db      	asrs	r3, r3, #31
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	4a86      	ldr	r2, [pc, #536]	; (8001e90 <main+0x310>)
 8001c78:	6013      	str	r3, [r2, #0]
		c = (adc[2] - 45) / 40;
 8001c7a:	4b82      	ldr	r3, [pc, #520]	; (8001e84 <main+0x304>)
 8001c7c:	889b      	ldrh	r3, [r3, #4]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3b2d      	subs	r3, #45	; 0x2d
 8001c82:	4a81      	ldr	r2, [pc, #516]	; (8001e88 <main+0x308>)
 8001c84:	fb82 1203 	smull	r1, r2, r2, r3
 8001c88:	1112      	asrs	r2, r2, #4
 8001c8a:	17db      	asrs	r3, r3, #31
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	4a81      	ldr	r2, [pc, #516]	; (8001e94 <main+0x314>)
 8001c90:	6013      	str	r3, [r2, #0]
		d = (adc[3] - 45) / 40;
 8001c92:	4b7c      	ldr	r3, [pc, #496]	; (8001e84 <main+0x304>)
 8001c94:	88db      	ldrh	r3, [r3, #6]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	3b2d      	subs	r3, #45	; 0x2d
 8001c9a:	4a7b      	ldr	r2, [pc, #492]	; (8001e88 <main+0x308>)
 8001c9c:	fb82 1203 	smull	r1, r2, r2, r3
 8001ca0:	1112      	asrs	r2, r2, #4
 8001ca2:	17db      	asrs	r3, r3, #31
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	4a7c      	ldr	r2, [pc, #496]	; (8001e98 <main+0x318>)
 8001ca8:	6013      	str	r3, [r2, #0]
		pwm = (adc[4] - 45) / 40;
 8001caa:	4b76      	ldr	r3, [pc, #472]	; (8001e84 <main+0x304>)
 8001cac:	891b      	ldrh	r3, [r3, #8]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	3b2d      	subs	r3, #45	; 0x2d
 8001cb2:	4a75      	ldr	r2, [pc, #468]	; (8001e88 <main+0x308>)
 8001cb4:	fb82 1203 	smull	r1, r2, r2, r3
 8001cb8:	1112      	asrs	r2, r2, #4
 8001cba:	17db      	asrs	r3, r3, #31
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	4a77      	ldr	r2, [pc, #476]	; (8001e9c <main+0x31c>)
 8001cc0:	6013      	str	r3, [r2, #0]

		if (a < 0)
 8001cc2:	4b72      	ldr	r3, [pc, #456]	; (8001e8c <main+0x30c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	da02      	bge.n	8001cd0 <main+0x150>
			a = 0;
 8001cca:	4b70      	ldr	r3, [pc, #448]	; (8001e8c <main+0x30c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
		if (a > 100)
 8001cd0:	4b6e      	ldr	r3, [pc, #440]	; (8001e8c <main+0x30c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b64      	cmp	r3, #100	; 0x64
 8001cd6:	dd02      	ble.n	8001cde <main+0x15e>
			a = 100;
 8001cd8:	4b6c      	ldr	r3, [pc, #432]	; (8001e8c <main+0x30c>)
 8001cda:	2264      	movs	r2, #100	; 0x64
 8001cdc:	601a      	str	r2, [r3, #0]
		if (b < 0)
 8001cde:	4b6c      	ldr	r3, [pc, #432]	; (8001e90 <main+0x310>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	da02      	bge.n	8001cec <main+0x16c>
			b = 0;
 8001ce6:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <main+0x310>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
		if (b > 100)
 8001cec:	4b68      	ldr	r3, [pc, #416]	; (8001e90 <main+0x310>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b64      	cmp	r3, #100	; 0x64
 8001cf2:	dd02      	ble.n	8001cfa <main+0x17a>
			b = 100;
 8001cf4:	4b66      	ldr	r3, [pc, #408]	; (8001e90 <main+0x310>)
 8001cf6:	2264      	movs	r2, #100	; 0x64
 8001cf8:	601a      	str	r2, [r3, #0]
		if (c < 0)
 8001cfa:	4b66      	ldr	r3, [pc, #408]	; (8001e94 <main+0x314>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	da02      	bge.n	8001d08 <main+0x188>
			c = 0;
 8001d02:	4b64      	ldr	r3, [pc, #400]	; (8001e94 <main+0x314>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
		if (c > 100)
 8001d08:	4b62      	ldr	r3, [pc, #392]	; (8001e94 <main+0x314>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b64      	cmp	r3, #100	; 0x64
 8001d0e:	dd02      	ble.n	8001d16 <main+0x196>
			c = 100;
 8001d10:	4b60      	ldr	r3, [pc, #384]	; (8001e94 <main+0x314>)
 8001d12:	2264      	movs	r2, #100	; 0x64
 8001d14:	601a      	str	r2, [r3, #0]
		if (d < 0)
 8001d16:	4b60      	ldr	r3, [pc, #384]	; (8001e98 <main+0x318>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	da02      	bge.n	8001d24 <main+0x1a4>
			d = 0;
 8001d1e:	4b5e      	ldr	r3, [pc, #376]	; (8001e98 <main+0x318>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
		if (d > 100)
 8001d24:	4b5c      	ldr	r3, [pc, #368]	; (8001e98 <main+0x318>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b64      	cmp	r3, #100	; 0x64
 8001d2a:	dd02      	ble.n	8001d32 <main+0x1b2>
			d = 100;
 8001d2c:	4b5a      	ldr	r3, [pc, #360]	; (8001e98 <main+0x318>)
 8001d2e:	2264      	movs	r2, #100	; 0x64
 8001d30:	601a      	str	r2, [r3, #0]
		if (pwm < 0)
 8001d32:	4b5a      	ldr	r3, [pc, #360]	; (8001e9c <main+0x31c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	da02      	bge.n	8001d40 <main+0x1c0>
			pwm = 0;
 8001d3a:	4b58      	ldr	r3, [pc, #352]	; (8001e9c <main+0x31c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
		if (pwm > 100)
 8001d40:	4b56      	ldr	r3, [pc, #344]	; (8001e9c <main+0x31c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b64      	cmp	r3, #100	; 0x64
 8001d46:	dd02      	ble.n	8001d4e <main+0x1ce>
			pwm = 100;
 8001d48:	4b54      	ldr	r3, [pc, #336]	; (8001e9c <main+0x31c>)
 8001d4a:	2264      	movs	r2, #100	; 0x64
 8001d4c:	601a      	str	r2, [r3, #0]

		UC1609_Clean();
 8001d4e:	f7ff f8bd 	bl	8000ecc <UC1609_Clean>

		int ax = (140 * a) / 100;
 8001d52:	4b4e      	ldr	r3, [pc, #312]	; (8001e8c <main+0x30c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	228c      	movs	r2, #140	; 0x8c
 8001d58:	fb02 f303 	mul.w	r3, r2, r3
 8001d5c:	4a50      	ldr	r2, [pc, #320]	; (8001ea0 <main+0x320>)
 8001d5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d62:	1152      	asrs	r2, r2, #5
 8001d64:	17db      	asrs	r3, r3, #31
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	60fb      	str	r3, [r7, #12]
		int bx = (140 - ax) * b / 100;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f1c3 038c 	rsb	r3, r3, #140	; 0x8c
 8001d70:	4a47      	ldr	r2, [pc, #284]	; (8001e90 <main+0x310>)
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	fb02 f303 	mul.w	r3, r2, r3
 8001d78:	4a49      	ldr	r2, [pc, #292]	; (8001ea0 <main+0x320>)
 8001d7a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d7e:	1152      	asrs	r2, r2, #5
 8001d80:	17db      	asrs	r3, r3, #31
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	60bb      	str	r3, [r7, #8]
		int cx = ((140 - ax - bx) * c) / 100;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f1c3 028c 	rsb	r2, r3, #140	; 0x8c
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	4a40      	ldr	r2, [pc, #256]	; (8001e94 <main+0x314>)
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	fb02 f303 	mul.w	r3, r2, r3
 8001d98:	4a41      	ldr	r2, [pc, #260]	; (8001ea0 <main+0x320>)
 8001d9a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d9e:	1152      	asrs	r2, r2, #5
 8001da0:	17db      	asrs	r3, r3, #31
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	607b      	str	r3, [r7, #4]
		int dx = ((140 - ax - bx - cx) * d) / 100;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f1c3 028c 	rsb	r2, r3, #140	; 0x8c
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	1ad2      	subs	r2, r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	4a38      	ldr	r2, [pc, #224]	; (8001e98 <main+0x318>)
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	fb02 f303 	mul.w	r3, r2, r3
 8001dbc:	4a38      	ldr	r2, [pc, #224]	; (8001ea0 <main+0x320>)
 8001dbe:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc2:	1152      	asrs	r2, r2, #5
 8001dc4:	17db      	asrs	r3, r3, #31
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	603b      	str	r3, [r7, #0]

		UC1609_DrawLine(ax, 63, ax + cx, 63 - 63 * pwm / 100);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	b2d8      	uxtb	r0, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	b2d9      	uxtb	r1, r3
 8001dda:	4b30      	ldr	r3, [pc, #192]	; (8001e9c <main+0x31c>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4613      	mov	r3, r2
 8001de0:	019b      	lsls	r3, r3, #6
 8001de2:	1a9b      	subs	r3, r3, r2
 8001de4:	4a2e      	ldr	r2, [pc, #184]	; (8001ea0 <main+0x320>)
 8001de6:	fb82 4203 	smull	r4, r2, r2, r3
 8001dea:	1152      	asrs	r2, r2, #5
 8001dec:	17db      	asrs	r3, r3, #31
 8001dee:	1a9b      	subs	r3, r3, r2
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	333f      	adds	r3, #63	; 0x3f
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	460a      	mov	r2, r1
 8001df8:	213f      	movs	r1, #63	; 0x3f
 8001dfa:	f7ff f965 	bl	80010c8 <UC1609_DrawLine>
		UC1609_DrawLine(ax + cx, 63 - 63 * pwm / 100, 140 - bx - dx, 63 - 63 * pwm / 100);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	b2d8      	uxtb	r0, r3
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <main+0x31c>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	019b      	lsls	r3, r3, #6
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	4a22      	ldr	r2, [pc, #136]	; (8001ea0 <main+0x320>)
 8001e16:	fb82 1203 	smull	r1, r2, r2, r3
 8001e1a:	1152      	asrs	r2, r2, #5
 8001e1c:	17db      	asrs	r3, r3, #31
 8001e1e:	1a9b      	subs	r3, r3, r2
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	333f      	adds	r3, #63	; 0x3f
 8001e24:	b2d9      	uxtb	r1, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	4413      	add	r3, r2
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	f06f 0373 	mvn.w	r3, #115	; 0x73
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	b2dc      	uxtb	r4, r3
 8001e3a:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <main+0x31c>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	019b      	lsls	r3, r3, #6
 8001e42:	1a9b      	subs	r3, r3, r2
 8001e44:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <main+0x320>)
 8001e46:	fb82 c203 	smull	ip, r2, r2, r3
 8001e4a:	1152      	asrs	r2, r2, #5
 8001e4c:	17db      	asrs	r3, r3, #31
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	333f      	adds	r3, #63	; 0x3f
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	4622      	mov	r2, r4
 8001e58:	f7ff f936 	bl	80010c8 <UC1609_DrawLine>
		UC1609_DrawLine(140 - dx - bx, 63 - 63 * pwm / 100, 140 - bx, 63);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	e020      	b.n	8001ea4 <main+0x324>
 8001e62:	bf00      	nop
 8001e64:	40010c00 	.word	0x40010c00
 8001e68:	200000a8 	.word	0x200000a8
 8001e6c:	40012400 	.word	0x40012400
 8001e70:	20000c9c 	.word	0x20000c9c
 8001e74:	20000940 	.word	0x20000940
 8001e78:	20000a40 	.word	0x20000a40
 8001e7c:	20000cf4 	.word	0x20000cf4
 8001e80:	40020000 	.word	0x40020000
 8001e84:	20000094 	.word	0x20000094
 8001e88:	66666667 	.word	0x66666667
 8001e8c:	20000d54 	.word	0x20000d54
 8001e90:	200008f0 	.word	0x200008f0
 8001e94:	20000a20 	.word	0x20000a20
 8001e98:	20000a88 	.word	0x20000a88
 8001e9c:	200000a4 	.word	0x200000a4
 8001ea0:	51eb851f 	.word	0x51eb851f
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	f06f 0373 	mvn.w	r3, #115	; 0x73
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	b2d8      	uxtb	r0, r3
 8001eb4:	4b62      	ldr	r3, [pc, #392]	; (8002040 <main+0x4c0>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	019b      	lsls	r3, r3, #6
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	4a61      	ldr	r2, [pc, #388]	; (8002044 <main+0x4c4>)
 8001ec0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ec4:	1152      	asrs	r2, r2, #5
 8001ec6:	17db      	asrs	r3, r3, #31
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	333f      	adds	r3, #63	; 0x3f
 8001ece:	b2d9      	uxtb	r1, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	f06f 0373 	mvn.w	r3, #115	; 0x73
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	233f      	movs	r3, #63	; 0x3f
 8001ede:	f7ff f8f3 	bl	80010c8 <UC1609_DrawLine>

		voltage = 3.0f * 1479.0 * 100 / 31.3 / (float) adc[6];
 8001ee2:	4b59      	ldr	r3, [pc, #356]	; (8002048 <main+0x4c8>)
 8001ee4:	899b      	ldrh	r3, [r3, #12]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fe05 	bl	8000af8 <__aeabi_ui2f>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fa91 	bl	8000418 <__aeabi_f2d>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	a14f      	add	r1, pc, #316	; (adr r1, 8002038 <main+0x4b8>)
 8001efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f00:	f7fe fc0c 	bl	800071c <__aeabi_ddiv>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f7fe fcee 	bl	80008ec <__aeabi_d2f>
 8001f10:	4603      	mov	r3, r0
 8001f12:	4a4e      	ldr	r2, [pc, #312]	; (800204c <main+0x4cc>)
 8001f14:	6013      	str	r3, [r2, #0]
		//current = adc[5] * voltage / 4096.0;
		if (HAL_GetTick()- lastCurrentMeasure>100)
 8001f16:	f000 fea5 	bl	8002c64 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <main+0x4d0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	; 0x64
 8001f24:	d90b      	bls.n	8001f3e <main+0x3be>
		{
			lastCurrentMeasure=HAL_GetTick();
 8001f26:	f000 fe9d 	bl	8002c64 <HAL_GetTick>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4a48      	ldr	r2, [pc, #288]	; (8002050 <main+0x4d0>)
 8001f2e:	6013      	str	r3, [r2, #0]
			AveragerAddValue(&averCurrent, adc[5]);
 8001f30:	4b45      	ldr	r3, [pc, #276]	; (8002048 <main+0x4c8>)
 8001f32:	895b      	ldrh	r3, [r3, #10]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4619      	mov	r1, r3
 8001f38:	4846      	ldr	r0, [pc, #280]	; (8002054 <main+0x4d4>)
 8001f3a:	f7fe fe35 	bl	8000ba8 <AveragerAddValue>
		}

		if (HAL_GetTick() - lastUpdate > 500) {
 8001f3e:	f000 fe91 	bl	8002c64 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	4b44      	ldr	r3, [pc, #272]	; (8002058 <main+0x4d8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f4e:	d931      	bls.n	8001fb4 <main+0x434>
			lastUpdate = HAL_GetTick();
 8001f50:	f000 fe88 	bl	8002c64 <HAL_GetTick>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4a40      	ldr	r2, [pc, #256]	; (8002058 <main+0x4d8>)
 8001f58:	6013      	str	r3, [r2, #0]

			sprintf(string1, "%d %d", a, b);
 8001f5a:	4b40      	ldr	r3, [pc, #256]	; (800205c <main+0x4dc>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	4b40      	ldr	r3, [pc, #256]	; (8002060 <main+0x4e0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4940      	ldr	r1, [pc, #256]	; (8002064 <main+0x4e4>)
 8001f64:	4840      	ldr	r0, [pc, #256]	; (8002068 <main+0x4e8>)
 8001f66:	f003 fc51 	bl	800580c <siprintf>
			sprintf(string2, "%d %d", c, d);
 8001f6a:	4b40      	ldr	r3, [pc, #256]	; (800206c <main+0x4ec>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	4b40      	ldr	r3, [pc, #256]	; (8002070 <main+0x4f0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	493c      	ldr	r1, [pc, #240]	; (8002064 <main+0x4e4>)
 8001f74:	483f      	ldr	r0, [pc, #252]	; (8002074 <main+0x4f4>)
 8001f76:	f003 fc49 	bl	800580c <siprintf>
			sprintf(string3, "PWM:%d ", pwm);
 8001f7a:	4b31      	ldr	r3, [pc, #196]	; (8002040 <main+0x4c0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	493d      	ldr	r1, [pc, #244]	; (8002078 <main+0x4f8>)
 8001f82:	483e      	ldr	r0, [pc, #248]	; (800207c <main+0x4fc>)
 8001f84:	f003 fc42 	bl	800580c <siprintf>
			sprintf(string4, "REV:%d ", revMeas);
 8001f88:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <main+0x500>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	493d      	ldr	r1, [pc, #244]	; (8002084 <main+0x504>)
 8001f90:	483d      	ldr	r0, [pc, #244]	; (8002088 <main+0x508>)
 8001f92:	f003 fc3b 	bl	800580c <siprintf>
			sprintf(string5, "I:%d", averCurrent.average);
 8001f96:	4b2f      	ldr	r3, [pc, #188]	; (8002054 <main+0x4d4>)
 8001f98:	f8b3 320a 	ldrh.w	r3, [r3, #522]	; 0x20a
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	493b      	ldr	r1, [pc, #236]	; (800208c <main+0x50c>)
 8001fa0:	483b      	ldr	r0, [pc, #236]	; (8002090 <main+0x510>)
 8001fa2:	f003 fc33 	bl	800580c <siprintf>
			sprintf(string6, "P:%d", period);
 8001fa6:	4b3b      	ldr	r3, [pc, #236]	; (8002094 <main+0x514>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	493a      	ldr	r1, [pc, #232]	; (8002098 <main+0x518>)
 8001fae:	483b      	ldr	r0, [pc, #236]	; (800209c <main+0x51c>)
 8001fb0:	f003 fc2c 	bl	800580c <siprintf>
			//sprintf(botString, "1:%d,2:%d,3:%d,4:%d", period[0], period[1], period[2], period[3]);
		}

		UC1609_SetPos(24, 0);
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2018      	movs	r0, #24
 8001fb8:	f7fe ff2e 	bl	8000e18 <UC1609_SetPos>
		UC1609_PutString(string1);
 8001fbc:	482a      	ldr	r0, [pc, #168]	; (8002068 <main+0x4e8>)
 8001fbe:	f7fe fffd 	bl	8000fbc <UC1609_PutString>
		UC1609_SetPos(24, 1);
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	2018      	movs	r0, #24
 8001fc6:	f7fe ff27 	bl	8000e18 <UC1609_SetPos>
		UC1609_PutString(string2);
 8001fca:	482a      	ldr	r0, [pc, #168]	; (8002074 <main+0x4f4>)
 8001fcc:	f7fe fff6 	bl	8000fbc <UC1609_PutString>
		UC1609_SetPos(24, 2);
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	2018      	movs	r0, #24
 8001fd4:	f7fe ff20 	bl	8000e18 <UC1609_SetPos>
		UC1609_PutString(string3);
 8001fd8:	4828      	ldr	r0, [pc, #160]	; (800207c <main+0x4fc>)
 8001fda:	f7fe ffef 	bl	8000fbc <UC1609_PutString>
		UC1609_SetPos(24, 3);
 8001fde:	2103      	movs	r1, #3
 8001fe0:	2018      	movs	r0, #24
 8001fe2:	f7fe ff19 	bl	8000e18 <UC1609_SetPos>
		UC1609_PutString(string4);
 8001fe6:	4828      	ldr	r0, [pc, #160]	; (8002088 <main+0x508>)
 8001fe8:	f7fe ffe8 	bl	8000fbc <UC1609_PutString>
		UC1609_SetPos(24, 4);
 8001fec:	2104      	movs	r1, #4
 8001fee:	2018      	movs	r0, #24
 8001ff0:	f7fe ff12 	bl	8000e18 <UC1609_SetPos>
		UC1609_PutString(string5);
 8001ff4:	4826      	ldr	r0, [pc, #152]	; (8002090 <main+0x510>)
 8001ff6:	f7fe ffe1 	bl	8000fbc <UC1609_PutString>
		UC1609_SetPos(24, 5);
 8001ffa:	2105      	movs	r1, #5
 8001ffc:	2018      	movs	r0, #24
 8001ffe:	f7fe ff0b 	bl	8000e18 <UC1609_SetPos>
		UC1609_PutString(string6);
 8002002:	4826      	ldr	r0, [pc, #152]	; (800209c <main+0x51c>)
 8002004:	f7fe ffda 	bl	8000fbc <UC1609_PutString>
		UC1609_SetPos(24, 6);
 8002008:	2106      	movs	r1, #6
 800200a:	2018      	movs	r0, #24
 800200c:	f7fe ff04 	bl	8000e18 <UC1609_SetPos>
		UC1609_PutString(string7);
 8002010:	4823      	ldr	r0, [pc, #140]	; (80020a0 <main+0x520>)
 8002012:	f7fe ffd3 	bl	8000fbc <UC1609_PutString>
		UC1609_SetPos(0, 7);
 8002016:	2107      	movs	r1, #7
 8002018:	2000      	movs	r0, #0
 800201a:	f7fe fefd 	bl	8000e18 <UC1609_SetPos>
		UC1609_PutString(botString);
 800201e:	4821      	ldr	r0, [pc, #132]	; (80020a4 <main+0x524>)
 8002020:	f7fe ffcc 	bl	8000fbc <UC1609_PutString>
		UC1609_DrawDottedLine(140, 0, 140, 55);
 8002024:	2337      	movs	r3, #55	; 0x37
 8002026:	228c      	movs	r2, #140	; 0x8c
 8002028:	2100      	movs	r1, #0
 800202a:	208c      	movs	r0, #140	; 0x8c
 800202c:	f7ff f8d1 	bl	80011d2 <UC1609_DrawDottedLine>
		UC1609_UpdateScreen();
 8002030:	f7fe ff14 	bl	8000e5c <UC1609_UpdateScreen>
	while (1) {
 8002034:	e609      	b.n	8001c4a <main+0xca>
 8002036:	bf00      	nop
 8002038:	03458551 	.word	0x03458551
 800203c:	40cbafdc 	.word	0x40cbafdc
 8002040:	200000a4 	.word	0x200000a4
 8002044:	51eb851f 	.word	0x51eb851f
 8002048:	20000094 	.word	0x20000094
 800204c:	20000988 	.word	0x20000988
 8002050:	200000b0 	.word	0x200000b0
 8002054:	200006e0 	.word	0x200006e0
 8002058:	200000ac 	.word	0x200000ac
 800205c:	20000d54 	.word	0x20000d54
 8002060:	200008f0 	.word	0x200008f0
 8002064:	0800607c 	.word	0x0800607c
 8002068:	20000a04 	.word	0x20000a04
 800206c:	20000a20 	.word	0x20000a20
 8002070:	20000a88 	.word	0x20000a88
 8002074:	200008f4 	.word	0x200008f4
 8002078:	08006084 	.word	0x08006084
 800207c:	20000d3c 	.word	0x20000d3c
 8002080:	20000a3c 	.word	0x20000a3c
 8002084:	0800608c 	.word	0x0800608c
 8002088:	200009a8 	.word	0x200009a8
 800208c:	08006094 	.word	0x08006094
 8002090:	2000098c 	.word	0x2000098c
 8002094:	20000000 	.word	0x20000000
 8002098:	0800609c 	.word	0x0800609c
 800209c:	20000928 	.word	0x20000928
 80020a0:	2000090c 	.word	0x2000090c
 80020a4:	20000a24 	.word	0x20000a24

080020a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b094      	sub	sp, #80	; 0x50
 80020ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80020ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020b2:	2228      	movs	r2, #40	; 0x28
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 fba0 	bl	80057fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020d8:	2301      	movs	r3, #1
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80020e2:	2300      	movs	r3, #0
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020e6:	2301      	movs	r3, #1
 80020e8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ea:	2302      	movs	r3, #2
 80020ec:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020f2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80020f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80020f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80020fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020fe:	4618      	mov	r0, r3
 8002100:	f001 f896 	bl	8003230 <HAL_RCC_OscConfig>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <SystemClock_Config+0x66>
		Error_Handler();
 800210a:	f000 fb0b 	bl	8002724 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800210e:	230f      	movs	r3, #15
 8002110:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002112:	2302      	movs	r3, #2
 8002114:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800211a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800211e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	2102      	movs	r1, #2
 800212a:	4618      	mov	r0, r3
 800212c:	f001 fb00 	bl	8003730 <HAL_RCC_ClockConfig>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <SystemClock_Config+0x92>
		Error_Handler();
 8002136:	f000 faf5 	bl	8002724 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800213a:	2302      	movs	r3, #2
 800213c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800213e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002142:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	4618      	mov	r0, r3
 8002148:	f001 fc8c 	bl	8003a64 <HAL_RCCEx_PeriphCLKConfig>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <SystemClock_Config+0xae>
		Error_Handler();
 8002152:	f000 fae7 	bl	8002724 <Error_Handler>
	}
}
 8002156:	bf00      	nop
 8002158:	3750      	adds	r7, #80	; 0x50
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b08e      	sub	sp, #56	; 0x38
 8002164:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	LL_ADC_InitTypeDef ADC_InitStruct = { 0 };
 8002166:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
	LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = { 0 };
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = { 0 };
 8002174:	f107 0318 	add.w	r3, r7, #24
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
 8002190:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8002192:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002196:	f7ff fbc7 	bl	8001928 <LL_APB2_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800219a:	2004      	movs	r0, #4
 800219c:	f7ff fbc4 	bl	8001928 <LL_APB2_GRP1_EnableClock>
	 PA2   ------> ADC1_IN2
	 PA3   ------> ADC1_IN3
	 PA4   ------> ADC1_IN4
	 PA6   ------> ADC1_IN6
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 | LL_GPIO_PIN_3 | LL_GPIO_PIN_4 | LL_GPIO_PIN_6;
 80021a0:	f645 735f 	movw	r3, #24415	; 0x5f5f
 80021a4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	4619      	mov	r1, r3
 80021ae:	4853      	ldr	r0, [pc, #332]	; (80022fc <MX_ADC1_Init+0x19c>)
 80021b0:	f003 fa85 	bl	80056be <LL_GPIO_Init>

	/* ADC1 DMA Init */

	/* ADC1 Init */
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1,
 80021b4:	2200      	movs	r2, #0
 80021b6:	2101      	movs	r1, #1
 80021b8:	4851      	ldr	r0, [pc, #324]	; (8002300 <MX_ADC1_Init+0x1a0>)
 80021ba:	f7ff fa15 	bl	80015e8 <LL_DMA_SetDataTransferDirection>
	LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1,
 80021be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021c2:	2101      	movs	r1, #1
 80021c4:	484e      	ldr	r0, [pc, #312]	; (8002300 <MX_ADC1_Init+0x1a0>)
 80021c6:	f7ff fadd 	bl	8001784 <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_PRIORITY_HIGH);

	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 80021ca:	2220      	movs	r2, #32
 80021cc:	2101      	movs	r1, #1
 80021ce:	484c      	ldr	r0, [pc, #304]	; (8002300 <MX_ADC1_Init+0x1a0>)
 80021d0:	f7ff fa2e 	bl	8001630 <LL_DMA_SetMode>

	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80021d4:	2200      	movs	r2, #0
 80021d6:	2101      	movs	r1, #1
 80021d8:	4849      	ldr	r0, [pc, #292]	; (8002300 <MX_ADC1_Init+0x1a0>)
 80021da:	f7ff fa4b 	bl	8001674 <LL_DMA_SetPeriphIncMode>

	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80021de:	2280      	movs	r2, #128	; 0x80
 80021e0:	2101      	movs	r1, #1
 80021e2:	4847      	ldr	r0, [pc, #284]	; (8002300 <MX_ADC1_Init+0x1a0>)
 80021e4:	f7ff fa68 	bl	80016b8 <LL_DMA_SetMemoryIncMode>

	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 80021e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ec:	2101      	movs	r1, #1
 80021ee:	4844      	ldr	r0, [pc, #272]	; (8002300 <MX_ADC1_Init+0x1a0>)
 80021f0:	f7ff fa84 	bl	80016fc <LL_DMA_SetPeriphSize>

	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 80021f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021f8:	2101      	movs	r1, #1
 80021fa:	4841      	ldr	r0, [pc, #260]	; (8002300 <MX_ADC1_Init+0x1a0>)
 80021fc:	f7ff faa0 	bl	8001740 <LL_DMA_SetMemorySize>
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002200:	2300      	movs	r3, #0
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
	ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8002204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002208:	637b      	str	r3, [r7, #52]	; 0x34
	LL_ADC_Init(ADC1, &ADC_InitStruct);
 800220a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800220e:	4619      	mov	r1, r3
 8002210:	483c      	ldr	r0, [pc, #240]	; (8002304 <MX_ADC1_Init+0x1a4>)
 8002212:	f003 f92f 	bl	8005474 <LL_ADC_Init>
	ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002216:	2300      	movs	r3, #0
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800221a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800221e:	4619      	mov	r1, r3
 8002220:	4838      	ldr	r0, [pc, #224]	; (8002304 <MX_ADC1_Init+0x1a4>)
 8002222:	f003 f8f5 	bl	8005410 <LL_ADC_CommonInit>
	ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002226:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800222a:	61bb      	str	r3, [r7, #24]
	ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS;
 800222c:	f44f 03c0 	mov.w	r3, #6291456	; 0x600000
 8002230:	61fb      	str	r3, [r7, #28]
	ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
	ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8002236:	2302      	movs	r3, #2
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
	ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 800223a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
	LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002240:	f107 0318 	add.w	r3, r7, #24
 8002244:	4619      	mov	r1, r3
 8002246:	482f      	ldr	r0, [pc, #188]	; (8002304 <MX_ADC1_Init+0x1a4>)
 8002248:	f003 f93b 	bl	80054c2 <LL_ADC_REG_Init>
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 800224c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002250:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002254:	482b      	ldr	r0, [pc, #172]	; (8002304 <MX_ADC1_Init+0x1a4>)
 8002256:	f7ff f8d7 	bl	8001408 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0,
 800225a:	2207      	movs	r2, #7
 800225c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002260:	4828      	ldr	r0, [pc, #160]	; (8002304 <MX_ADC1_Init+0x1a4>)
 8002262:	f7ff f906 	bl	8001472 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SAMPLINGTIME_239CYCLES_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8002266:	4a28      	ldr	r2, [pc, #160]	; (8002308 <MX_ADC1_Init+0x1a8>)
 8002268:	f240 2105 	movw	r1, #517	; 0x205
 800226c:	4825      	ldr	r0, [pc, #148]	; (8002304 <MX_ADC1_Init+0x1a4>)
 800226e:	f7ff f8cb 	bl	8001408 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1,
 8002272:	2207      	movs	r2, #7
 8002274:	4924      	ldr	r1, [pc, #144]	; (8002308 <MX_ADC1_Init+0x1a8>)
 8002276:	4823      	ldr	r0, [pc, #140]	; (8002304 <MX_ADC1_Init+0x1a4>)
 8002278:	f7ff f8fb 	bl	8001472 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SAMPLINGTIME_239CYCLES_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 800227c:	4a23      	ldr	r2, [pc, #140]	; (800230c <MX_ADC1_Init+0x1ac>)
 800227e:	f240 210a 	movw	r1, #522	; 0x20a
 8002282:	4820      	ldr	r0, [pc, #128]	; (8002304 <MX_ADC1_Init+0x1a4>)
 8002284:	f7ff f8c0 	bl	8001408 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2,
 8002288:	2207      	movs	r2, #7
 800228a:	4920      	ldr	r1, [pc, #128]	; (800230c <MX_ADC1_Init+0x1ac>)
 800228c:	481d      	ldr	r0, [pc, #116]	; (8002304 <MX_ADC1_Init+0x1a4>)
 800228e:	f7ff f8f0 	bl	8001472 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SAMPLINGTIME_239CYCLES_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8002292:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <MX_ADC1_Init+0x1b0>)
 8002294:	f240 210f 	movw	r1, #527	; 0x20f
 8002298:	481a      	ldr	r0, [pc, #104]	; (8002304 <MX_ADC1_Init+0x1a4>)
 800229a:	f7ff f8b5 	bl	8001408 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3,
 800229e:	2207      	movs	r2, #7
 80022a0:	491b      	ldr	r1, [pc, #108]	; (8002310 <MX_ADC1_Init+0x1b0>)
 80022a2:	4818      	ldr	r0, [pc, #96]	; (8002304 <MX_ADC1_Init+0x1a4>)
 80022a4:	f7ff f8e5 	bl	8001472 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SAMPLINGTIME_239CYCLES_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 80022a8:	4a1a      	ldr	r2, [pc, #104]	; (8002314 <MX_ADC1_Init+0x1b4>)
 80022aa:	f44f 7105 	mov.w	r1, #532	; 0x214
 80022ae:	4815      	ldr	r0, [pc, #84]	; (8002304 <MX_ADC1_Init+0x1a4>)
 80022b0:	f7ff f8aa 	bl	8001408 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4,
 80022b4:	2207      	movs	r2, #7
 80022b6:	4917      	ldr	r1, [pc, #92]	; (8002314 <MX_ADC1_Init+0x1b4>)
 80022b8:	4812      	ldr	r0, [pc, #72]	; (8002304 <MX_ADC1_Init+0x1a4>)
 80022ba:	f7ff f8da 	bl	8001472 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SAMPLINGTIME_239CYCLES_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_6);
 80022be:	4a16      	ldr	r2, [pc, #88]	; (8002318 <MX_ADC1_Init+0x1b8>)
 80022c0:	f240 2119 	movw	r1, #537	; 0x219
 80022c4:	480f      	ldr	r0, [pc, #60]	; (8002304 <MX_ADC1_Init+0x1a4>)
 80022c6:	f7ff f89f 	bl	8001408 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6,
 80022ca:	2207      	movs	r2, #7
 80022cc:	4912      	ldr	r1, [pc, #72]	; (8002318 <MX_ADC1_Init+0x1b8>)
 80022ce:	480d      	ldr	r0, [pc, #52]	; (8002304 <MX_ADC1_Init+0x1a4>)
 80022d0:	f7ff f8cf 	bl	8001472 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SAMPLINGTIME_239CYCLES_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7,
 80022d4:	4a11      	ldr	r2, [pc, #68]	; (800231c <MX_ADC1_Init+0x1bc>)
 80022d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022da:	480a      	ldr	r0, [pc, #40]	; (8002304 <MX_ADC1_Init+0x1a4>)
 80022dc:	f7ff f894 	bl	8001408 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_CHANNEL_VREFINT);
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT,
 80022e0:	2207      	movs	r2, #7
 80022e2:	490e      	ldr	r1, [pc, #56]	; (800231c <MX_ADC1_Init+0x1bc>)
 80022e4:	4807      	ldr	r0, [pc, #28]	; (8002304 <MX_ADC1_Init+0x1a4>)
 80022e6:	f7ff f8c4 	bl	8001472 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SAMPLINGTIME_239CYCLES_5);
	LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1),
 80022ea:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80022ee:	4805      	ldr	r0, [pc, #20]	; (8002304 <MX_ADC1_Init+0x1a4>)
 80022f0:	f7ff f878 	bl	80013e4 <LL_ADC_SetCommonPathInternalCh>
	LL_ADC_PATH_INTERNAL_VREFINT);
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80022f4:	bf00      	nop
 80022f6:	3738      	adds	r7, #56	; 0x38
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40010800 	.word	0x40010800
 8002300:	40020000 	.word	0x40020000
 8002304:	40012400 	.word	0x40012400
 8002308:	02300001 	.word	0x02300001
 800230c:	02600002 	.word	0x02600002
 8002310:	02900003 	.word	0x02900003
 8002314:	02c00004 	.word	0x02c00004
 8002318:	03200006 	.word	0x03200006
 800231c:	81500011 	.word	0x81500011

08002320 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002324:	4b17      	ldr	r3, [pc, #92]	; (8002384 <MX_SPI1_Init+0x64>)
 8002326:	4a18      	ldr	r2, [pc, #96]	; (8002388 <MX_SPI1_Init+0x68>)
 8002328:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800232a:	4b16      	ldr	r3, [pc, #88]	; (8002384 <MX_SPI1_Init+0x64>)
 800232c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002330:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <MX_SPI1_Init+0x64>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <MX_SPI1_Init+0x64>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <MX_SPI1_Init+0x64>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <MX_SPI1_Init+0x64>)
 8002346:	2200      	movs	r2, #0
 8002348:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_SPI1_Init+0x64>)
 800234c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002350:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <MX_SPI1_Init+0x64>)
 8002354:	2210      	movs	r2, #16
 8002356:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <MX_SPI1_Init+0x64>)
 800235a:	2200      	movs	r2, #0
 800235c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_SPI1_Init+0x64>)
 8002360:	2200      	movs	r2, #0
 8002362:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002364:	4b07      	ldr	r3, [pc, #28]	; (8002384 <MX_SPI1_Init+0x64>)
 8002366:	2200      	movs	r2, #0
 8002368:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_SPI1_Init+0x64>)
 800236c:	220a      	movs	r2, #10
 800236e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002370:	4804      	ldr	r0, [pc, #16]	; (8002384 <MX_SPI1_Init+0x64>)
 8002372:	f001 fc2d 	bl	8003bd0 <HAL_SPI_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_SPI1_Init+0x60>
		Error_Handler();
 800237c:	f000 f9d2 	bl	8002724 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000c9c 	.word	0x20000c9c
 8002388:	40013000 	.word	0x40013000

0800238c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b092      	sub	sp, #72	; 0x48
 8002390:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002392:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800239c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
 80023ac:	615a      	str	r2, [r3, #20]
 80023ae:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	2220      	movs	r2, #32
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 fa20 	bl	80057fc <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80023bc:	4b32      	ldr	r3, [pc, #200]	; (8002488 <MX_TIM1_Init+0xfc>)
 80023be:	4a33      	ldr	r2, [pc, #204]	; (800248c <MX_TIM1_Init+0x100>)
 80023c0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 20;
 80023c2:	4b31      	ldr	r3, [pc, #196]	; (8002488 <MX_TIM1_Init+0xfc>)
 80023c4:	2214      	movs	r2, #20
 80023c6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c8:	4b2f      	ldr	r3, [pc, #188]	; (8002488 <MX_TIM1_Init+0xfc>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 99;
 80023ce:	4b2e      	ldr	r3, [pc, #184]	; (8002488 <MX_TIM1_Init+0xfc>)
 80023d0:	2263      	movs	r2, #99	; 0x63
 80023d2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d4:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <MX_TIM1_Init+0xfc>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80023da:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <MX_TIM1_Init+0xfc>)
 80023dc:	2200      	movs	r2, #0
 80023de:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e0:	4b29      	ldr	r3, [pc, #164]	; (8002488 <MX_TIM1_Init+0xfc>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80023e6:	4828      	ldr	r0, [pc, #160]	; (8002488 <MX_TIM1_Init+0xfc>)
 80023e8:	f001 fef4 	bl	80041d4 <HAL_TIM_PWM_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM1_Init+0x6a>
		Error_Handler();
 80023f2:	f000 f997 	bl	8002724 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80023fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002402:	4619      	mov	r1, r3
 8002404:	4820      	ldr	r0, [pc, #128]	; (8002488 <MX_TIM1_Init+0xfc>)
 8002406:	f002 fe49 	bl	800509c <HAL_TIMEx_MasterConfigSynchronization>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM1_Init+0x88>
		Error_Handler();
 8002410:	f000 f988 	bl	8002724 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002414:	2360      	movs	r3, #96	; 0x60
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800241c:	2300      	movs	r3, #0
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002420:	2300      	movs	r3, #0
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002428:	2300      	movs	r3, #0
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800242c:	2300      	movs	r3, #0
 800242e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8002430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002434:	2200      	movs	r2, #0
 8002436:	4619      	mov	r1, r3
 8002438:	4813      	ldr	r0, [pc, #76]	; (8002488 <MX_TIM1_Init+0xfc>)
 800243a:	f002 f9ef 	bl	800481c <HAL_TIM_PWM_ConfigChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM1_Init+0xbc>
		Error_Handler();
 8002444:	f000 f96e 	bl	8002724 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002448:	2300      	movs	r3, #0
 800244a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800244c:	2300      	movs	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800245c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002460:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002462:	2300      	movs	r3, #0
 8002464:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8002466:	1d3b      	adds	r3, r7, #4
 8002468:	4619      	mov	r1, r3
 800246a:	4807      	ldr	r0, [pc, #28]	; (8002488 <MX_TIM1_Init+0xfc>)
 800246c:	f002 fe6e 	bl	800514c <HAL_TIMEx_ConfigBreakDeadTime>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM1_Init+0xee>
		Error_Handler();
 8002476:	f000 f955 	bl	8002724 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800247a:	4803      	ldr	r0, [pc, #12]	; (8002488 <MX_TIM1_Init+0xfc>)
 800247c:	f000 fa78 	bl	8002970 <HAL_TIM_MspPostInit>

}
 8002480:	bf00      	nop
 8002482:	3748      	adds	r7, #72	; 0x48
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000a40 	.word	0x20000a40
 800248c:	40012c00 	.word	0x40012c00

08002490 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b08c      	sub	sp, #48	; 0x30
 8002494:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002496:	f107 030c 	add.w	r3, r7, #12
 800249a:	2224      	movs	r2, #36	; 0x24
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f003 f9ac 	bl	80057fc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80024ac:	4b21      	ldr	r3, [pc, #132]	; (8002534 <MX_TIM2_Init+0xa4>)
 80024ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024b2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <MX_TIM2_Init+0xa4>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <MX_TIM2_Init+0xa4>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80024c0:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <MX_TIM2_Init+0xa4>)
 80024c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024c6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c8:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <MX_TIM2_Init+0xa4>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ce:	4b19      	ldr	r3, [pc, #100]	; (8002534 <MX_TIM2_Init+0xa4>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80024d4:	2301      	movs	r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024dc:	2301      	movs	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 6;
 80024e4:	2306      	movs	r3, #6
 80024e6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024e8:	2300      	movs	r3, #0
 80024ea:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024ec:	2301      	movs	r3, #1
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 80024f0:	2304      	movs	r3, #4
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 6;
 80024f4:	2306      	movs	r3, #6
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	4619      	mov	r1, r3
 80024fe:	480d      	ldr	r0, [pc, #52]	; (8002534 <MX_TIM2_Init+0xa4>)
 8002500:	f001 ff54 	bl	80043ac <HAL_TIM_Encoder_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM2_Init+0x7e>
		Error_Handler();
 800250a:	f000 f90b 	bl	8002724 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	4619      	mov	r1, r3
 800251a:	4806      	ldr	r0, [pc, #24]	; (8002534 <MX_TIM2_Init+0xa4>)
 800251c:	f002 fdbe 	bl	800509c <HAL_TIMEx_MasterConfigSynchronization>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM2_Init+0x9a>
		Error_Handler();
 8002526:	f000 f8fd 	bl	8002724 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800252a:	bf00      	nop
 800252c:	3730      	adds	r7, #48	; 0x30
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000cf4 	.word	0x20000cf4

08002538 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800253e:	f107 0308 	add.w	r3, r7, #8
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800254c:	463b      	mov	r3, r7
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002554:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <MX_TIM3_Init+0x94>)
 8002556:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <MX_TIM3_Init+0x98>)
 8002558:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 720;
 800255a:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <MX_TIM3_Init+0x94>)
 800255c:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002560:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002562:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <MX_TIM3_Init+0x94>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 9;
 8002568:	4b18      	ldr	r3, [pc, #96]	; (80025cc <MX_TIM3_Init+0x94>)
 800256a:	2209      	movs	r2, #9
 800256c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <MX_TIM3_Init+0x94>)
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002574:	4b15      	ldr	r3, [pc, #84]	; (80025cc <MX_TIM3_Init+0x94>)
 8002576:	2200      	movs	r2, #0
 8002578:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800257a:	4814      	ldr	r0, [pc, #80]	; (80025cc <MX_TIM3_Init+0x94>)
 800257c:	f001 fd8e 	bl	800409c <HAL_TIM_Base_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM3_Init+0x52>
		Error_Handler();
 8002586:	f000 f8cd 	bl	8002724 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800258a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800258e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002590:	f107 0308 	add.w	r3, r7, #8
 8002594:	4619      	mov	r1, r3
 8002596:	480d      	ldr	r0, [pc, #52]	; (80025cc <MX_TIM3_Init+0x94>)
 8002598:	f002 f9fe 	bl	8004998 <HAL_TIM_ConfigClockSource>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM3_Init+0x6e>
		Error_Handler();
 80025a2:	f000 f8bf 	bl	8002724 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 80025ae:	463b      	mov	r3, r7
 80025b0:	4619      	mov	r1, r3
 80025b2:	4806      	ldr	r0, [pc, #24]	; (80025cc <MX_TIM3_Init+0x94>)
 80025b4:	f002 fd72 	bl	800509c <HAL_TIMEx_MasterConfigSynchronization>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM3_Init+0x8a>
		Error_Handler();
 80025be:	f000 f8b1 	bl	8002724 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80025c2:	bf00      	nop
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000940 	.word	0x20000940
 80025d0:	40000400 	.word	0x40000400

080025d4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <MX_USART1_UART_Init+0x4c>)
 80025da:	4a12      	ldr	r2, [pc, #72]	; (8002624 <MX_USART1_UART_Init+0x50>)
 80025dc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <MX_USART1_UART_Init+0x4c>)
 80025e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025e4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <MX_USART1_UART_Init+0x4c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <MX_USART1_UART_Init+0x4c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <MX_USART1_UART_Init+0x4c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <MX_USART1_UART_Init+0x4c>)
 80025fa:	220c      	movs	r2, #12
 80025fc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <MX_USART1_UART_Init+0x4c>)
 8002600:	2200      	movs	r2, #0
 8002602:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <MX_USART1_UART_Init+0x4c>)
 8002606:	2200      	movs	r2, #0
 8002608:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800260a:	4805      	ldr	r0, [pc, #20]	; (8002620 <MX_USART1_UART_Init+0x4c>)
 800260c:	f002 fe01 	bl	8005212 <HAL_UART_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002616:	f000 f885 	bl	8002724 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	200009c0 	.word	0x200009c0
 8002624:	40013800 	.word	0x40013800

08002628 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0

	/* Init with LL driver */
	/* DMA controller clock enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800262c:	2001      	movs	r0, #1
 800262e:	f7ff f963 	bl	80018f8 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 8002632:	f7fe fe39 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 8002636:	4603      	mov	r3, r0
 8002638:	2200      	movs	r2, #0
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fe87 	bl	8001350 <NVIC_EncodePriority>
 8002642:	4603      	mov	r3, r0
 8002644:	4619      	mov	r1, r3
 8002646:	200b      	movs	r0, #11
 8002648:	f7fe fe58 	bl	80012fc <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800264c:	200b      	movs	r0, #11
 800264e:	f7fe fe39 	bl	80012c4 <__NVIC_EnableIRQ>

}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800265e:	f107 0310 	add.w	r3, r7, #16
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800266c:	4b2b      	ldr	r3, [pc, #172]	; (800271c <MX_GPIO_Init+0xc4>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	4a2a      	ldr	r2, [pc, #168]	; (800271c <MX_GPIO_Init+0xc4>)
 8002672:	f043 0320 	orr.w	r3, r3, #32
 8002676:	6193      	str	r3, [r2, #24]
 8002678:	4b28      	ldr	r3, [pc, #160]	; (800271c <MX_GPIO_Init+0xc4>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002684:	4b25      	ldr	r3, [pc, #148]	; (800271c <MX_GPIO_Init+0xc4>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	4a24      	ldr	r2, [pc, #144]	; (800271c <MX_GPIO_Init+0xc4>)
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	6193      	str	r3, [r2, #24]
 8002690:	4b22      	ldr	r3, [pc, #136]	; (800271c <MX_GPIO_Init+0xc4>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800269c:	4b1f      	ldr	r3, [pc, #124]	; (800271c <MX_GPIO_Init+0xc4>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	4a1e      	ldr	r2, [pc, #120]	; (800271c <MX_GPIO_Init+0xc4>)
 80026a2:	f043 0308 	orr.w	r3, r3, #8
 80026a6:	6193      	str	r3, [r2, #24]
 80026a8:	4b1c      	ldr	r3, [pc, #112]	; (800271c <MX_GPIO_Init+0xc4>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin | LCD_CS_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 80026b4:	2200      	movs	r2, #0
 80026b6:	f640 4102 	movw	r1, #3074	; 0xc02
 80026ba:	4819      	ldr	r0, [pc, #100]	; (8002720 <MX_GPIO_Init+0xc8>)
 80026bc:	f000 fd9f 	bl	80031fe <HAL_GPIO_WritePin>

	/*Configure GPIO pins : HALL_Pin ENC_BUT_Pin */
	GPIO_InitStruct.Pin = HALL_Pin | ENC_BUT_Pin;
 80026c0:	2311      	movs	r3, #17
 80026c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026c8:	2301      	movs	r3, #1
 80026ca:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026cc:	f107 0310 	add.w	r3, r7, #16
 80026d0:	4619      	mov	r1, r3
 80026d2:	4813      	ldr	r0, [pc, #76]	; (8002720 <MX_GPIO_Init+0xc8>)
 80026d4:	f000 fc02 	bl	8002edc <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_RESET_Pin */
	GPIO_InitStruct.Pin = LCD_RESET_Pin;
 80026d8:	2302      	movs	r3, #2
 80026da:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026dc:	2301      	movs	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e4:	2302      	movs	r3, #2
 80026e6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80026e8:	f107 0310 	add.w	r3, r7, #16
 80026ec:	4619      	mov	r1, r3
 80026ee:	480c      	ldr	r0, [pc, #48]	; (8002720 <MX_GPIO_Init+0xc8>)
 80026f0:	f000 fbf4 	bl	8002edc <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
	GPIO_InitStruct.Pin = LCD_CS_Pin | LCD_DC_Pin;
 80026f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026f8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fa:	2301      	movs	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002702:	2303      	movs	r3, #3
 8002704:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002706:	f107 0310 	add.w	r3, r7, #16
 800270a:	4619      	mov	r1, r3
 800270c:	4804      	ldr	r0, [pc, #16]	; (8002720 <MX_GPIO_Init+0xc8>)
 800270e:	f000 fbe5 	bl	8002edc <HAL_GPIO_Init>

}
 8002712:	bf00      	nop
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000
 8002720:	40010c00 	.word	0x40010c00

08002724 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002728:	b672      	cpsid	i
}
 800272a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800272c:	e7fe      	b.n	800272c <Error_Handler+0x8>
	...

08002730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <HAL_MspInit+0x5c>)
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	4a14      	ldr	r2, [pc, #80]	; (800278c <HAL_MspInit+0x5c>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6193      	str	r3, [r2, #24]
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_MspInit+0x5c>)
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4b0f      	ldr	r3, [pc, #60]	; (800278c <HAL_MspInit+0x5c>)
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	4a0e      	ldr	r2, [pc, #56]	; (800278c <HAL_MspInit+0x5c>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	61d3      	str	r3, [r2, #28]
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <HAL_MspInit+0x5c>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <HAL_MspInit+0x60>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	4a04      	ldr	r2, [pc, #16]	; (8002790 <HAL_MspInit+0x60>)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	40021000 	.word	0x40021000
 8002790:	40010000 	.word	0x40010000

08002794 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 0310 	add.w	r3, r7, #16
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a15      	ldr	r2, [pc, #84]	; (8002804 <HAL_SPI_MspInit+0x70>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d123      	bne.n	80027fc <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027b4:	4b14      	ldr	r3, [pc, #80]	; (8002808 <HAL_SPI_MspInit+0x74>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	4a13      	ldr	r2, [pc, #76]	; (8002808 <HAL_SPI_MspInit+0x74>)
 80027ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027be:	6193      	str	r3, [r2, #24]
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <HAL_SPI_MspInit+0x74>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027cc:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <HAL_SPI_MspInit+0x74>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	4a0d      	ldr	r2, [pc, #52]	; (8002808 <HAL_SPI_MspInit+0x74>)
 80027d2:	f043 0304 	orr.w	r3, r3, #4
 80027d6:	6193      	str	r3, [r2, #24]
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_SPI_MspInit+0x74>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80027e4:	23a0      	movs	r3, #160	; 0xa0
 80027e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e8:	2302      	movs	r3, #2
 80027ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ec:	2303      	movs	r3, #3
 80027ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f0:	f107 0310 	add.w	r3, r7, #16
 80027f4:	4619      	mov	r1, r3
 80027f6:	4805      	ldr	r0, [pc, #20]	; (800280c <HAL_SPI_MspInit+0x78>)
 80027f8:	f000 fb70 	bl	8002edc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027fc:	bf00      	nop
 80027fe:	3720      	adds	r7, #32
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40013000 	.word	0x40013000
 8002808:	40021000 	.word	0x40021000
 800280c:	40010800 	.word	0x40010800

08002810 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a09      	ldr	r2, [pc, #36]	; (8002844 <HAL_TIM_PWM_MspInit+0x34>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10b      	bne.n	800283a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_TIM_PWM_MspInit+0x38>)
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	4a08      	ldr	r2, [pc, #32]	; (8002848 <HAL_TIM_PWM_MspInit+0x38>)
 8002828:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800282c:	6193      	str	r3, [r2, #24]
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_TIM_PWM_MspInit+0x38>)
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	40012c00 	.word	0x40012c00
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800286a:	d14e      	bne.n	800290a <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800286c:	4b29      	ldr	r3, [pc, #164]	; (8002914 <HAL_TIM_Encoder_MspInit+0xc8>)
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	4a28      	ldr	r2, [pc, #160]	; (8002914 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	61d3      	str	r3, [r2, #28]
 8002878:	4b26      	ldr	r3, [pc, #152]	; (8002914 <HAL_TIM_Encoder_MspInit+0xc8>)
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002884:	4b23      	ldr	r3, [pc, #140]	; (8002914 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	4a22      	ldr	r2, [pc, #136]	; (8002914 <HAL_TIM_Encoder_MspInit+0xc8>)
 800288a:	f043 0304 	orr.w	r3, r3, #4
 800288e:	6193      	str	r3, [r2, #24]
 8002890:	4b20      	ldr	r3, [pc, #128]	; (8002914 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800289c:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <HAL_TIM_Encoder_MspInit+0xc8>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	4a1c      	ldr	r2, [pc, #112]	; (8002914 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028a2:	f043 0308 	orr.w	r3, r3, #8
 80028a6:	6193      	str	r3, [r2, #24]
 80028a8:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028be:	2301      	movs	r3, #1
 80028c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c2:	f107 0314 	add.w	r3, r7, #20
 80028c6:	4619      	mov	r1, r3
 80028c8:	4813      	ldr	r0, [pc, #76]	; (8002918 <HAL_TIM_Encoder_MspInit+0xcc>)
 80028ca:	f000 fb07 	bl	8002edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028ce:	2308      	movs	r3, #8
 80028d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028d6:	2301      	movs	r3, #1
 80028d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028da:	f107 0314 	add.w	r3, r7, #20
 80028de:	4619      	mov	r1, r3
 80028e0:	480e      	ldr	r0, [pc, #56]	; (800291c <HAL_TIM_Encoder_MspInit+0xd0>)
 80028e2:	f000 fafb 	bl	8002edc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <HAL_TIM_Encoder_MspInit+0xd4>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
 8002904:	4a06      	ldr	r2, [pc, #24]	; (8002920 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800290a:	bf00      	nop
 800290c:	3728      	adds	r7, #40	; 0x28
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
 8002918:	40010800 	.word	0x40010800
 800291c:	40010c00 	.word	0x40010c00
 8002920:	40010000 	.word	0x40010000

08002924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <HAL_TIM_Base_MspInit+0x44>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d113      	bne.n	800295e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002936:	4b0d      	ldr	r3, [pc, #52]	; (800296c <HAL_TIM_Base_MspInit+0x48>)
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	4a0c      	ldr	r2, [pc, #48]	; (800296c <HAL_TIM_Base_MspInit+0x48>)
 800293c:	f043 0302 	orr.w	r3, r3, #2
 8002940:	61d3      	str	r3, [r2, #28]
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_TIM_Base_MspInit+0x48>)
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800294e:	2200      	movs	r2, #0
 8002950:	2100      	movs	r1, #0
 8002952:	201d      	movs	r0, #29
 8002954:	f000 fa8b 	bl	8002e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002958:	201d      	movs	r0, #29
 800295a:	f000 faa4 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800295e:	bf00      	nop
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40000400 	.word	0x40000400
 800296c:	40021000 	.word	0x40021000

08002970 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a10      	ldr	r2, [pc, #64]	; (80029cc <HAL_TIM_MspPostInit+0x5c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d118      	bne.n	80029c2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <HAL_TIM_MspPostInit+0x60>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4a0e      	ldr	r2, [pc, #56]	; (80029d0 <HAL_TIM_MspPostInit+0x60>)
 8002996:	f043 0304 	orr.w	r3, r3, #4
 800299a:	6193      	str	r3, [r2, #24]
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <HAL_TIM_MspPostInit+0x60>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b2:	2303      	movs	r3, #3
 80029b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b6:	f107 0310 	add.w	r3, r7, #16
 80029ba:	4619      	mov	r1, r3
 80029bc:	4805      	ldr	r0, [pc, #20]	; (80029d4 <HAL_TIM_MspPostInit+0x64>)
 80029be:	f000 fa8d 	bl	8002edc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80029c2:	bf00      	nop
 80029c4:	3720      	adds	r7, #32
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40012c00 	.word	0x40012c00
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40010800 	.word	0x40010800

080029d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e0:	f107 0310 	add.w	r3, r7, #16
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <HAL_UART_MspInit+0x8c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d131      	bne.n	8002a5c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_UART_MspInit+0x90>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	4a1a      	ldr	r2, [pc, #104]	; (8002a68 <HAL_UART_MspInit+0x90>)
 80029fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a02:	6193      	str	r3, [r2, #24]
 8002a04:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_UART_MspInit+0x90>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a10:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_UART_MspInit+0x90>)
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <HAL_UART_MspInit+0x90>)
 8002a16:	f043 0304 	orr.w	r3, r3, #4
 8002a1a:	6193      	str	r3, [r2, #24]
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_UART_MspInit+0x90>)
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a32:	2303      	movs	r3, #3
 8002a34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a36:	f107 0310 	add.w	r3, r7, #16
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	480b      	ldr	r0, [pc, #44]	; (8002a6c <HAL_UART_MspInit+0x94>)
 8002a3e:	f000 fa4d 	bl	8002edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a50:	f107 0310 	add.w	r3, r7, #16
 8002a54:	4619      	mov	r1, r3
 8002a56:	4805      	ldr	r0, [pc, #20]	; (8002a6c <HAL_UART_MspInit+0x94>)
 8002a58:	f000 fa40 	bl	8002edc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a5c:	bf00      	nop
 8002a5e:	3720      	adds	r7, #32
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40013800 	.word	0x40013800
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40010800 	.word	0x40010800

08002a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a74:	e7fe      	b.n	8002a74 <NMI_Handler+0x4>

08002a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a7a:	e7fe      	b.n	8002a7a <HardFault_Handler+0x4>

08002a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a80:	e7fe      	b.n	8002a80 <MemManage_Handler+0x4>

08002a82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a86:	e7fe      	b.n	8002a86 <BusFault_Handler+0x4>

08002a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a8c:	e7fe      	b.n	8002a8c <UsageFault_Handler+0x4>

08002a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ab6:	f000 f8c3 	bl	8002c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
DMA1->IFCR|=DMA_IFCR_CGIF1_Msk;
 8002ac4:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <DMA1_Channel1_IRQHandler+0x18>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4a03      	ldr	r2, [pc, #12]	; (8002ad8 <DMA1_Channel1_IRQHandler+0x18>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6053      	str	r3, [r2, #4]
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	40020000 	.word	0x40020000

08002adc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ae0:	4802      	ldr	r0, [pc, #8]	; (8002aec <TIM3_IRQHandler+0x10>)
 8002ae2:	f001 fd93 	bl	800460c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000940 	.word	0x20000940

08002af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af8:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <_sbrk+0x5c>)
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <_sbrk+0x60>)
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b04:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <_sbrk+0x64>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d102      	bne.n	8002b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <_sbrk+0x64>)
 8002b0e:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <_sbrk+0x68>)
 8002b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b12:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <_sbrk+0x64>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4413      	add	r3, r2
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d207      	bcs.n	8002b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b20:	f002 fe34 	bl	800578c <__errno>
 8002b24:	4603      	mov	r3, r0
 8002b26:	220c      	movs	r2, #12
 8002b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2e:	e009      	b.n	8002b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b30:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <_sbrk+0x64>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b36:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <_sbrk+0x64>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	4a05      	ldr	r2, [pc, #20]	; (8002b54 <_sbrk+0x64>)
 8002b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b42:	68fb      	ldr	r3, [r7, #12]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20002800 	.word	0x20002800
 8002b50:	00000400 	.word	0x00000400
 8002b54:	200000b8 	.word	0x200000b8
 8002b58:	20000d88 	.word	0x20000d88

08002b5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b68:	480c      	ldr	r0, [pc, #48]	; (8002b9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b6a:	490d      	ldr	r1, [pc, #52]	; (8002ba0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ba4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b70:	e002      	b.n	8002b78 <LoopCopyDataInit>

08002b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b76:	3304      	adds	r3, #4

08002b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b7c:	d3f9      	bcc.n	8002b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b80:	4c0a      	ldr	r4, [pc, #40]	; (8002bac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b84:	e001      	b.n	8002b8a <LoopFillZerobss>

08002b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b88:	3204      	adds	r2, #4

08002b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b8c:	d3fb      	bcc.n	8002b86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b8e:	f7ff ffe5 	bl	8002b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b92:	f002 fe01 	bl	8005798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b96:	f7fe fff3 	bl	8001b80 <main>
  bx lr
 8002b9a:	4770      	bx	lr
  ldr r0, =_sdata
 8002b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ba0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002ba4:	0800644c 	.word	0x0800644c
  ldr r2, =_sbss
 8002ba8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002bac:	20000d84 	.word	0x20000d84

08002bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bb0:	e7fe      	b.n	8002bb0 <ADC1_2_IRQHandler>
	...

08002bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bb8:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <HAL_Init+0x28>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a07      	ldr	r2, [pc, #28]	; (8002bdc <HAL_Init+0x28>)
 8002bbe:	f043 0310 	orr.w	r3, r3, #16
 8002bc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bc4:	2003      	movs	r0, #3
 8002bc6:	f000 f947 	bl	8002e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bca:	200f      	movs	r0, #15
 8002bcc:	f000 f808 	bl	8002be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bd0:	f7ff fdae 	bl	8002730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40022000 	.word	0x40022000

08002be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002be8:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <HAL_InitTick+0x54>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <HAL_InitTick+0x58>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f95f 	bl	8002ec2 <HAL_SYSTICK_Config>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e00e      	b.n	8002c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b0f      	cmp	r3, #15
 8002c12:	d80a      	bhi.n	8002c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c14:	2200      	movs	r2, #0
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1c:	f000 f927 	bl	8002e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c20:	4a06      	ldr	r2, [pc, #24]	; (8002c3c <HAL_InitTick+0x5c>)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e000      	b.n	8002c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000008 	.word	0x20000008
 8002c38:	20000010 	.word	0x20000010
 8002c3c:	2000000c 	.word	0x2000000c

08002c40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_IncTick+0x1c>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_IncTick+0x20>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4413      	add	r3, r2
 8002c50:	4a03      	ldr	r2, [pc, #12]	; (8002c60 <HAL_IncTick+0x20>)
 8002c52:	6013      	str	r3, [r2, #0]
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	20000010 	.word	0x20000010
 8002c60:	20000d70 	.word	0x20000d70

08002c64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return uwTick;
 8002c68:	4b02      	ldr	r3, [pc, #8]	; (8002c74 <HAL_GetTick+0x10>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	20000d70 	.word	0x20000d70

08002c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c80:	f7ff fff0 	bl	8002c64 <HAL_GetTick>
 8002c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c90:	d005      	beq.n	8002c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <HAL_Delay+0x44>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c9e:	bf00      	nop
 8002ca0:	f7ff ffe0 	bl	8002c64 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d8f7      	bhi.n	8002ca0 <HAL_Delay+0x28>
  {
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000010 	.word	0x20000010

08002cc0 <__NVIC_SetPriorityGrouping>:
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf2:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	60d3      	str	r3, [r2, #12]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <__NVIC_GetPriorityGrouping>:
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <__NVIC_GetPriorityGrouping+0x18>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	0a1b      	lsrs	r3, r3, #8
 8002d12:	f003 0307 	and.w	r3, r3, #7
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <__NVIC_EnableIRQ>:
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	db0b      	blt.n	8002d4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	f003 021f 	and.w	r2, r3, #31
 8002d3c:	4906      	ldr	r1, [pc, #24]	; (8002d58 <__NVIC_EnableIRQ+0x34>)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	2001      	movs	r0, #1
 8002d46:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	e000e100 	.word	0xe000e100

08002d5c <__NVIC_SetPriority>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db0a      	blt.n	8002d86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	490c      	ldr	r1, [pc, #48]	; (8002da8 <__NVIC_SetPriority+0x4c>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d84:	e00a      	b.n	8002d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4908      	ldr	r1, [pc, #32]	; (8002dac <__NVIC_SetPriority+0x50>)
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3b04      	subs	r3, #4
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	440b      	add	r3, r1
 8002d9a:	761a      	strb	r2, [r3, #24]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000e100 	.word	0xe000e100
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <NVIC_EncodePriority>:
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	; 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f1c3 0307 	rsb	r3, r3, #7
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	bf28      	it	cs
 8002dce:	2304      	movcs	r3, #4
 8002dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d902      	bls.n	8002de0 <NVIC_EncodePriority+0x30>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3b03      	subs	r3, #3
 8002dde:	e000      	b.n	8002de2 <NVIC_EncodePriority+0x32>
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	401a      	ands	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	43d9      	mvns	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	4313      	orrs	r3, r2
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3724      	adds	r7, #36	; 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e24:	d301      	bcc.n	8002e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e26:	2301      	movs	r3, #1
 8002e28:	e00f      	b.n	8002e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e2a:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <SysTick_Config+0x40>)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e32:	210f      	movs	r1, #15
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295
 8002e38:	f7ff ff90 	bl	8002d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <SysTick_Config+0x40>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e42:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <SysTick_Config+0x40>)
 8002e44:	2207      	movs	r2, #7
 8002e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	e000e010 	.word	0xe000e010

08002e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff ff2d 	bl	8002cc0 <__NVIC_SetPriorityGrouping>
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b086      	sub	sp, #24
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	4603      	mov	r3, r0
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e80:	f7ff ff42 	bl	8002d08 <__NVIC_GetPriorityGrouping>
 8002e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	6978      	ldr	r0, [r7, #20]
 8002e8c:	f7ff ff90 	bl	8002db0 <NVIC_EncodePriority>
 8002e90:	4602      	mov	r2, r0
 8002e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff5f 	bl	8002d5c <__NVIC_SetPriority>
}
 8002e9e:	bf00      	nop
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff35 	bl	8002d24 <__NVIC_EnableIRQ>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff ffa2 	bl	8002e14 <SysTick_Config>
 8002ed0:	4603      	mov	r3, r0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b08b      	sub	sp, #44	; 0x2c
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002eea:	2300      	movs	r3, #0
 8002eec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eee:	e148      	b.n	8003182 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	f040 8137 	bne.w	800317c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	4aa3      	ldr	r2, [pc, #652]	; (80031a0 <HAL_GPIO_Init+0x2c4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d05e      	beq.n	8002fd6 <HAL_GPIO_Init+0xfa>
 8002f18:	4aa1      	ldr	r2, [pc, #644]	; (80031a0 <HAL_GPIO_Init+0x2c4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d875      	bhi.n	800300a <HAL_GPIO_Init+0x12e>
 8002f1e:	4aa1      	ldr	r2, [pc, #644]	; (80031a4 <HAL_GPIO_Init+0x2c8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d058      	beq.n	8002fd6 <HAL_GPIO_Init+0xfa>
 8002f24:	4a9f      	ldr	r2, [pc, #636]	; (80031a4 <HAL_GPIO_Init+0x2c8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d86f      	bhi.n	800300a <HAL_GPIO_Init+0x12e>
 8002f2a:	4a9f      	ldr	r2, [pc, #636]	; (80031a8 <HAL_GPIO_Init+0x2cc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d052      	beq.n	8002fd6 <HAL_GPIO_Init+0xfa>
 8002f30:	4a9d      	ldr	r2, [pc, #628]	; (80031a8 <HAL_GPIO_Init+0x2cc>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d869      	bhi.n	800300a <HAL_GPIO_Init+0x12e>
 8002f36:	4a9d      	ldr	r2, [pc, #628]	; (80031ac <HAL_GPIO_Init+0x2d0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d04c      	beq.n	8002fd6 <HAL_GPIO_Init+0xfa>
 8002f3c:	4a9b      	ldr	r2, [pc, #620]	; (80031ac <HAL_GPIO_Init+0x2d0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d863      	bhi.n	800300a <HAL_GPIO_Init+0x12e>
 8002f42:	4a9b      	ldr	r2, [pc, #620]	; (80031b0 <HAL_GPIO_Init+0x2d4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d046      	beq.n	8002fd6 <HAL_GPIO_Init+0xfa>
 8002f48:	4a99      	ldr	r2, [pc, #612]	; (80031b0 <HAL_GPIO_Init+0x2d4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d85d      	bhi.n	800300a <HAL_GPIO_Init+0x12e>
 8002f4e:	2b12      	cmp	r3, #18
 8002f50:	d82a      	bhi.n	8002fa8 <HAL_GPIO_Init+0xcc>
 8002f52:	2b12      	cmp	r3, #18
 8002f54:	d859      	bhi.n	800300a <HAL_GPIO_Init+0x12e>
 8002f56:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <HAL_GPIO_Init+0x80>)
 8002f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5c:	08002fd7 	.word	0x08002fd7
 8002f60:	08002fb1 	.word	0x08002fb1
 8002f64:	08002fc3 	.word	0x08002fc3
 8002f68:	08003005 	.word	0x08003005
 8002f6c:	0800300b 	.word	0x0800300b
 8002f70:	0800300b 	.word	0x0800300b
 8002f74:	0800300b 	.word	0x0800300b
 8002f78:	0800300b 	.word	0x0800300b
 8002f7c:	0800300b 	.word	0x0800300b
 8002f80:	0800300b 	.word	0x0800300b
 8002f84:	0800300b 	.word	0x0800300b
 8002f88:	0800300b 	.word	0x0800300b
 8002f8c:	0800300b 	.word	0x0800300b
 8002f90:	0800300b 	.word	0x0800300b
 8002f94:	0800300b 	.word	0x0800300b
 8002f98:	0800300b 	.word	0x0800300b
 8002f9c:	0800300b 	.word	0x0800300b
 8002fa0:	08002fb9 	.word	0x08002fb9
 8002fa4:	08002fcd 	.word	0x08002fcd
 8002fa8:	4a82      	ldr	r2, [pc, #520]	; (80031b4 <HAL_GPIO_Init+0x2d8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fae:	e02c      	b.n	800300a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	623b      	str	r3, [r7, #32]
          break;
 8002fb6:	e029      	b.n	800300c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	623b      	str	r3, [r7, #32]
          break;
 8002fc0:	e024      	b.n	800300c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	3308      	adds	r3, #8
 8002fc8:	623b      	str	r3, [r7, #32]
          break;
 8002fca:	e01f      	b.n	800300c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	623b      	str	r3, [r7, #32]
          break;
 8002fd4:	e01a      	b.n	800300c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fde:	2304      	movs	r3, #4
 8002fe0:	623b      	str	r3, [r7, #32]
          break;
 8002fe2:	e013      	b.n	800300c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d105      	bne.n	8002ff8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fec:	2308      	movs	r3, #8
 8002fee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	611a      	str	r2, [r3, #16]
          break;
 8002ff6:	e009      	b.n	800300c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ff8:	2308      	movs	r3, #8
 8002ffa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	615a      	str	r2, [r3, #20]
          break;
 8003002:	e003      	b.n	800300c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003004:	2300      	movs	r3, #0
 8003006:	623b      	str	r3, [r7, #32]
          break;
 8003008:	e000      	b.n	800300c <HAL_GPIO_Init+0x130>
          break;
 800300a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	2bff      	cmp	r3, #255	; 0xff
 8003010:	d801      	bhi.n	8003016 <HAL_GPIO_Init+0x13a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	e001      	b.n	800301a <HAL_GPIO_Init+0x13e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3304      	adds	r3, #4
 800301a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2bff      	cmp	r3, #255	; 0xff
 8003020:	d802      	bhi.n	8003028 <HAL_GPIO_Init+0x14c>
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	e002      	b.n	800302e <HAL_GPIO_Init+0x152>
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	3b08      	subs	r3, #8
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	210f      	movs	r1, #15
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	fa01 f303 	lsl.w	r3, r1, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	401a      	ands	r2, r3
 8003040:	6a39      	ldr	r1, [r7, #32]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	fa01 f303 	lsl.w	r3, r1, r3
 8003048:	431a      	orrs	r2, r3
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 8090 	beq.w	800317c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800305c:	4b56      	ldr	r3, [pc, #344]	; (80031b8 <HAL_GPIO_Init+0x2dc>)
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	4a55      	ldr	r2, [pc, #340]	; (80031b8 <HAL_GPIO_Init+0x2dc>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6193      	str	r3, [r2, #24]
 8003068:	4b53      	ldr	r3, [pc, #332]	; (80031b8 <HAL_GPIO_Init+0x2dc>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003074:	4a51      	ldr	r2, [pc, #324]	; (80031bc <HAL_GPIO_Init+0x2e0>)
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	089b      	lsrs	r3, r3, #2
 800307a:	3302      	adds	r3, #2
 800307c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003080:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	220f      	movs	r2, #15
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4013      	ands	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a49      	ldr	r2, [pc, #292]	; (80031c0 <HAL_GPIO_Init+0x2e4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00d      	beq.n	80030bc <HAL_GPIO_Init+0x1e0>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a48      	ldr	r2, [pc, #288]	; (80031c4 <HAL_GPIO_Init+0x2e8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d007      	beq.n	80030b8 <HAL_GPIO_Init+0x1dc>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a47      	ldr	r2, [pc, #284]	; (80031c8 <HAL_GPIO_Init+0x2ec>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d101      	bne.n	80030b4 <HAL_GPIO_Init+0x1d8>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e004      	b.n	80030be <HAL_GPIO_Init+0x1e2>
 80030b4:	2303      	movs	r3, #3
 80030b6:	e002      	b.n	80030be <HAL_GPIO_Init+0x1e2>
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <HAL_GPIO_Init+0x1e2>
 80030bc:	2300      	movs	r3, #0
 80030be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c0:	f002 0203 	and.w	r2, r2, #3
 80030c4:	0092      	lsls	r2, r2, #2
 80030c6:	4093      	lsls	r3, r2
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030ce:	493b      	ldr	r1, [pc, #236]	; (80031bc <HAL_GPIO_Init+0x2e0>)
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	3302      	adds	r3, #2
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d006      	beq.n	80030f6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030e8:	4b38      	ldr	r3, [pc, #224]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4937      	ldr	r1, [pc, #220]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	600b      	str	r3, [r1, #0]
 80030f4:	e006      	b.n	8003104 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030f6:	4b35      	ldr	r3, [pc, #212]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	4933      	ldr	r1, [pc, #204]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 8003100:	4013      	ands	r3, r2
 8003102:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d006      	beq.n	800311e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003110:	4b2e      	ldr	r3, [pc, #184]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	492d      	ldr	r1, [pc, #180]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
 800311c:	e006      	b.n	800312c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800311e:	4b2b      	ldr	r3, [pc, #172]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	43db      	mvns	r3, r3
 8003126:	4929      	ldr	r1, [pc, #164]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 8003128:	4013      	ands	r3, r2
 800312a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d006      	beq.n	8003146 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003138:	4b24      	ldr	r3, [pc, #144]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	4923      	ldr	r1, [pc, #140]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]
 8003144:	e006      	b.n	8003154 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003146:	4b21      	ldr	r3, [pc, #132]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	43db      	mvns	r3, r3
 800314e:	491f      	ldr	r1, [pc, #124]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 8003150:	4013      	ands	r3, r2
 8003152:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d006      	beq.n	800316e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003160:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	4919      	ldr	r1, [pc, #100]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	60cb      	str	r3, [r1, #12]
 800316c:	e006      	b.n	800317c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800316e:	4b17      	ldr	r3, [pc, #92]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	43db      	mvns	r3, r3
 8003176:	4915      	ldr	r1, [pc, #84]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 8003178:	4013      	ands	r3, r2
 800317a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	3301      	adds	r3, #1
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	f47f aeaf 	bne.w	8002ef0 <HAL_GPIO_Init+0x14>
  }
}
 8003192:	bf00      	nop
 8003194:	bf00      	nop
 8003196:	372c      	adds	r7, #44	; 0x2c
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	10320000 	.word	0x10320000
 80031a4:	10310000 	.word	0x10310000
 80031a8:	10220000 	.word	0x10220000
 80031ac:	10210000 	.word	0x10210000
 80031b0:	10120000 	.word	0x10120000
 80031b4:	10110000 	.word	0x10110000
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40010000 	.word	0x40010000
 80031c0:	40010800 	.word	0x40010800
 80031c4:	40010c00 	.word	0x40010c00
 80031c8:	40011000 	.word	0x40011000
 80031cc:	40010400 	.word	0x40010400

080031d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	887b      	ldrh	r3, [r7, #2]
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
 80031ec:	e001      	b.n	80031f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031ee:	2300      	movs	r3, #0
 80031f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	460b      	mov	r3, r1
 8003208:	807b      	strh	r3, [r7, #2]
 800320a:	4613      	mov	r3, r2
 800320c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800320e:	787b      	ldrb	r3, [r7, #1]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003214:	887a      	ldrh	r2, [r7, #2]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800321a:	e003      	b.n	8003224 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800321c:	887b      	ldrh	r3, [r7, #2]
 800321e:	041a      	lsls	r2, r3, #16
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	611a      	str	r2, [r3, #16]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
	...

08003230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e26c      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 8087 	beq.w	800335e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003250:	4b92      	ldr	r3, [pc, #584]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 030c 	and.w	r3, r3, #12
 8003258:	2b04      	cmp	r3, #4
 800325a:	d00c      	beq.n	8003276 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800325c:	4b8f      	ldr	r3, [pc, #572]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 030c 	and.w	r3, r3, #12
 8003264:	2b08      	cmp	r3, #8
 8003266:	d112      	bne.n	800328e <HAL_RCC_OscConfig+0x5e>
 8003268:	4b8c      	ldr	r3, [pc, #560]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003274:	d10b      	bne.n	800328e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003276:	4b89      	ldr	r3, [pc, #548]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d06c      	beq.n	800335c <HAL_RCC_OscConfig+0x12c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d168      	bne.n	800335c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e246      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003296:	d106      	bne.n	80032a6 <HAL_RCC_OscConfig+0x76>
 8003298:	4b80      	ldr	r3, [pc, #512]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a7f      	ldr	r2, [pc, #508]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 800329e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	e02e      	b.n	8003304 <HAL_RCC_OscConfig+0xd4>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x98>
 80032ae:	4b7b      	ldr	r3, [pc, #492]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a7a      	ldr	r2, [pc, #488]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	4b78      	ldr	r3, [pc, #480]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a77      	ldr	r2, [pc, #476]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	e01d      	b.n	8003304 <HAL_RCC_OscConfig+0xd4>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d0:	d10c      	bne.n	80032ec <HAL_RCC_OscConfig+0xbc>
 80032d2:	4b72      	ldr	r3, [pc, #456]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a71      	ldr	r2, [pc, #452]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	4b6f      	ldr	r3, [pc, #444]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a6e      	ldr	r2, [pc, #440]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	e00b      	b.n	8003304 <HAL_RCC_OscConfig+0xd4>
 80032ec:	4b6b      	ldr	r3, [pc, #428]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a6a      	ldr	r2, [pc, #424]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	4b68      	ldr	r3, [pc, #416]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a67      	ldr	r2, [pc, #412]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003302:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d013      	beq.n	8003334 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7ff fcaa 	bl	8002c64 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003314:	f7ff fca6 	bl	8002c64 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	; 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e1fa      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	4b5d      	ldr	r3, [pc, #372]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0xe4>
 8003332:	e014      	b.n	800335e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003334:	f7ff fc96 	bl	8002c64 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800333c:	f7ff fc92 	bl	8002c64 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b64      	cmp	r3, #100	; 0x64
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e1e6      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334e:	4b53      	ldr	r3, [pc, #332]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x10c>
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d063      	beq.n	8003432 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800336a:	4b4c      	ldr	r3, [pc, #304]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00b      	beq.n	800338e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003376:	4b49      	ldr	r3, [pc, #292]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	2b08      	cmp	r3, #8
 8003380:	d11c      	bne.n	80033bc <HAL_RCC_OscConfig+0x18c>
 8003382:	4b46      	ldr	r3, [pc, #280]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d116      	bne.n	80033bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338e:	4b43      	ldr	r3, [pc, #268]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d005      	beq.n	80033a6 <HAL_RCC_OscConfig+0x176>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d001      	beq.n	80033a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e1ba      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a6:	4b3d      	ldr	r3, [pc, #244]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4939      	ldr	r1, [pc, #228]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ba:	e03a      	b.n	8003432 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d020      	beq.n	8003406 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c4:	4b36      	ldr	r3, [pc, #216]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ca:	f7ff fc4b 	bl	8002c64 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d2:	f7ff fc47 	bl	8002c64 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e19b      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e4:	4b2d      	ldr	r3, [pc, #180]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f0:	4b2a      	ldr	r3, [pc, #168]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4927      	ldr	r1, [pc, #156]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003400:	4313      	orrs	r3, r2
 8003402:	600b      	str	r3, [r1, #0]
 8003404:	e015      	b.n	8003432 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003406:	4b26      	ldr	r3, [pc, #152]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7ff fc2a 	bl	8002c64 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003414:	f7ff fc26 	bl	8002c64 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e17a      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003426:	4b1d      	ldr	r3, [pc, #116]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d03a      	beq.n	80034b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d019      	beq.n	800347a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003446:	4b17      	ldr	r3, [pc, #92]	; (80034a4 <HAL_RCC_OscConfig+0x274>)
 8003448:	2201      	movs	r2, #1
 800344a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344c:	f7ff fc0a 	bl	8002c64 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003454:	f7ff fc06 	bl	8002c64 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e15a      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003466:	4b0d      	ldr	r3, [pc, #52]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003472:	2001      	movs	r0, #1
 8003474:	f000 fad8 	bl	8003a28 <RCC_Delay>
 8003478:	e01c      	b.n	80034b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800347a:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <HAL_RCC_OscConfig+0x274>)
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003480:	f7ff fbf0 	bl	8002c64 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003486:	e00f      	b.n	80034a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003488:	f7ff fbec 	bl	8002c64 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d908      	bls.n	80034a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e140      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
 800349a:	bf00      	nop
 800349c:	40021000 	.word	0x40021000
 80034a0:	42420000 	.word	0x42420000
 80034a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a8:	4b9e      	ldr	r3, [pc, #632]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1e9      	bne.n	8003488 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80a6 	beq.w	800360e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c2:	2300      	movs	r3, #0
 80034c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c6:	4b97      	ldr	r3, [pc, #604]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10d      	bne.n	80034ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d2:	4b94      	ldr	r3, [pc, #592]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	4a93      	ldr	r2, [pc, #588]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034dc:	61d3      	str	r3, [r2, #28]
 80034de:	4b91      	ldr	r3, [pc, #580]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ee:	4b8e      	ldr	r3, [pc, #568]	; (8003728 <HAL_RCC_OscConfig+0x4f8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d118      	bne.n	800352c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fa:	4b8b      	ldr	r3, [pc, #556]	; (8003728 <HAL_RCC_OscConfig+0x4f8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a8a      	ldr	r2, [pc, #552]	; (8003728 <HAL_RCC_OscConfig+0x4f8>)
 8003500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003506:	f7ff fbad 	bl	8002c64 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350e:	f7ff fba9 	bl	8002c64 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b64      	cmp	r3, #100	; 0x64
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e0fd      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	4b81      	ldr	r3, [pc, #516]	; (8003728 <HAL_RCC_OscConfig+0x4f8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d106      	bne.n	8003542 <HAL_RCC_OscConfig+0x312>
 8003534:	4b7b      	ldr	r3, [pc, #492]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	4a7a      	ldr	r2, [pc, #488]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6213      	str	r3, [r2, #32]
 8003540:	e02d      	b.n	800359e <HAL_RCC_OscConfig+0x36e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0x334>
 800354a:	4b76      	ldr	r3, [pc, #472]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4a75      	ldr	r2, [pc, #468]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003550:	f023 0301 	bic.w	r3, r3, #1
 8003554:	6213      	str	r3, [r2, #32]
 8003556:	4b73      	ldr	r3, [pc, #460]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	4a72      	ldr	r2, [pc, #456]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 800355c:	f023 0304 	bic.w	r3, r3, #4
 8003560:	6213      	str	r3, [r2, #32]
 8003562:	e01c      	b.n	800359e <HAL_RCC_OscConfig+0x36e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	2b05      	cmp	r3, #5
 800356a:	d10c      	bne.n	8003586 <HAL_RCC_OscConfig+0x356>
 800356c:	4b6d      	ldr	r3, [pc, #436]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	4a6c      	ldr	r2, [pc, #432]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003572:	f043 0304 	orr.w	r3, r3, #4
 8003576:	6213      	str	r3, [r2, #32]
 8003578:	4b6a      	ldr	r3, [pc, #424]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	4a69      	ldr	r2, [pc, #420]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6213      	str	r3, [r2, #32]
 8003584:	e00b      	b.n	800359e <HAL_RCC_OscConfig+0x36e>
 8003586:	4b67      	ldr	r3, [pc, #412]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4a66      	ldr	r2, [pc, #408]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	6213      	str	r3, [r2, #32]
 8003592:	4b64      	ldr	r3, [pc, #400]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	4a63      	ldr	r2, [pc, #396]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003598:	f023 0304 	bic.w	r3, r3, #4
 800359c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d015      	beq.n	80035d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a6:	f7ff fb5d 	bl	8002c64 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ac:	e00a      	b.n	80035c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ae:	f7ff fb59 	bl	8002c64 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035bc:	4293      	cmp	r3, r2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e0ab      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c4:	4b57      	ldr	r3, [pc, #348]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0ee      	beq.n	80035ae <HAL_RCC_OscConfig+0x37e>
 80035d0:	e014      	b.n	80035fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d2:	f7ff fb47 	bl	8002c64 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d8:	e00a      	b.n	80035f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035da:	f7ff fb43 	bl	8002c64 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e095      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f0:	4b4c      	ldr	r3, [pc, #304]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1ee      	bne.n	80035da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d105      	bne.n	800360e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003602:	4b48      	ldr	r3, [pc, #288]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	4a47      	ldr	r2, [pc, #284]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800360c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 8081 	beq.w	800371a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003618:	4b42      	ldr	r3, [pc, #264]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 030c 	and.w	r3, r3, #12
 8003620:	2b08      	cmp	r3, #8
 8003622:	d061      	beq.n	80036e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d146      	bne.n	80036ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362c:	4b3f      	ldr	r3, [pc, #252]	; (800372c <HAL_RCC_OscConfig+0x4fc>)
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003632:	f7ff fb17 	bl	8002c64 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363a:	f7ff fb13 	bl	8002c64 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e067      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364c:	4b35      	ldr	r3, [pc, #212]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f0      	bne.n	800363a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003660:	d108      	bne.n	8003674 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003662:	4b30      	ldr	r3, [pc, #192]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	492d      	ldr	r1, [pc, #180]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003670:	4313      	orrs	r3, r2
 8003672:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003674:	4b2b      	ldr	r3, [pc, #172]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a19      	ldr	r1, [r3, #32]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	430b      	orrs	r3, r1
 8003686:	4927      	ldr	r1, [pc, #156]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003688:	4313      	orrs	r3, r2
 800368a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800368c:	4b27      	ldr	r3, [pc, #156]	; (800372c <HAL_RCC_OscConfig+0x4fc>)
 800368e:	2201      	movs	r2, #1
 8003690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003692:	f7ff fae7 	bl	8002c64 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369a:	f7ff fae3 	bl	8002c64 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e037      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ac:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x46a>
 80036b8:	e02f      	b.n	800371a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ba:	4b1c      	ldr	r3, [pc, #112]	; (800372c <HAL_RCC_OscConfig+0x4fc>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7ff fad0 	bl	8002c64 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c8:	f7ff facc 	bl	8002c64 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e020      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x498>
 80036e6:	e018      	b.n	800371a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e013      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036f4:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	429a      	cmp	r2, r3
 8003706:	d106      	bne.n	8003716 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d001      	beq.n	800371a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021000 	.word	0x40021000
 8003728:	40007000 	.word	0x40007000
 800372c:	42420060 	.word	0x42420060

08003730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0d0      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003744:	4b6a      	ldr	r3, [pc, #424]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d910      	bls.n	8003774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b67      	ldr	r3, [pc, #412]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 0207 	bic.w	r2, r3, #7
 800375a:	4965      	ldr	r1, [pc, #404]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4313      	orrs	r3, r2
 8003760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b63      	ldr	r3, [pc, #396]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0b8      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d020      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800378c:	4b59      	ldr	r3, [pc, #356]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	4a58      	ldr	r2, [pc, #352]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003796:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037a4:	4b53      	ldr	r3, [pc, #332]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4a52      	ldr	r2, [pc, #328]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b0:	4b50      	ldr	r3, [pc, #320]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	494d      	ldr	r1, [pc, #308]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d040      	beq.n	8003850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d107      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	4b47      	ldr	r3, [pc, #284]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d115      	bne.n	800380e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e07f      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d107      	bne.n	80037fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ee:	4b41      	ldr	r3, [pc, #260]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e073      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fe:	4b3d      	ldr	r3, [pc, #244]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e06b      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800380e:	4b39      	ldr	r3, [pc, #228]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f023 0203 	bic.w	r2, r3, #3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	4936      	ldr	r1, [pc, #216]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003820:	f7ff fa20 	bl	8002c64 <HAL_GetTick>
 8003824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003826:	e00a      	b.n	800383e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003828:	f7ff fa1c 	bl	8002c64 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	; 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e053      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383e:	4b2d      	ldr	r3, [pc, #180]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 020c 	and.w	r2, r3, #12
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	429a      	cmp	r2, r3
 800384e:	d1eb      	bne.n	8003828 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003850:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d210      	bcs.n	8003880 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385e:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 0207 	bic.w	r2, r3, #7
 8003866:	4922      	ldr	r1, [pc, #136]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	4313      	orrs	r3, r2
 800386c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e032      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800388c:	4b19      	ldr	r3, [pc, #100]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4916      	ldr	r1, [pc, #88]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 800389a:	4313      	orrs	r3, r2
 800389c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038aa:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	490e      	ldr	r1, [pc, #56]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038be:	f000 f821 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 80038c2:	4602      	mov	r2, r0
 80038c4:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	490a      	ldr	r1, [pc, #40]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038d0:	5ccb      	ldrb	r3, [r1, r3]
 80038d2:	fa22 f303 	lsr.w	r3, r2, r3
 80038d6:	4a09      	ldr	r2, [pc, #36]	; (80038fc <HAL_RCC_ClockConfig+0x1cc>)
 80038d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_RCC_ClockConfig+0x1d0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff f97e 	bl	8002be0 <HAL_InitTick>

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40022000 	.word	0x40022000
 80038f4:	40021000 	.word	0x40021000
 80038f8:	080063f8 	.word	0x080063f8
 80038fc:	20000008 	.word	0x20000008
 8003900:	2000000c 	.word	0x2000000c

08003904 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003904:	b490      	push	{r4, r7}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800390a:	4b2a      	ldr	r3, [pc, #168]	; (80039b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800390c:	1d3c      	adds	r4, r7, #4
 800390e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003910:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003914:	f240 2301 	movw	r3, #513	; 0x201
 8003918:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	2300      	movs	r3, #0
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800392e:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f003 030c 	and.w	r3, r3, #12
 800393a:	2b04      	cmp	r3, #4
 800393c:	d002      	beq.n	8003944 <HAL_RCC_GetSysClockFreq+0x40>
 800393e:	2b08      	cmp	r3, #8
 8003940:	d003      	beq.n	800394a <HAL_RCC_GetSysClockFreq+0x46>
 8003942:	e02d      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003944:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003946:	623b      	str	r3, [r7, #32]
      break;
 8003948:	e02d      	b.n	80039a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	0c9b      	lsrs	r3, r3, #18
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003956:	4413      	add	r3, r2
 8003958:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800395c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d013      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003968:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	0c5b      	lsrs	r3, r3, #17
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003976:	4413      	add	r3, r2
 8003978:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800397c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	4a0e      	ldr	r2, [pc, #56]	; (80039bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003982:	fb02 f203 	mul.w	r2, r2, r3
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	fbb2 f3f3 	udiv	r3, r2, r3
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
 800398e:	e004      	b.n	800399a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	4a0b      	ldr	r2, [pc, #44]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003994:	fb02 f303 	mul.w	r3, r2, r3
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	623b      	str	r3, [r7, #32]
      break;
 800399e:	e002      	b.n	80039a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039a0:	4b06      	ldr	r3, [pc, #24]	; (80039bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80039a2:	623b      	str	r3, [r7, #32]
      break;
 80039a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039a6:	6a3b      	ldr	r3, [r7, #32]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3728      	adds	r7, #40	; 0x28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc90      	pop	{r4, r7}
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	080060a4 	.word	0x080060a4
 80039b8:	40021000 	.word	0x40021000
 80039bc:	007a1200 	.word	0x007a1200
 80039c0:	003d0900 	.word	0x003d0900

080039c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c8:	4b02      	ldr	r3, [pc, #8]	; (80039d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80039ca:	681b      	ldr	r3, [r3, #0]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr
 80039d4:	20000008 	.word	0x20000008

080039d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039dc:	f7ff fff2 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 80039e0:	4602      	mov	r2, r0
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	0a1b      	lsrs	r3, r3, #8
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	4903      	ldr	r1, [pc, #12]	; (80039fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ee:	5ccb      	ldrb	r3, [r1, r3]
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40021000 	.word	0x40021000
 80039fc:	08006408 	.word	0x08006408

08003a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a04:	f7ff ffde 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	0adb      	lsrs	r3, r3, #11
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	4903      	ldr	r1, [pc, #12]	; (8003a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a16:	5ccb      	ldrb	r3, [r1, r3]
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40021000 	.word	0x40021000
 8003a24:	08006408 	.word	0x08006408

08003a28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <RCC_Delay+0x34>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a0a      	ldr	r2, [pc, #40]	; (8003a60 <RCC_Delay+0x38>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	0a5b      	lsrs	r3, r3, #9
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	fb02 f303 	mul.w	r3, r2, r3
 8003a42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a44:	bf00      	nop
  }
  while (Delay --);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1e5a      	subs	r2, r3, #1
 8003a4a:	60fa      	str	r2, [r7, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f9      	bne.n	8003a44 <RCC_Delay+0x1c>
}
 8003a50:	bf00      	nop
 8003a52:	bf00      	nop
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr
 8003a5c:	20000008 	.word	0x20000008
 8003a60:	10624dd3 	.word	0x10624dd3

08003a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d07d      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a80:	2300      	movs	r3, #0
 8003a82:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a84:	4b4f      	ldr	r3, [pc, #316]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10d      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a90:	4b4c      	ldr	r3, [pc, #304]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	4a4b      	ldr	r2, [pc, #300]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	61d3      	str	r3, [r2, #28]
 8003a9c:	4b49      	ldr	r3, [pc, #292]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aac:	4b46      	ldr	r3, [pc, #280]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d118      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ab8:	4b43      	ldr	r3, [pc, #268]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a42      	ldr	r2, [pc, #264]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac4:	f7ff f8ce 	bl	8002c64 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aca:	e008      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003acc:	f7ff f8ca 	bl	8002c64 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	; 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e06d      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ade:	4b3a      	ldr	r3, [pc, #232]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003aea:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d02e      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d027      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b08:	4b2e      	ldr	r3, [pc, #184]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b12:	4b2e      	ldr	r3, [pc, #184]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b18:	4b2c      	ldr	r3, [pc, #176]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b1e:	4a29      	ldr	r2, [pc, #164]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d014      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2e:	f7ff f899 	bl	8002c64 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b34:	e00a      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b36:	f7ff f895 	bl	8002c64 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e036      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4c:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ee      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b58:	4b1a      	ldr	r3, [pc, #104]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4917      	ldr	r1, [pc, #92]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d105      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b70:	4b14      	ldr	r3, [pc, #80]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	4a13      	ldr	r2, [pc, #76]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b88:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	490b      	ldr	r1, [pc, #44]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ba6:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	4904      	ldr	r1, [pc, #16]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40007000 	.word	0x40007000
 8003bcc:	42420440 	.word	0x42420440

08003bd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e076      	b.n	8003cd0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d108      	bne.n	8003bfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bf2:	d009      	beq.n	8003c08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	61da      	str	r2, [r3, #28]
 8003bfa:	e005      	b.n	8003c08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fe fdb6 	bl	8002794 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8c:	ea42 0103 	orr.w	r1, r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	0c1a      	lsrs	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f002 0204 	and.w	r2, r2, #4
 8003cae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69da      	ldr	r2, [r3, #28]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cbe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_SPI_Transmit+0x22>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e126      	b.n	8003f48 <HAL_SPI_Transmit+0x270>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d02:	f7fe ffaf 	bl	8002c64 <HAL_GetTick>
 8003d06:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d08:	88fb      	ldrh	r3, [r7, #6]
 8003d0a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d002      	beq.n	8003d1e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d1c:	e10b      	b.n	8003f36 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <HAL_SPI_Transmit+0x52>
 8003d24:	88fb      	ldrh	r3, [r7, #6]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d102      	bne.n	8003d30 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d2e:	e102      	b.n	8003f36 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2203      	movs	r2, #3
 8003d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	88fa      	ldrh	r2, [r7, #6]
 8003d48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	88fa      	ldrh	r2, [r7, #6]
 8003d4e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d76:	d10f      	bne.n	8003d98 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	2b40      	cmp	r3, #64	; 0x40
 8003da4:	d007      	beq.n	8003db6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003db4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dbe:	d14b      	bne.n	8003e58 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_SPI_Transmit+0xf6>
 8003dc8:	8afb      	ldrh	r3, [r7, #22]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d13e      	bne.n	8003e4c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	881a      	ldrh	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	1c9a      	adds	r2, r3, #2
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003df2:	e02b      	b.n	8003e4c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d112      	bne.n	8003e28 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	881a      	ldrh	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	1c9a      	adds	r2, r3, #2
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e26:	e011      	b.n	8003e4c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e28:	f7fe ff1c 	bl	8002c64 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d803      	bhi.n	8003e40 <HAL_SPI_Transmit+0x168>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3e:	d102      	bne.n	8003e46 <HAL_SPI_Transmit+0x16e>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d102      	bne.n	8003e4c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e4a:	e074      	b.n	8003f36 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1ce      	bne.n	8003df4 <HAL_SPI_Transmit+0x11c>
 8003e56:	e04c      	b.n	8003ef2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <HAL_SPI_Transmit+0x18e>
 8003e60:	8afb      	ldrh	r3, [r7, #22]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d140      	bne.n	8003ee8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	7812      	ldrb	r2, [r2, #0]
 8003e72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e8c:	e02c      	b.n	8003ee8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d113      	bne.n	8003ec4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	7812      	ldrb	r2, [r2, #0]
 8003ea8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ec2:	e011      	b.n	8003ee8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ec4:	f7fe fece 	bl	8002c64 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d803      	bhi.n	8003edc <HAL_SPI_Transmit+0x204>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d102      	bne.n	8003ee2 <HAL_SPI_Transmit+0x20a>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ee6:	e026      	b.n	8003f36 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1cd      	bne.n	8003e8e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	6839      	ldr	r1, [r7, #0]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f8b2 	bl	8004060 <SPI_EndRxTxTransaction>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10a      	bne.n	8003f26 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f10:	2300      	movs	r3, #0
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	77fb      	strb	r3, [r7, #31]
 8003f32:	e000      	b.n	8003f36 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f46:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3720      	adds	r7, #32
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f60:	f7fe fe80 	bl	8002c64 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f70:	f7fe fe78 	bl	8002c64 <HAL_GetTick>
 8003f74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f76:	4b39      	ldr	r3, [pc, #228]	; (800405c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	015b      	lsls	r3, r3, #5
 8003f7c:	0d1b      	lsrs	r3, r3, #20
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	fb02 f303 	mul.w	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f86:	e054      	b.n	8004032 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8e:	d050      	beq.n	8004032 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f90:	f7fe fe68 	bl	8002c64 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d902      	bls.n	8003fa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d13d      	bne.n	8004022 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fbe:	d111      	bne.n	8003fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc8:	d004      	beq.n	8003fd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd2:	d107      	bne.n	8003fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fec:	d10f      	bne.n	800400e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800400c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e017      	b.n	8004052 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	3b01      	subs	r3, #1
 8004030:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4013      	ands	r3, r2
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	429a      	cmp	r2, r3
 8004040:	bf0c      	ite	eq
 8004042:	2301      	moveq	r3, #1
 8004044:	2300      	movne	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	429a      	cmp	r2, r3
 800404e:	d19b      	bne.n	8003f88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000008 	.word	0x20000008

08004060 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2200      	movs	r2, #0
 8004074:	2180      	movs	r1, #128	; 0x80
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f7ff ff6a 	bl	8003f50 <SPI_WaitFlagStateUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d007      	beq.n	8004092 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	f043 0220 	orr.w	r2, r3, #32
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e000      	b.n	8004094 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e041      	b.n	8004132 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fe fc2e 	bl	8002924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3304      	adds	r3, #4
 80040d8:	4619      	mov	r1, r3
 80040da:	4610      	mov	r0, r2
 80040dc:	f000 fd44 	bl	8004b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b01      	cmp	r3, #1
 800414e:	d001      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e035      	b.n	80041c0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a16      	ldr	r2, [pc, #88]	; (80041cc <HAL_TIM_Base_Start_IT+0x90>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d009      	beq.n	800418a <HAL_TIM_Base_Start_IT+0x4e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417e:	d004      	beq.n	800418a <HAL_TIM_Base_Start_IT+0x4e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a12      	ldr	r2, [pc, #72]	; (80041d0 <HAL_TIM_Base_Start_IT+0x94>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d111      	bne.n	80041ae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b06      	cmp	r3, #6
 800419a:	d010      	beq.n	80041be <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ac:	e007      	b.n	80041be <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0201 	orr.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	40000400 	.word	0x40000400

080041d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e041      	b.n	800426a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fe fb08 	bl	8002810 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f000 fca8 	bl	8004b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d109      	bne.n	8004298 <HAL_TIM_PWM_Start+0x24>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	bf14      	ite	ne
 8004290:	2301      	movne	r3, #1
 8004292:	2300      	moveq	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	e022      	b.n	80042de <HAL_TIM_PWM_Start+0x6a>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b04      	cmp	r3, #4
 800429c:	d109      	bne.n	80042b2 <HAL_TIM_PWM_Start+0x3e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	bf14      	ite	ne
 80042aa:	2301      	movne	r3, #1
 80042ac:	2300      	moveq	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	e015      	b.n	80042de <HAL_TIM_PWM_Start+0x6a>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d109      	bne.n	80042cc <HAL_TIM_PWM_Start+0x58>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	bf14      	ite	ne
 80042c4:	2301      	movne	r3, #1
 80042c6:	2300      	moveq	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	e008      	b.n	80042de <HAL_TIM_PWM_Start+0x6a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	bf14      	ite	ne
 80042d8:	2301      	movne	r3, #1
 80042da:	2300      	moveq	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e059      	b.n	800439a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d104      	bne.n	80042f6 <HAL_TIM_PWM_Start+0x82>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042f4:	e013      	b.n	800431e <HAL_TIM_PWM_Start+0xaa>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d104      	bne.n	8004306 <HAL_TIM_PWM_Start+0x92>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004304:	e00b      	b.n	800431e <HAL_TIM_PWM_Start+0xaa>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b08      	cmp	r3, #8
 800430a:	d104      	bne.n	8004316 <HAL_TIM_PWM_Start+0xa2>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004314:	e003      	b.n	800431e <HAL_TIM_PWM_Start+0xaa>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2202      	movs	r2, #2
 800431a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2201      	movs	r2, #1
 8004324:	6839      	ldr	r1, [r7, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fe94 	bl	8005054 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a1c      	ldr	r2, [pc, #112]	; (80043a4 <HAL_TIM_PWM_Start+0x130>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d107      	bne.n	8004346 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004344:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a16      	ldr	r2, [pc, #88]	; (80043a4 <HAL_TIM_PWM_Start+0x130>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d009      	beq.n	8004364 <HAL_TIM_PWM_Start+0xf0>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004358:	d004      	beq.n	8004364 <HAL_TIM_PWM_Start+0xf0>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a12      	ldr	r2, [pc, #72]	; (80043a8 <HAL_TIM_PWM_Start+0x134>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d111      	bne.n	8004388 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b06      	cmp	r3, #6
 8004374:	d010      	beq.n	8004398 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0201 	orr.w	r2, r2, #1
 8004384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004386:	e007      	b.n	8004398 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40012c00 	.word	0x40012c00
 80043a8:	40000400 	.word	0x40000400

080043ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e093      	b.n	80044e8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d106      	bne.n	80043da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7fe fa39 	bl	800284c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2202      	movs	r2, #2
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043f0:	f023 0307 	bic.w	r3, r3, #7
 80043f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3304      	adds	r3, #4
 80043fe:	4619      	mov	r1, r3
 8004400:	4610      	mov	r0, r2
 8004402:	f000 fbb1 	bl	8004b68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442e:	f023 0303 	bic.w	r3, r3, #3
 8004432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	4313      	orrs	r3, r2
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800444c:	f023 030c 	bic.w	r3, r3, #12
 8004450:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004458:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800445c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	4313      	orrs	r3, r2
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	011a      	lsls	r2, r3, #4
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	031b      	lsls	r3, r3, #12
 800447c:	4313      	orrs	r3, r2
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800448a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	4313      	orrs	r3, r2
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004500:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004508:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004510:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004518:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d110      	bne.n	8004542 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d102      	bne.n	800452c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004526:	7b7b      	ldrb	r3, [r7, #13]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d001      	beq.n	8004530 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e069      	b.n	8004604 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004540:	e031      	b.n	80045a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b04      	cmp	r3, #4
 8004546:	d110      	bne.n	800456a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004548:	7bbb      	ldrb	r3, [r7, #14]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d102      	bne.n	8004554 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800454e:	7b3b      	ldrb	r3, [r7, #12]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d001      	beq.n	8004558 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e055      	b.n	8004604 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004568:	e01d      	b.n	80045a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d108      	bne.n	8004582 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004570:	7bbb      	ldrb	r3, [r7, #14]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d105      	bne.n	8004582 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004576:	7b7b      	ldrb	r3, [r7, #13]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d102      	bne.n	8004582 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800457c:	7b3b      	ldrb	r3, [r7, #12]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d001      	beq.n	8004586 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e03e      	b.n	8004604 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2202      	movs	r2, #2
 800458a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2202      	movs	r2, #2
 8004592:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2202      	movs	r2, #2
 800459a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2202      	movs	r2, #2
 80045a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_TIM_Encoder_Start+0xc4>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d008      	beq.n	80045c4 <HAL_TIM_Encoder_Start+0xd4>
 80045b2:	e00f      	b.n	80045d4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2201      	movs	r2, #1
 80045ba:	2100      	movs	r1, #0
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fd49 	bl	8005054 <TIM_CCxChannelCmd>
      break;
 80045c2:	e016      	b.n	80045f2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2201      	movs	r2, #1
 80045ca:	2104      	movs	r1, #4
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fd41 	bl	8005054 <TIM_CCxChannelCmd>
      break;
 80045d2:	e00e      	b.n	80045f2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2201      	movs	r2, #1
 80045da:	2100      	movs	r1, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fd39 	bl	8005054 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2201      	movs	r2, #1
 80045e8:	2104      	movs	r1, #4
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fd32 	bl	8005054 <TIM_CCxChannelCmd>
      break;
 80045f0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f042 0201 	orr.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b02      	cmp	r3, #2
 8004620:	d122      	bne.n	8004668 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b02      	cmp	r3, #2
 800462e:	d11b      	bne.n	8004668 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0202 	mvn.w	r2, #2
 8004638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fa6f 	bl	8004b32 <HAL_TIM_IC_CaptureCallback>
 8004654:	e005      	b.n	8004662 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fa62 	bl	8004b20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fa71 	bl	8004b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b04      	cmp	r3, #4
 8004674:	d122      	bne.n	80046bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b04      	cmp	r3, #4
 8004682:	d11b      	bne.n	80046bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0204 	mvn.w	r2, #4
 800468c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2202      	movs	r2, #2
 8004692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fa45 	bl	8004b32 <HAL_TIM_IC_CaptureCallback>
 80046a8:	e005      	b.n	80046b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fa38 	bl	8004b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fa47 	bl	8004b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d122      	bne.n	8004710 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0308 	and.w	r3, r3, #8
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d11b      	bne.n	8004710 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0208 	mvn.w	r2, #8
 80046e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2204      	movs	r2, #4
 80046e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fa1b 	bl	8004b32 <HAL_TIM_IC_CaptureCallback>
 80046fc:	e005      	b.n	800470a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fa0e 	bl	8004b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fa1d 	bl	8004b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0310 	and.w	r3, r3, #16
 800471a:	2b10      	cmp	r3, #16
 800471c:	d122      	bne.n	8004764 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	2b10      	cmp	r3, #16
 800472a:	d11b      	bne.n	8004764 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0210 	mvn.w	r2, #16
 8004734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2208      	movs	r2, #8
 800473a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f9f1 	bl	8004b32 <HAL_TIM_IC_CaptureCallback>
 8004750:	e005      	b.n	800475e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f9e4 	bl	8004b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f9f3 	bl	8004b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b01      	cmp	r3, #1
 8004770:	d10e      	bne.n	8004790 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b01      	cmp	r3, #1
 800477e:	d107      	bne.n	8004790 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0201 	mvn.w	r2, #1
 8004788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fd f996 	bl	8001abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479a:	2b80      	cmp	r3, #128	; 0x80
 800479c:	d10e      	bne.n	80047bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a8:	2b80      	cmp	r3, #128	; 0x80
 80047aa:	d107      	bne.n	80047bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fd22 	bl	8005200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c6:	2b40      	cmp	r3, #64	; 0x40
 80047c8:	d10e      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d4:	2b40      	cmp	r3, #64	; 0x40
 80047d6:	d107      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f9b7 	bl	8004b56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d10e      	bne.n	8004814 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b20      	cmp	r3, #32
 8004802:	d107      	bne.n	8004814 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0220 	mvn.w	r2, #32
 800480c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fced 	bl	80051ee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004814:	bf00      	nop
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800482e:	2b01      	cmp	r3, #1
 8004830:	d101      	bne.n	8004836 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004832:	2302      	movs	r3, #2
 8004834:	e0ac      	b.n	8004990 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b0c      	cmp	r3, #12
 8004842:	f200 809f 	bhi.w	8004984 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004846:	a201      	add	r2, pc, #4	; (adr r2, 800484c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484c:	08004881 	.word	0x08004881
 8004850:	08004985 	.word	0x08004985
 8004854:	08004985 	.word	0x08004985
 8004858:	08004985 	.word	0x08004985
 800485c:	080048c1 	.word	0x080048c1
 8004860:	08004985 	.word	0x08004985
 8004864:	08004985 	.word	0x08004985
 8004868:	08004985 	.word	0x08004985
 800486c:	08004903 	.word	0x08004903
 8004870:	08004985 	.word	0x08004985
 8004874:	08004985 	.word	0x08004985
 8004878:	08004985 	.word	0x08004985
 800487c:	08004943 	.word	0x08004943
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 f9c6 	bl	8004c18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0208 	orr.w	r2, r2, #8
 800489a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0204 	bic.w	r2, r2, #4
 80048aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6999      	ldr	r1, [r3, #24]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	619a      	str	r2, [r3, #24]
      break;
 80048be:	e062      	b.n	8004986 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68b9      	ldr	r1, [r7, #8]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fa0c 	bl	8004ce4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6999      	ldr	r1, [r3, #24]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	021a      	lsls	r2, r3, #8
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	619a      	str	r2, [r3, #24]
      break;
 8004900:	e041      	b.n	8004986 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68b9      	ldr	r1, [r7, #8]
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fa55 	bl	8004db8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 0208 	orr.w	r2, r2, #8
 800491c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69da      	ldr	r2, [r3, #28]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0204 	bic.w	r2, r2, #4
 800492c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69d9      	ldr	r1, [r3, #28]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	61da      	str	r2, [r3, #28]
      break;
 8004940:	e021      	b.n	8004986 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68b9      	ldr	r1, [r7, #8]
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fa9f 	bl	8004e8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69da      	ldr	r2, [r3, #28]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800495c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69da      	ldr	r2, [r3, #28]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800496c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69d9      	ldr	r1, [r3, #28]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	021a      	lsls	r2, r3, #8
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	61da      	str	r2, [r3, #28]
      break;
 8004982:	e000      	b.n	8004986 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004984:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_TIM_ConfigClockSource+0x18>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e0b3      	b.n	8004b18 <HAL_TIM_ConfigClockSource+0x180>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e8:	d03e      	beq.n	8004a68 <HAL_TIM_ConfigClockSource+0xd0>
 80049ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ee:	f200 8087 	bhi.w	8004b00 <HAL_TIM_ConfigClockSource+0x168>
 80049f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f6:	f000 8085 	beq.w	8004b04 <HAL_TIM_ConfigClockSource+0x16c>
 80049fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fe:	d87f      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x168>
 8004a00:	2b70      	cmp	r3, #112	; 0x70
 8004a02:	d01a      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0xa2>
 8004a04:	2b70      	cmp	r3, #112	; 0x70
 8004a06:	d87b      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x168>
 8004a08:	2b60      	cmp	r3, #96	; 0x60
 8004a0a:	d050      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x116>
 8004a0c:	2b60      	cmp	r3, #96	; 0x60
 8004a0e:	d877      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x168>
 8004a10:	2b50      	cmp	r3, #80	; 0x50
 8004a12:	d03c      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0xf6>
 8004a14:	2b50      	cmp	r3, #80	; 0x50
 8004a16:	d873      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x168>
 8004a18:	2b40      	cmp	r3, #64	; 0x40
 8004a1a:	d058      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x136>
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d86f      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x168>
 8004a20:	2b30      	cmp	r3, #48	; 0x30
 8004a22:	d064      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x156>
 8004a24:	2b30      	cmp	r3, #48	; 0x30
 8004a26:	d86b      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x168>
 8004a28:	2b20      	cmp	r3, #32
 8004a2a:	d060      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x156>
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d867      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x168>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d05c      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x156>
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d05a      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a38:	e062      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6899      	ldr	r1, [r3, #8]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f000 fae4 	bl	8005016 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	609a      	str	r2, [r3, #8]
      break;
 8004a66:	e04e      	b.n	8004b06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	6899      	ldr	r1, [r3, #8]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f000 facd 	bl	8005016 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a8a:	609a      	str	r2, [r3, #8]
      break;
 8004a8c:	e03b      	b.n	8004b06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6859      	ldr	r1, [r3, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f000 fa44 	bl	8004f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2150      	movs	r1, #80	; 0x50
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fa9b 	bl	8004fe2 <TIM_ITRx_SetConfig>
      break;
 8004aac:	e02b      	b.n	8004b06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6859      	ldr	r1, [r3, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f000 fa62 	bl	8004f84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2160      	movs	r1, #96	; 0x60
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fa8b 	bl	8004fe2 <TIM_ITRx_SetConfig>
      break;
 8004acc:	e01b      	b.n	8004b06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6859      	ldr	r1, [r3, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f000 fa24 	bl	8004f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2140      	movs	r1, #64	; 0x40
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fa7b 	bl	8004fe2 <TIM_ITRx_SetConfig>
      break;
 8004aec:	e00b      	b.n	8004b06 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4619      	mov	r1, r3
 8004af8:	4610      	mov	r0, r2
 8004afa:	f000 fa72 	bl	8004fe2 <TIM_ITRx_SetConfig>
        break;
 8004afe:	e002      	b.n	8004b06 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b00:	bf00      	nop
 8004b02:	e000      	b.n	8004b06 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr

08004b32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr

08004b56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr

08004b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a25      	ldr	r2, [pc, #148]	; (8004c10 <TIM_Base_SetConfig+0xa8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d007      	beq.n	8004b90 <TIM_Base_SetConfig+0x28>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b86:	d003      	beq.n	8004b90 <TIM_Base_SetConfig+0x28>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a22      	ldr	r2, [pc, #136]	; (8004c14 <TIM_Base_SetConfig+0xac>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d108      	bne.n	8004ba2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a1a      	ldr	r2, [pc, #104]	; (8004c10 <TIM_Base_SetConfig+0xa8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d007      	beq.n	8004bba <TIM_Base_SetConfig+0x52>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb0:	d003      	beq.n	8004bba <TIM_Base_SetConfig+0x52>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a17      	ldr	r2, [pc, #92]	; (8004c14 <TIM_Base_SetConfig+0xac>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d108      	bne.n	8004bcc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a07      	ldr	r2, [pc, #28]	; (8004c10 <TIM_Base_SetConfig+0xa8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d103      	bne.n	8004c00 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	615a      	str	r2, [r3, #20]
}
 8004c06:	bf00      	nop
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr
 8004c10:	40012c00 	.word	0x40012c00
 8004c14:	40000400 	.word	0x40000400

08004c18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f023 0201 	bic.w	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0303 	bic.w	r3, r3, #3
 8004c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f023 0302 	bic.w	r3, r3, #2
 8004c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a1c      	ldr	r2, [pc, #112]	; (8004ce0 <TIM_OC1_SetConfig+0xc8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d10c      	bne.n	8004c8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f023 0308 	bic.w	r3, r3, #8
 8004c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f023 0304 	bic.w	r3, r3, #4
 8004c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a13      	ldr	r2, [pc, #76]	; (8004ce0 <TIM_OC1_SetConfig+0xc8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d111      	bne.n	8004cba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	621a      	str	r2, [r3, #32]
}
 8004cd4:	bf00      	nop
 8004cd6:	371c      	adds	r7, #28
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40012c00 	.word	0x40012c00

08004ce4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	f023 0210 	bic.w	r2, r3, #16
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f023 0320 	bic.w	r3, r3, #32
 8004d2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a1d      	ldr	r2, [pc, #116]	; (8004db4 <TIM_OC2_SetConfig+0xd0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d10d      	bne.n	8004d60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a14      	ldr	r2, [pc, #80]	; (8004db4 <TIM_OC2_SetConfig+0xd0>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d113      	bne.n	8004d90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	621a      	str	r2, [r3, #32]
}
 8004daa:	bf00      	nop
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr
 8004db4:	40012c00 	.word	0x40012c00

08004db8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0303 	bic.w	r3, r3, #3
 8004dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a1d      	ldr	r2, [pc, #116]	; (8004e88 <TIM_OC3_SetConfig+0xd0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d10d      	bne.n	8004e32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	021b      	lsls	r3, r3, #8
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a14      	ldr	r2, [pc, #80]	; (8004e88 <TIM_OC3_SetConfig+0xd0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d113      	bne.n	8004e62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	621a      	str	r2, [r3, #32]
}
 8004e7c:	bf00      	nop
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40012c00 	.word	0x40012c00

08004e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	021b      	lsls	r3, r3, #8
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	031b      	lsls	r3, r3, #12
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a0f      	ldr	r2, [pc, #60]	; (8004f24 <TIM_OC4_SetConfig+0x98>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d109      	bne.n	8004f00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ef2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	019b      	lsls	r3, r3, #6
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	621a      	str	r2, [r3, #32]
}
 8004f1a:	bf00      	nop
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr
 8004f24:	40012c00 	.word	0x40012c00

08004f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f023 0201 	bic.w	r2, r3, #1
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f023 030a 	bic.w	r3, r3, #10
 8004f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr

08004f84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	f023 0210 	bic.w	r2, r3, #16
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	031b      	lsls	r3, r3, #12
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	621a      	str	r2, [r3, #32]
}
 8004fd8:	bf00      	nop
 8004fda:	371c      	adds	r7, #28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr

08004fe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f043 0307 	orr.w	r3, r3, #7
 8005004:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	609a      	str	r2, [r3, #8]
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr

08005016 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005016:	b480      	push	{r7}
 8005018:	b087      	sub	sp, #28
 800501a:	af00      	add	r7, sp, #0
 800501c:	60f8      	str	r0, [r7, #12]
 800501e:	60b9      	str	r1, [r7, #8]
 8005020:	607a      	str	r2, [r7, #4]
 8005022:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005030:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	021a      	lsls	r2, r3, #8
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	431a      	orrs	r2, r3
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	4313      	orrs	r3, r2
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	609a      	str	r2, [r3, #8]
}
 800504a:	bf00      	nop
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr

08005054 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	2201      	movs	r2, #1
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6a1a      	ldr	r2, [r3, #32]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	43db      	mvns	r3, r3
 8005076:	401a      	ands	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1a      	ldr	r2, [r3, #32]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	fa01 f303 	lsl.w	r3, r1, r3
 800508c:	431a      	orrs	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr

0800509c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e041      	b.n	8005138 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a14      	ldr	r2, [pc, #80]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d009      	beq.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005100:	d004      	beq.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a10      	ldr	r2, [pc, #64]	; (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d10c      	bne.n	8005126 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005112:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	4313      	orrs	r3, r2
 800511c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	bc80      	pop	{r7}
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40012c00 	.word	0x40012c00
 8005148:	40000400 	.word	0x40000400

0800514c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005164:	2302      	movs	r3, #2
 8005166:	e03d      	b.n	80051e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr

080051ee <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr

08005200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr

08005212 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b082      	sub	sp, #8
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e03f      	b.n	80052a4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d106      	bne.n	800523e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7fd fbcd 	bl	80029d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2224      	movs	r2, #36	; 0x24
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005254:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f828 	bl	80052ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800526a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695a      	ldr	r2, [r3, #20]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800527a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800528a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2220      	movs	r2, #32
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80052e6:	f023 030c 	bic.w	r3, r3, #12
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	430b      	orrs	r3, r1
 80052f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a2c      	ldr	r2, [pc, #176]	; (80053c0 <UART_SetConfig+0x114>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d103      	bne.n	800531c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005314:	f7fe fb74 	bl	8003a00 <HAL_RCC_GetPCLK2Freq>
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	e002      	b.n	8005322 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800531c:	f7fe fb5c 	bl	80039d8 <HAL_RCC_GetPCLK1Freq>
 8005320:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4613      	mov	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	009a      	lsls	r2, r3, #2
 800532c:	441a      	add	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	fbb2 f3f3 	udiv	r3, r2, r3
 8005338:	4a22      	ldr	r2, [pc, #136]	; (80053c4 <UART_SetConfig+0x118>)
 800533a:	fba2 2303 	umull	r2, r3, r2, r3
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	0119      	lsls	r1, r3, #4
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	009a      	lsls	r2, r3, #2
 800534c:	441a      	add	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	fbb2 f2f3 	udiv	r2, r2, r3
 8005358:	4b1a      	ldr	r3, [pc, #104]	; (80053c4 <UART_SetConfig+0x118>)
 800535a:	fba3 0302 	umull	r0, r3, r3, r2
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	2064      	movs	r0, #100	; 0x64
 8005362:	fb00 f303 	mul.w	r3, r0, r3
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	3332      	adds	r3, #50	; 0x32
 800536c:	4a15      	ldr	r2, [pc, #84]	; (80053c4 <UART_SetConfig+0x118>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005378:	4419      	add	r1, r3
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	009a      	lsls	r2, r3, #2
 8005384:	441a      	add	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005390:	4b0c      	ldr	r3, [pc, #48]	; (80053c4 <UART_SetConfig+0x118>)
 8005392:	fba3 0302 	umull	r0, r3, r3, r2
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	2064      	movs	r0, #100	; 0x64
 800539a:	fb00 f303 	mul.w	r3, r0, r3
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	3332      	adds	r3, #50	; 0x32
 80053a4:	4a07      	ldr	r2, [pc, #28]	; (80053c4 <UART_SetConfig+0x118>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	f003 020f 	and.w	r2, r3, #15
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	440a      	add	r2, r1
 80053b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80053b8:	bf00      	nop
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40013800 	.word	0x40013800
 80053c4:	51eb851f 	.word	0x51eb851f

080053c8 <LL_ADC_REG_SetSequencerLength>:
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr

080053ec <LL_ADC_IsEnabled>:
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	bf0c      	ite	eq
 8005400:	2301      	moveq	r3, #1
 8005402:	2300      	movne	r3, #0
 8005404:	b2db      	uxtb	r3, r3
}
 8005406:	4618      	mov	r0, r3
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr

08005410 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8005410:	b590      	push	{r4, r7, lr}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800541a:	2300      	movs	r3, #0
 800541c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800541e:	4813      	ldr	r0, [pc, #76]	; (800546c <LL_ADC_CommonInit+0x5c>)
 8005420:	f7ff ffe4 	bl	80053ec <LL_ADC_IsEnabled>
 8005424:	4604      	mov	r4, r0
 8005426:	4812      	ldr	r0, [pc, #72]	; (8005470 <LL_ADC_CommonInit+0x60>)
 8005428:	f7ff ffe0 	bl	80053ec <LL_ADC_IsEnabled>
 800542c:	4603      	mov	r3, r0
 800542e:	4323      	orrs	r3, r4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d114      	bne.n	800545e <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d009      	beq.n	8005450 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	605a      	str	r2, [r3, #4]
 800544e:	e008      	b.n	8005462 <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	605a      	str	r2, [r3, #4]
 800545c:	e001      	b.n	8005462 <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8005462:	7bfb      	ldrb	r3, [r7, #15]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	bd90      	pop	{r4, r7, pc}
 800546c:	40012400 	.word	0x40012400
 8005470:	40012800 	.word	0x40012800

08005474 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800547e:	2300      	movs	r3, #0
 8005480:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff ffb2 	bl	80053ec <LL_ADC_IsEnabled>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d112      	bne.n	80054b4 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	609a      	str	r2, [r3, #8]
 80054b2:	e001      	b.n	80054b8 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80054cc:	2300      	movs	r3, #0
 80054ce:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7ff ff8b 	bl	80053ec <LL_ADC_IsEnabled>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d131      	bne.n	8005540 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00c      	beq.n	80054fe <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	6859      	ldr	r1, [r3, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	430b      	orrs	r3, r1
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	605a      	str	r2, [r3, #4]
 80054fc:	e008      	b.n	8005510 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8005518:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	6811      	ldr	r1, [r2, #0]
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	68d2      	ldr	r2, [r2, #12]
 8005524:	4311      	orrs	r1, r2
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	6912      	ldr	r2, [r2, #16]
 800552a:	430a      	orrs	r2, r1
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	4619      	mov	r1, r3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff ff45 	bl	80053c8 <LL_ADC_REG_SetSequencerLength>
 800553e:	e001      	b.n	8005544 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800554e:	b490      	push	{r4, r7}
 8005550:	b088      	sub	sp, #32
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	461a      	mov	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	0e1b      	lsrs	r3, r3, #24
 8005562:	4413      	add	r3, r2
 8005564:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8005566:	6822      	ldr	r2, [r4, #0]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	fa93 f3a3 	rbit	r3, r3
 8005572:	613b      	str	r3, [r7, #16]
  return result;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	fab3 f383 	clz	r3, r3
 800557a:	b2db      	uxtb	r3, r3
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	210f      	movs	r1, #15
 8005580:	fa01 f303 	lsl.w	r3, r1, r3
 8005584:	43db      	mvns	r3, r3
 8005586:	401a      	ands	r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	fa93 f3a3 	rbit	r3, r3
 8005592:	61bb      	str	r3, [r7, #24]
  return result;
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	fab3 f383 	clz	r3, r3
 800559a:	b2db      	uxtb	r3, r3
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	fa01 f303 	lsl.w	r3, r1, r3
 80055a4:	4313      	orrs	r3, r2
 80055a6:	6023      	str	r3, [r4, #0]
}
 80055a8:	bf00      	nop
 80055aa:	3720      	adds	r7, #32
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc90      	pop	{r4, r7}
 80055b0:	4770      	bx	lr

080055b2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80055b2:	b490      	push	{r4, r7}
 80055b4:	b088      	sub	sp, #32
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	60b9      	str	r1, [r7, #8]
 80055bc:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	461a      	mov	r2, r3
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	0e1b      	lsrs	r3, r3, #24
 80055c6:	4413      	add	r3, r2
 80055c8:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80055ca:	6822      	ldr	r2, [r4, #0]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	fa93 f3a3 	rbit	r3, r3
 80055d6:	613b      	str	r3, [r7, #16]
  return result;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	fab3 f383 	clz	r3, r3
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	2103      	movs	r1, #3
 80055e4:	fa01 f303 	lsl.w	r3, r1, r3
 80055e8:	43db      	mvns	r3, r3
 80055ea:	401a      	ands	r2, r3
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	fa93 f3a3 	rbit	r3, r3
 80055f6:	61bb      	str	r3, [r7, #24]
  return result;
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	fab3 f383 	clz	r3, r3
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	fa01 f303 	lsl.w	r3, r1, r3
 8005608:	4313      	orrs	r3, r2
 800560a:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 800560c:	bf00      	nop
 800560e:	3720      	adds	r7, #32
 8005610:	46bd      	mov	sp, r7
 8005612:	bc90      	pop	{r4, r7}
 8005614:	4770      	bx	lr

08005616 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8005616:	b490      	push	{r4, r7}
 8005618:	b088      	sub	sp, #32
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	461a      	mov	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	0e1b      	lsrs	r3, r3, #24
 800562a:	4413      	add	r3, r2
 800562c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800562e:	6822      	ldr	r2, [r4, #0]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	fa93 f3a3 	rbit	r3, r3
 800563a:	613b      	str	r3, [r7, #16]
  return result;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	fab3 f383 	clz	r3, r3
 8005642:	b2db      	uxtb	r3, r3
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	2104      	movs	r1, #4
 8005648:	fa01 f303 	lsl.w	r3, r1, r3
 800564c:	43db      	mvns	r3, r3
 800564e:	401a      	ands	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	fa93 f3a3 	rbit	r3, r3
 800565a:	61bb      	str	r3, [r7, #24]
  return result;
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	fab3 f383 	clz	r3, r3
 8005662:	b2db      	uxtb	r3, r3
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	fa01 f303 	lsl.w	r3, r1, r3
 800566c:	4313      	orrs	r3, r2
 800566e:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8005670:	bf00      	nop
 8005672:	3720      	adds	r7, #32
 8005674:	46bd      	mov	sp, r7
 8005676:	bc90      	pop	{r4, r7}
 8005678:	4770      	bx	lr

0800567a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800567a:	b480      	push	{r7}
 800567c:	b087      	sub	sp, #28
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	68da      	ldr	r2, [r3, #12]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	0a1b      	lsrs	r3, r3, #8
 800568e:	43db      	mvns	r3, r3
 8005690:	401a      	ands	r2, r3
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	0a1b      	lsrs	r3, r3, #8
 8005696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	fa93 f3a3 	rbit	r3, r3
 800569e:	613b      	str	r3, [r7, #16]
  return result;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	fab3 f383 	clz	r3, r3
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	4619      	mov	r1, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	408b      	lsls	r3, r1
 80056ae:	431a      	orrs	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	60da      	str	r2, [r3, #12]
}
 80056b4:	bf00      	nop
 80056b6:	371c      	adds	r7, #28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr

080056be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b088      	sub	sp, #32
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	021b      	lsls	r3, r3, #8
 80056ce:	0c1b      	lsrs	r3, r3, #16
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	fa93 f3a3 	rbit	r3, r3
 80056dc:	60fb      	str	r3, [r7, #12]
  return result;
 80056de:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80056e0:	fab3 f383 	clz	r3, r3
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80056e8:	e044      	b.n	8005774 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80056ea:	2201      	movs	r2, #1
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	409a      	lsls	r2, r3
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	4013      	ands	r3, r2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d03a      	beq.n	800576e <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	2b07      	cmp	r3, #7
 80056fc:	d806      	bhi.n	800570c <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80056fe:	f240 1201 	movw	r2, #257	; 0x101
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	e008      	b.n	800571e <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	3b08      	subs	r3, #8
 8005710:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800571c:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b08      	cmp	r3, #8
 8005724:	d106      	bne.n	8005734 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	461a      	mov	r2, r3
 800572c:	69b9      	ldr	r1, [r7, #24]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff ffa3 	bl	800567a <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	461a      	mov	r2, r3
 800573a:	69b9      	ldr	r1, [r7, #24]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff ff06 	bl	800554e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d003      	beq.n	8005752 <LL_GPIO_Init+0x94>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b09      	cmp	r3, #9
 8005750:	d10d      	bne.n	800576e <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	461a      	mov	r2, r3
 8005758:	69b9      	ldr	r1, [r7, #24]
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff ff29 	bl	80055b2 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	461a      	mov	r2, r3
 8005766:	69b9      	ldr	r1, [r7, #24]
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff ff54 	bl	8005616 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	3301      	adds	r3, #1
 8005772:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	fa22 f303 	lsr.w	r3, r2, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1b4      	bne.n	80056ea <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3720      	adds	r7, #32
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <__errno>:
 800578c:	4b01      	ldr	r3, [pc, #4]	; (8005794 <__errno+0x8>)
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	20000014 	.word	0x20000014

08005798 <__libc_init_array>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	2600      	movs	r6, #0
 800579c:	4d0c      	ldr	r5, [pc, #48]	; (80057d0 <__libc_init_array+0x38>)
 800579e:	4c0d      	ldr	r4, [pc, #52]	; (80057d4 <__libc_init_array+0x3c>)
 80057a0:	1b64      	subs	r4, r4, r5
 80057a2:	10a4      	asrs	r4, r4, #2
 80057a4:	42a6      	cmp	r6, r4
 80057a6:	d109      	bne.n	80057bc <__libc_init_array+0x24>
 80057a8:	f000 fc5c 	bl	8006064 <_init>
 80057ac:	2600      	movs	r6, #0
 80057ae:	4d0a      	ldr	r5, [pc, #40]	; (80057d8 <__libc_init_array+0x40>)
 80057b0:	4c0a      	ldr	r4, [pc, #40]	; (80057dc <__libc_init_array+0x44>)
 80057b2:	1b64      	subs	r4, r4, r5
 80057b4:	10a4      	asrs	r4, r4, #2
 80057b6:	42a6      	cmp	r6, r4
 80057b8:	d105      	bne.n	80057c6 <__libc_init_array+0x2e>
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c0:	4798      	blx	r3
 80057c2:	3601      	adds	r6, #1
 80057c4:	e7ee      	b.n	80057a4 <__libc_init_array+0xc>
 80057c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ca:	4798      	blx	r3
 80057cc:	3601      	adds	r6, #1
 80057ce:	e7f2      	b.n	80057b6 <__libc_init_array+0x1e>
 80057d0:	08006444 	.word	0x08006444
 80057d4:	08006444 	.word	0x08006444
 80057d8:	08006444 	.word	0x08006444
 80057dc:	08006448 	.word	0x08006448

080057e0 <memcpy>:
 80057e0:	440a      	add	r2, r1
 80057e2:	4291      	cmp	r1, r2
 80057e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80057e8:	d100      	bne.n	80057ec <memcpy+0xc>
 80057ea:	4770      	bx	lr
 80057ec:	b510      	push	{r4, lr}
 80057ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057f2:	4291      	cmp	r1, r2
 80057f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057f8:	d1f9      	bne.n	80057ee <memcpy+0xe>
 80057fa:	bd10      	pop	{r4, pc}

080057fc <memset>:
 80057fc:	4603      	mov	r3, r0
 80057fe:	4402      	add	r2, r0
 8005800:	4293      	cmp	r3, r2
 8005802:	d100      	bne.n	8005806 <memset+0xa>
 8005804:	4770      	bx	lr
 8005806:	f803 1b01 	strb.w	r1, [r3], #1
 800580a:	e7f9      	b.n	8005800 <memset+0x4>

0800580c <siprintf>:
 800580c:	b40e      	push	{r1, r2, r3}
 800580e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005812:	b500      	push	{lr}
 8005814:	b09c      	sub	sp, #112	; 0x70
 8005816:	ab1d      	add	r3, sp, #116	; 0x74
 8005818:	9002      	str	r0, [sp, #8]
 800581a:	9006      	str	r0, [sp, #24]
 800581c:	9107      	str	r1, [sp, #28]
 800581e:	9104      	str	r1, [sp, #16]
 8005820:	4808      	ldr	r0, [pc, #32]	; (8005844 <siprintf+0x38>)
 8005822:	4909      	ldr	r1, [pc, #36]	; (8005848 <siprintf+0x3c>)
 8005824:	f853 2b04 	ldr.w	r2, [r3], #4
 8005828:	9105      	str	r1, [sp, #20]
 800582a:	6800      	ldr	r0, [r0, #0]
 800582c:	a902      	add	r1, sp, #8
 800582e:	9301      	str	r3, [sp, #4]
 8005830:	f000 f868 	bl	8005904 <_svfiprintf_r>
 8005834:	2200      	movs	r2, #0
 8005836:	9b02      	ldr	r3, [sp, #8]
 8005838:	701a      	strb	r2, [r3, #0]
 800583a:	b01c      	add	sp, #112	; 0x70
 800583c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005840:	b003      	add	sp, #12
 8005842:	4770      	bx	lr
 8005844:	20000014 	.word	0x20000014
 8005848:	ffff0208 	.word	0xffff0208

0800584c <__ssputs_r>:
 800584c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005850:	688e      	ldr	r6, [r1, #8]
 8005852:	4682      	mov	sl, r0
 8005854:	429e      	cmp	r6, r3
 8005856:	460c      	mov	r4, r1
 8005858:	4690      	mov	r8, r2
 800585a:	461f      	mov	r7, r3
 800585c:	d838      	bhi.n	80058d0 <__ssputs_r+0x84>
 800585e:	898a      	ldrh	r2, [r1, #12]
 8005860:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005864:	d032      	beq.n	80058cc <__ssputs_r+0x80>
 8005866:	6825      	ldr	r5, [r4, #0]
 8005868:	6909      	ldr	r1, [r1, #16]
 800586a:	3301      	adds	r3, #1
 800586c:	eba5 0901 	sub.w	r9, r5, r1
 8005870:	6965      	ldr	r5, [r4, #20]
 8005872:	444b      	add	r3, r9
 8005874:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005878:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800587c:	106d      	asrs	r5, r5, #1
 800587e:	429d      	cmp	r5, r3
 8005880:	bf38      	it	cc
 8005882:	461d      	movcc	r5, r3
 8005884:	0553      	lsls	r3, r2, #21
 8005886:	d531      	bpl.n	80058ec <__ssputs_r+0xa0>
 8005888:	4629      	mov	r1, r5
 800588a:	f000 fb45 	bl	8005f18 <_malloc_r>
 800588e:	4606      	mov	r6, r0
 8005890:	b950      	cbnz	r0, 80058a8 <__ssputs_r+0x5c>
 8005892:	230c      	movs	r3, #12
 8005894:	f04f 30ff 	mov.w	r0, #4294967295
 8005898:	f8ca 3000 	str.w	r3, [sl]
 800589c:	89a3      	ldrh	r3, [r4, #12]
 800589e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058a2:	81a3      	strh	r3, [r4, #12]
 80058a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a8:	464a      	mov	r2, r9
 80058aa:	6921      	ldr	r1, [r4, #16]
 80058ac:	f7ff ff98 	bl	80057e0 <memcpy>
 80058b0:	89a3      	ldrh	r3, [r4, #12]
 80058b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ba:	81a3      	strh	r3, [r4, #12]
 80058bc:	6126      	str	r6, [r4, #16]
 80058be:	444e      	add	r6, r9
 80058c0:	6026      	str	r6, [r4, #0]
 80058c2:	463e      	mov	r6, r7
 80058c4:	6165      	str	r5, [r4, #20]
 80058c6:	eba5 0509 	sub.w	r5, r5, r9
 80058ca:	60a5      	str	r5, [r4, #8]
 80058cc:	42be      	cmp	r6, r7
 80058ce:	d900      	bls.n	80058d2 <__ssputs_r+0x86>
 80058d0:	463e      	mov	r6, r7
 80058d2:	4632      	mov	r2, r6
 80058d4:	4641      	mov	r1, r8
 80058d6:	6820      	ldr	r0, [r4, #0]
 80058d8:	f000 fab8 	bl	8005e4c <memmove>
 80058dc:	68a3      	ldr	r3, [r4, #8]
 80058de:	6822      	ldr	r2, [r4, #0]
 80058e0:	1b9b      	subs	r3, r3, r6
 80058e2:	4432      	add	r2, r6
 80058e4:	2000      	movs	r0, #0
 80058e6:	60a3      	str	r3, [r4, #8]
 80058e8:	6022      	str	r2, [r4, #0]
 80058ea:	e7db      	b.n	80058a4 <__ssputs_r+0x58>
 80058ec:	462a      	mov	r2, r5
 80058ee:	f000 fb6d 	bl	8005fcc <_realloc_r>
 80058f2:	4606      	mov	r6, r0
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d1e1      	bne.n	80058bc <__ssputs_r+0x70>
 80058f8:	4650      	mov	r0, sl
 80058fa:	6921      	ldr	r1, [r4, #16]
 80058fc:	f000 fac0 	bl	8005e80 <_free_r>
 8005900:	e7c7      	b.n	8005892 <__ssputs_r+0x46>
	...

08005904 <_svfiprintf_r>:
 8005904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005908:	4698      	mov	r8, r3
 800590a:	898b      	ldrh	r3, [r1, #12]
 800590c:	4607      	mov	r7, r0
 800590e:	061b      	lsls	r3, r3, #24
 8005910:	460d      	mov	r5, r1
 8005912:	4614      	mov	r4, r2
 8005914:	b09d      	sub	sp, #116	; 0x74
 8005916:	d50e      	bpl.n	8005936 <_svfiprintf_r+0x32>
 8005918:	690b      	ldr	r3, [r1, #16]
 800591a:	b963      	cbnz	r3, 8005936 <_svfiprintf_r+0x32>
 800591c:	2140      	movs	r1, #64	; 0x40
 800591e:	f000 fafb 	bl	8005f18 <_malloc_r>
 8005922:	6028      	str	r0, [r5, #0]
 8005924:	6128      	str	r0, [r5, #16]
 8005926:	b920      	cbnz	r0, 8005932 <_svfiprintf_r+0x2e>
 8005928:	230c      	movs	r3, #12
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	f04f 30ff 	mov.w	r0, #4294967295
 8005930:	e0d1      	b.n	8005ad6 <_svfiprintf_r+0x1d2>
 8005932:	2340      	movs	r3, #64	; 0x40
 8005934:	616b      	str	r3, [r5, #20]
 8005936:	2300      	movs	r3, #0
 8005938:	9309      	str	r3, [sp, #36]	; 0x24
 800593a:	2320      	movs	r3, #32
 800593c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005940:	2330      	movs	r3, #48	; 0x30
 8005942:	f04f 0901 	mov.w	r9, #1
 8005946:	f8cd 800c 	str.w	r8, [sp, #12]
 800594a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005af0 <_svfiprintf_r+0x1ec>
 800594e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005952:	4623      	mov	r3, r4
 8005954:	469a      	mov	sl, r3
 8005956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800595a:	b10a      	cbz	r2, 8005960 <_svfiprintf_r+0x5c>
 800595c:	2a25      	cmp	r2, #37	; 0x25
 800595e:	d1f9      	bne.n	8005954 <_svfiprintf_r+0x50>
 8005960:	ebba 0b04 	subs.w	fp, sl, r4
 8005964:	d00b      	beq.n	800597e <_svfiprintf_r+0x7a>
 8005966:	465b      	mov	r3, fp
 8005968:	4622      	mov	r2, r4
 800596a:	4629      	mov	r1, r5
 800596c:	4638      	mov	r0, r7
 800596e:	f7ff ff6d 	bl	800584c <__ssputs_r>
 8005972:	3001      	adds	r0, #1
 8005974:	f000 80aa 	beq.w	8005acc <_svfiprintf_r+0x1c8>
 8005978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800597a:	445a      	add	r2, fp
 800597c:	9209      	str	r2, [sp, #36]	; 0x24
 800597e:	f89a 3000 	ldrb.w	r3, [sl]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 80a2 	beq.w	8005acc <_svfiprintf_r+0x1c8>
 8005988:	2300      	movs	r3, #0
 800598a:	f04f 32ff 	mov.w	r2, #4294967295
 800598e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005992:	f10a 0a01 	add.w	sl, sl, #1
 8005996:	9304      	str	r3, [sp, #16]
 8005998:	9307      	str	r3, [sp, #28]
 800599a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800599e:	931a      	str	r3, [sp, #104]	; 0x68
 80059a0:	4654      	mov	r4, sl
 80059a2:	2205      	movs	r2, #5
 80059a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a8:	4851      	ldr	r0, [pc, #324]	; (8005af0 <_svfiprintf_r+0x1ec>)
 80059aa:	f000 fa41 	bl	8005e30 <memchr>
 80059ae:	9a04      	ldr	r2, [sp, #16]
 80059b0:	b9d8      	cbnz	r0, 80059ea <_svfiprintf_r+0xe6>
 80059b2:	06d0      	lsls	r0, r2, #27
 80059b4:	bf44      	itt	mi
 80059b6:	2320      	movmi	r3, #32
 80059b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059bc:	0711      	lsls	r1, r2, #28
 80059be:	bf44      	itt	mi
 80059c0:	232b      	movmi	r3, #43	; 0x2b
 80059c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059c6:	f89a 3000 	ldrb.w	r3, [sl]
 80059ca:	2b2a      	cmp	r3, #42	; 0x2a
 80059cc:	d015      	beq.n	80059fa <_svfiprintf_r+0xf6>
 80059ce:	4654      	mov	r4, sl
 80059d0:	2000      	movs	r0, #0
 80059d2:	f04f 0c0a 	mov.w	ip, #10
 80059d6:	9a07      	ldr	r2, [sp, #28]
 80059d8:	4621      	mov	r1, r4
 80059da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059de:	3b30      	subs	r3, #48	; 0x30
 80059e0:	2b09      	cmp	r3, #9
 80059e2:	d94e      	bls.n	8005a82 <_svfiprintf_r+0x17e>
 80059e4:	b1b0      	cbz	r0, 8005a14 <_svfiprintf_r+0x110>
 80059e6:	9207      	str	r2, [sp, #28]
 80059e8:	e014      	b.n	8005a14 <_svfiprintf_r+0x110>
 80059ea:	eba0 0308 	sub.w	r3, r0, r8
 80059ee:	fa09 f303 	lsl.w	r3, r9, r3
 80059f2:	4313      	orrs	r3, r2
 80059f4:	46a2      	mov	sl, r4
 80059f6:	9304      	str	r3, [sp, #16]
 80059f8:	e7d2      	b.n	80059a0 <_svfiprintf_r+0x9c>
 80059fa:	9b03      	ldr	r3, [sp, #12]
 80059fc:	1d19      	adds	r1, r3, #4
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	9103      	str	r1, [sp, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	bfbb      	ittet	lt
 8005a06:	425b      	neglt	r3, r3
 8005a08:	f042 0202 	orrlt.w	r2, r2, #2
 8005a0c:	9307      	strge	r3, [sp, #28]
 8005a0e:	9307      	strlt	r3, [sp, #28]
 8005a10:	bfb8      	it	lt
 8005a12:	9204      	strlt	r2, [sp, #16]
 8005a14:	7823      	ldrb	r3, [r4, #0]
 8005a16:	2b2e      	cmp	r3, #46	; 0x2e
 8005a18:	d10c      	bne.n	8005a34 <_svfiprintf_r+0x130>
 8005a1a:	7863      	ldrb	r3, [r4, #1]
 8005a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a1e:	d135      	bne.n	8005a8c <_svfiprintf_r+0x188>
 8005a20:	9b03      	ldr	r3, [sp, #12]
 8005a22:	3402      	adds	r4, #2
 8005a24:	1d1a      	adds	r2, r3, #4
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	9203      	str	r2, [sp, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bfb8      	it	lt
 8005a2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a32:	9305      	str	r3, [sp, #20]
 8005a34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b00 <_svfiprintf_r+0x1fc>
 8005a38:	2203      	movs	r2, #3
 8005a3a:	4650      	mov	r0, sl
 8005a3c:	7821      	ldrb	r1, [r4, #0]
 8005a3e:	f000 f9f7 	bl	8005e30 <memchr>
 8005a42:	b140      	cbz	r0, 8005a56 <_svfiprintf_r+0x152>
 8005a44:	2340      	movs	r3, #64	; 0x40
 8005a46:	eba0 000a 	sub.w	r0, r0, sl
 8005a4a:	fa03 f000 	lsl.w	r0, r3, r0
 8005a4e:	9b04      	ldr	r3, [sp, #16]
 8005a50:	3401      	adds	r4, #1
 8005a52:	4303      	orrs	r3, r0
 8005a54:	9304      	str	r3, [sp, #16]
 8005a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a5a:	2206      	movs	r2, #6
 8005a5c:	4825      	ldr	r0, [pc, #148]	; (8005af4 <_svfiprintf_r+0x1f0>)
 8005a5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a62:	f000 f9e5 	bl	8005e30 <memchr>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d038      	beq.n	8005adc <_svfiprintf_r+0x1d8>
 8005a6a:	4b23      	ldr	r3, [pc, #140]	; (8005af8 <_svfiprintf_r+0x1f4>)
 8005a6c:	bb1b      	cbnz	r3, 8005ab6 <_svfiprintf_r+0x1b2>
 8005a6e:	9b03      	ldr	r3, [sp, #12]
 8005a70:	3307      	adds	r3, #7
 8005a72:	f023 0307 	bic.w	r3, r3, #7
 8005a76:	3308      	adds	r3, #8
 8005a78:	9303      	str	r3, [sp, #12]
 8005a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a7c:	4433      	add	r3, r6
 8005a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a80:	e767      	b.n	8005952 <_svfiprintf_r+0x4e>
 8005a82:	460c      	mov	r4, r1
 8005a84:	2001      	movs	r0, #1
 8005a86:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a8a:	e7a5      	b.n	80059d8 <_svfiprintf_r+0xd4>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f04f 0c0a 	mov.w	ip, #10
 8005a92:	4619      	mov	r1, r3
 8005a94:	3401      	adds	r4, #1
 8005a96:	9305      	str	r3, [sp, #20]
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a9e:	3a30      	subs	r2, #48	; 0x30
 8005aa0:	2a09      	cmp	r2, #9
 8005aa2:	d903      	bls.n	8005aac <_svfiprintf_r+0x1a8>
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0c5      	beq.n	8005a34 <_svfiprintf_r+0x130>
 8005aa8:	9105      	str	r1, [sp, #20]
 8005aaa:	e7c3      	b.n	8005a34 <_svfiprintf_r+0x130>
 8005aac:	4604      	mov	r4, r0
 8005aae:	2301      	movs	r3, #1
 8005ab0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ab4:	e7f0      	b.n	8005a98 <_svfiprintf_r+0x194>
 8005ab6:	ab03      	add	r3, sp, #12
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	462a      	mov	r2, r5
 8005abc:	4638      	mov	r0, r7
 8005abe:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <_svfiprintf_r+0x1f8>)
 8005ac0:	a904      	add	r1, sp, #16
 8005ac2:	f3af 8000 	nop.w
 8005ac6:	1c42      	adds	r2, r0, #1
 8005ac8:	4606      	mov	r6, r0
 8005aca:	d1d6      	bne.n	8005a7a <_svfiprintf_r+0x176>
 8005acc:	89ab      	ldrh	r3, [r5, #12]
 8005ace:	065b      	lsls	r3, r3, #25
 8005ad0:	f53f af2c 	bmi.w	800592c <_svfiprintf_r+0x28>
 8005ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ad6:	b01d      	add	sp, #116	; 0x74
 8005ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005adc:	ab03      	add	r3, sp, #12
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	462a      	mov	r2, r5
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <_svfiprintf_r+0x1f8>)
 8005ae6:	a904      	add	r1, sp, #16
 8005ae8:	f000 f87c 	bl	8005be4 <_printf_i>
 8005aec:	e7eb      	b.n	8005ac6 <_svfiprintf_r+0x1c2>
 8005aee:	bf00      	nop
 8005af0:	08006410 	.word	0x08006410
 8005af4:	0800641a 	.word	0x0800641a
 8005af8:	00000000 	.word	0x00000000
 8005afc:	0800584d 	.word	0x0800584d
 8005b00:	08006416 	.word	0x08006416

08005b04 <_printf_common>:
 8005b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b08:	4616      	mov	r6, r2
 8005b0a:	4699      	mov	r9, r3
 8005b0c:	688a      	ldr	r2, [r1, #8]
 8005b0e:	690b      	ldr	r3, [r1, #16]
 8005b10:	4607      	mov	r7, r0
 8005b12:	4293      	cmp	r3, r2
 8005b14:	bfb8      	it	lt
 8005b16:	4613      	movlt	r3, r2
 8005b18:	6033      	str	r3, [r6, #0]
 8005b1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b1e:	460c      	mov	r4, r1
 8005b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b24:	b10a      	cbz	r2, 8005b2a <_printf_common+0x26>
 8005b26:	3301      	adds	r3, #1
 8005b28:	6033      	str	r3, [r6, #0]
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	0699      	lsls	r1, r3, #26
 8005b2e:	bf42      	ittt	mi
 8005b30:	6833      	ldrmi	r3, [r6, #0]
 8005b32:	3302      	addmi	r3, #2
 8005b34:	6033      	strmi	r3, [r6, #0]
 8005b36:	6825      	ldr	r5, [r4, #0]
 8005b38:	f015 0506 	ands.w	r5, r5, #6
 8005b3c:	d106      	bne.n	8005b4c <_printf_common+0x48>
 8005b3e:	f104 0a19 	add.w	sl, r4, #25
 8005b42:	68e3      	ldr	r3, [r4, #12]
 8005b44:	6832      	ldr	r2, [r6, #0]
 8005b46:	1a9b      	subs	r3, r3, r2
 8005b48:	42ab      	cmp	r3, r5
 8005b4a:	dc28      	bgt.n	8005b9e <_printf_common+0x9a>
 8005b4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b50:	1e13      	subs	r3, r2, #0
 8005b52:	6822      	ldr	r2, [r4, #0]
 8005b54:	bf18      	it	ne
 8005b56:	2301      	movne	r3, #1
 8005b58:	0692      	lsls	r2, r2, #26
 8005b5a:	d42d      	bmi.n	8005bb8 <_printf_common+0xb4>
 8005b5c:	4649      	mov	r1, r9
 8005b5e:	4638      	mov	r0, r7
 8005b60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b64:	47c0      	blx	r8
 8005b66:	3001      	adds	r0, #1
 8005b68:	d020      	beq.n	8005bac <_printf_common+0xa8>
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	68e5      	ldr	r5, [r4, #12]
 8005b6e:	f003 0306 	and.w	r3, r3, #6
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	bf18      	it	ne
 8005b76:	2500      	movne	r5, #0
 8005b78:	6832      	ldr	r2, [r6, #0]
 8005b7a:	f04f 0600 	mov.w	r6, #0
 8005b7e:	68a3      	ldr	r3, [r4, #8]
 8005b80:	bf08      	it	eq
 8005b82:	1aad      	subeq	r5, r5, r2
 8005b84:	6922      	ldr	r2, [r4, #16]
 8005b86:	bf08      	it	eq
 8005b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	bfc4      	itt	gt
 8005b90:	1a9b      	subgt	r3, r3, r2
 8005b92:	18ed      	addgt	r5, r5, r3
 8005b94:	341a      	adds	r4, #26
 8005b96:	42b5      	cmp	r5, r6
 8005b98:	d11a      	bne.n	8005bd0 <_printf_common+0xcc>
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	e008      	b.n	8005bb0 <_printf_common+0xac>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	4652      	mov	r2, sl
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	4638      	mov	r0, r7
 8005ba6:	47c0      	blx	r8
 8005ba8:	3001      	adds	r0, #1
 8005baa:	d103      	bne.n	8005bb4 <_printf_common+0xb0>
 8005bac:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bb4:	3501      	adds	r5, #1
 8005bb6:	e7c4      	b.n	8005b42 <_printf_common+0x3e>
 8005bb8:	2030      	movs	r0, #48	; 0x30
 8005bba:	18e1      	adds	r1, r4, r3
 8005bbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bc6:	4422      	add	r2, r4
 8005bc8:	3302      	adds	r3, #2
 8005bca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bce:	e7c5      	b.n	8005b5c <_printf_common+0x58>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	4622      	mov	r2, r4
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	4638      	mov	r0, r7
 8005bd8:	47c0      	blx	r8
 8005bda:	3001      	adds	r0, #1
 8005bdc:	d0e6      	beq.n	8005bac <_printf_common+0xa8>
 8005bde:	3601      	adds	r6, #1
 8005be0:	e7d9      	b.n	8005b96 <_printf_common+0x92>
	...

08005be4 <_printf_i>:
 8005be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005be8:	460c      	mov	r4, r1
 8005bea:	7e27      	ldrb	r7, [r4, #24]
 8005bec:	4691      	mov	r9, r2
 8005bee:	2f78      	cmp	r7, #120	; 0x78
 8005bf0:	4680      	mov	r8, r0
 8005bf2:	469a      	mov	sl, r3
 8005bf4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005bf6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bfa:	d807      	bhi.n	8005c0c <_printf_i+0x28>
 8005bfc:	2f62      	cmp	r7, #98	; 0x62
 8005bfe:	d80a      	bhi.n	8005c16 <_printf_i+0x32>
 8005c00:	2f00      	cmp	r7, #0
 8005c02:	f000 80d9 	beq.w	8005db8 <_printf_i+0x1d4>
 8005c06:	2f58      	cmp	r7, #88	; 0x58
 8005c08:	f000 80a4 	beq.w	8005d54 <_printf_i+0x170>
 8005c0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c14:	e03a      	b.n	8005c8c <_printf_i+0xa8>
 8005c16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c1a:	2b15      	cmp	r3, #21
 8005c1c:	d8f6      	bhi.n	8005c0c <_printf_i+0x28>
 8005c1e:	a001      	add	r0, pc, #4	; (adr r0, 8005c24 <_printf_i+0x40>)
 8005c20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c24:	08005c7d 	.word	0x08005c7d
 8005c28:	08005c91 	.word	0x08005c91
 8005c2c:	08005c0d 	.word	0x08005c0d
 8005c30:	08005c0d 	.word	0x08005c0d
 8005c34:	08005c0d 	.word	0x08005c0d
 8005c38:	08005c0d 	.word	0x08005c0d
 8005c3c:	08005c91 	.word	0x08005c91
 8005c40:	08005c0d 	.word	0x08005c0d
 8005c44:	08005c0d 	.word	0x08005c0d
 8005c48:	08005c0d 	.word	0x08005c0d
 8005c4c:	08005c0d 	.word	0x08005c0d
 8005c50:	08005d9f 	.word	0x08005d9f
 8005c54:	08005cc1 	.word	0x08005cc1
 8005c58:	08005d81 	.word	0x08005d81
 8005c5c:	08005c0d 	.word	0x08005c0d
 8005c60:	08005c0d 	.word	0x08005c0d
 8005c64:	08005dc1 	.word	0x08005dc1
 8005c68:	08005c0d 	.word	0x08005c0d
 8005c6c:	08005cc1 	.word	0x08005cc1
 8005c70:	08005c0d 	.word	0x08005c0d
 8005c74:	08005c0d 	.word	0x08005c0d
 8005c78:	08005d89 	.word	0x08005d89
 8005c7c:	680b      	ldr	r3, [r1, #0]
 8005c7e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c82:	1d1a      	adds	r2, r3, #4
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	600a      	str	r2, [r1, #0]
 8005c88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e0a4      	b.n	8005dda <_printf_i+0x1f6>
 8005c90:	6825      	ldr	r5, [r4, #0]
 8005c92:	6808      	ldr	r0, [r1, #0]
 8005c94:	062e      	lsls	r6, r5, #24
 8005c96:	f100 0304 	add.w	r3, r0, #4
 8005c9a:	d50a      	bpl.n	8005cb2 <_printf_i+0xce>
 8005c9c:	6805      	ldr	r5, [r0, #0]
 8005c9e:	600b      	str	r3, [r1, #0]
 8005ca0:	2d00      	cmp	r5, #0
 8005ca2:	da03      	bge.n	8005cac <_printf_i+0xc8>
 8005ca4:	232d      	movs	r3, #45	; 0x2d
 8005ca6:	426d      	negs	r5, r5
 8005ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cac:	230a      	movs	r3, #10
 8005cae:	485e      	ldr	r0, [pc, #376]	; (8005e28 <_printf_i+0x244>)
 8005cb0:	e019      	b.n	8005ce6 <_printf_i+0x102>
 8005cb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005cb6:	6805      	ldr	r5, [r0, #0]
 8005cb8:	600b      	str	r3, [r1, #0]
 8005cba:	bf18      	it	ne
 8005cbc:	b22d      	sxthne	r5, r5
 8005cbe:	e7ef      	b.n	8005ca0 <_printf_i+0xbc>
 8005cc0:	680b      	ldr	r3, [r1, #0]
 8005cc2:	6825      	ldr	r5, [r4, #0]
 8005cc4:	1d18      	adds	r0, r3, #4
 8005cc6:	6008      	str	r0, [r1, #0]
 8005cc8:	0628      	lsls	r0, r5, #24
 8005cca:	d501      	bpl.n	8005cd0 <_printf_i+0xec>
 8005ccc:	681d      	ldr	r5, [r3, #0]
 8005cce:	e002      	b.n	8005cd6 <_printf_i+0xf2>
 8005cd0:	0669      	lsls	r1, r5, #25
 8005cd2:	d5fb      	bpl.n	8005ccc <_printf_i+0xe8>
 8005cd4:	881d      	ldrh	r5, [r3, #0]
 8005cd6:	2f6f      	cmp	r7, #111	; 0x6f
 8005cd8:	bf0c      	ite	eq
 8005cda:	2308      	moveq	r3, #8
 8005cdc:	230a      	movne	r3, #10
 8005cde:	4852      	ldr	r0, [pc, #328]	; (8005e28 <_printf_i+0x244>)
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ce6:	6866      	ldr	r6, [r4, #4]
 8005ce8:	2e00      	cmp	r6, #0
 8005cea:	bfa8      	it	ge
 8005cec:	6821      	ldrge	r1, [r4, #0]
 8005cee:	60a6      	str	r6, [r4, #8]
 8005cf0:	bfa4      	itt	ge
 8005cf2:	f021 0104 	bicge.w	r1, r1, #4
 8005cf6:	6021      	strge	r1, [r4, #0]
 8005cf8:	b90d      	cbnz	r5, 8005cfe <_printf_i+0x11a>
 8005cfa:	2e00      	cmp	r6, #0
 8005cfc:	d04d      	beq.n	8005d9a <_printf_i+0x1b6>
 8005cfe:	4616      	mov	r6, r2
 8005d00:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d04:	fb03 5711 	mls	r7, r3, r1, r5
 8005d08:	5dc7      	ldrb	r7, [r0, r7]
 8005d0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d0e:	462f      	mov	r7, r5
 8005d10:	42bb      	cmp	r3, r7
 8005d12:	460d      	mov	r5, r1
 8005d14:	d9f4      	bls.n	8005d00 <_printf_i+0x11c>
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d10b      	bne.n	8005d32 <_printf_i+0x14e>
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	07df      	lsls	r7, r3, #31
 8005d1e:	d508      	bpl.n	8005d32 <_printf_i+0x14e>
 8005d20:	6923      	ldr	r3, [r4, #16]
 8005d22:	6861      	ldr	r1, [r4, #4]
 8005d24:	4299      	cmp	r1, r3
 8005d26:	bfde      	ittt	le
 8005d28:	2330      	movle	r3, #48	; 0x30
 8005d2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d32:	1b92      	subs	r2, r2, r6
 8005d34:	6122      	str	r2, [r4, #16]
 8005d36:	464b      	mov	r3, r9
 8005d38:	4621      	mov	r1, r4
 8005d3a:	4640      	mov	r0, r8
 8005d3c:	f8cd a000 	str.w	sl, [sp]
 8005d40:	aa03      	add	r2, sp, #12
 8005d42:	f7ff fedf 	bl	8005b04 <_printf_common>
 8005d46:	3001      	adds	r0, #1
 8005d48:	d14c      	bne.n	8005de4 <_printf_i+0x200>
 8005d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4e:	b004      	add	sp, #16
 8005d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d54:	4834      	ldr	r0, [pc, #208]	; (8005e28 <_printf_i+0x244>)
 8005d56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d5a:	680e      	ldr	r6, [r1, #0]
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d62:	061f      	lsls	r7, r3, #24
 8005d64:	600e      	str	r6, [r1, #0]
 8005d66:	d514      	bpl.n	8005d92 <_printf_i+0x1ae>
 8005d68:	07d9      	lsls	r1, r3, #31
 8005d6a:	bf44      	itt	mi
 8005d6c:	f043 0320 	orrmi.w	r3, r3, #32
 8005d70:	6023      	strmi	r3, [r4, #0]
 8005d72:	b91d      	cbnz	r5, 8005d7c <_printf_i+0x198>
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	f023 0320 	bic.w	r3, r3, #32
 8005d7a:	6023      	str	r3, [r4, #0]
 8005d7c:	2310      	movs	r3, #16
 8005d7e:	e7af      	b.n	8005ce0 <_printf_i+0xfc>
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	f043 0320 	orr.w	r3, r3, #32
 8005d86:	6023      	str	r3, [r4, #0]
 8005d88:	2378      	movs	r3, #120	; 0x78
 8005d8a:	4828      	ldr	r0, [pc, #160]	; (8005e2c <_printf_i+0x248>)
 8005d8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d90:	e7e3      	b.n	8005d5a <_printf_i+0x176>
 8005d92:	065e      	lsls	r6, r3, #25
 8005d94:	bf48      	it	mi
 8005d96:	b2ad      	uxthmi	r5, r5
 8005d98:	e7e6      	b.n	8005d68 <_printf_i+0x184>
 8005d9a:	4616      	mov	r6, r2
 8005d9c:	e7bb      	b.n	8005d16 <_printf_i+0x132>
 8005d9e:	680b      	ldr	r3, [r1, #0]
 8005da0:	6826      	ldr	r6, [r4, #0]
 8005da2:	1d1d      	adds	r5, r3, #4
 8005da4:	6960      	ldr	r0, [r4, #20]
 8005da6:	600d      	str	r5, [r1, #0]
 8005da8:	0635      	lsls	r5, r6, #24
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	d501      	bpl.n	8005db2 <_printf_i+0x1ce>
 8005dae:	6018      	str	r0, [r3, #0]
 8005db0:	e002      	b.n	8005db8 <_printf_i+0x1d4>
 8005db2:	0671      	lsls	r1, r6, #25
 8005db4:	d5fb      	bpl.n	8005dae <_printf_i+0x1ca>
 8005db6:	8018      	strh	r0, [r3, #0]
 8005db8:	2300      	movs	r3, #0
 8005dba:	4616      	mov	r6, r2
 8005dbc:	6123      	str	r3, [r4, #16]
 8005dbe:	e7ba      	b.n	8005d36 <_printf_i+0x152>
 8005dc0:	680b      	ldr	r3, [r1, #0]
 8005dc2:	1d1a      	adds	r2, r3, #4
 8005dc4:	600a      	str	r2, [r1, #0]
 8005dc6:	681e      	ldr	r6, [r3, #0]
 8005dc8:	2100      	movs	r1, #0
 8005dca:	4630      	mov	r0, r6
 8005dcc:	6862      	ldr	r2, [r4, #4]
 8005dce:	f000 f82f 	bl	8005e30 <memchr>
 8005dd2:	b108      	cbz	r0, 8005dd8 <_printf_i+0x1f4>
 8005dd4:	1b80      	subs	r0, r0, r6
 8005dd6:	6060      	str	r0, [r4, #4]
 8005dd8:	6863      	ldr	r3, [r4, #4]
 8005dda:	6123      	str	r3, [r4, #16]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005de2:	e7a8      	b.n	8005d36 <_printf_i+0x152>
 8005de4:	4632      	mov	r2, r6
 8005de6:	4649      	mov	r1, r9
 8005de8:	4640      	mov	r0, r8
 8005dea:	6923      	ldr	r3, [r4, #16]
 8005dec:	47d0      	blx	sl
 8005dee:	3001      	adds	r0, #1
 8005df0:	d0ab      	beq.n	8005d4a <_printf_i+0x166>
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	079b      	lsls	r3, r3, #30
 8005df6:	d413      	bmi.n	8005e20 <_printf_i+0x23c>
 8005df8:	68e0      	ldr	r0, [r4, #12]
 8005dfa:	9b03      	ldr	r3, [sp, #12]
 8005dfc:	4298      	cmp	r0, r3
 8005dfe:	bfb8      	it	lt
 8005e00:	4618      	movlt	r0, r3
 8005e02:	e7a4      	b.n	8005d4e <_printf_i+0x16a>
 8005e04:	2301      	movs	r3, #1
 8005e06:	4632      	mov	r2, r6
 8005e08:	4649      	mov	r1, r9
 8005e0a:	4640      	mov	r0, r8
 8005e0c:	47d0      	blx	sl
 8005e0e:	3001      	adds	r0, #1
 8005e10:	d09b      	beq.n	8005d4a <_printf_i+0x166>
 8005e12:	3501      	adds	r5, #1
 8005e14:	68e3      	ldr	r3, [r4, #12]
 8005e16:	9903      	ldr	r1, [sp, #12]
 8005e18:	1a5b      	subs	r3, r3, r1
 8005e1a:	42ab      	cmp	r3, r5
 8005e1c:	dcf2      	bgt.n	8005e04 <_printf_i+0x220>
 8005e1e:	e7eb      	b.n	8005df8 <_printf_i+0x214>
 8005e20:	2500      	movs	r5, #0
 8005e22:	f104 0619 	add.w	r6, r4, #25
 8005e26:	e7f5      	b.n	8005e14 <_printf_i+0x230>
 8005e28:	08006421 	.word	0x08006421
 8005e2c:	08006432 	.word	0x08006432

08005e30 <memchr>:
 8005e30:	4603      	mov	r3, r0
 8005e32:	b510      	push	{r4, lr}
 8005e34:	b2c9      	uxtb	r1, r1
 8005e36:	4402      	add	r2, r0
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	d101      	bne.n	8005e42 <memchr+0x12>
 8005e3e:	2000      	movs	r0, #0
 8005e40:	e003      	b.n	8005e4a <memchr+0x1a>
 8005e42:	7804      	ldrb	r4, [r0, #0]
 8005e44:	3301      	adds	r3, #1
 8005e46:	428c      	cmp	r4, r1
 8005e48:	d1f6      	bne.n	8005e38 <memchr+0x8>
 8005e4a:	bd10      	pop	{r4, pc}

08005e4c <memmove>:
 8005e4c:	4288      	cmp	r0, r1
 8005e4e:	b510      	push	{r4, lr}
 8005e50:	eb01 0402 	add.w	r4, r1, r2
 8005e54:	d902      	bls.n	8005e5c <memmove+0x10>
 8005e56:	4284      	cmp	r4, r0
 8005e58:	4623      	mov	r3, r4
 8005e5a:	d807      	bhi.n	8005e6c <memmove+0x20>
 8005e5c:	1e43      	subs	r3, r0, #1
 8005e5e:	42a1      	cmp	r1, r4
 8005e60:	d008      	beq.n	8005e74 <memmove+0x28>
 8005e62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e6a:	e7f8      	b.n	8005e5e <memmove+0x12>
 8005e6c:	4601      	mov	r1, r0
 8005e6e:	4402      	add	r2, r0
 8005e70:	428a      	cmp	r2, r1
 8005e72:	d100      	bne.n	8005e76 <memmove+0x2a>
 8005e74:	bd10      	pop	{r4, pc}
 8005e76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e7e:	e7f7      	b.n	8005e70 <memmove+0x24>

08005e80 <_free_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	4605      	mov	r5, r0
 8005e84:	2900      	cmp	r1, #0
 8005e86:	d043      	beq.n	8005f10 <_free_r+0x90>
 8005e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e8c:	1f0c      	subs	r4, r1, #4
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	bfb8      	it	lt
 8005e92:	18e4      	addlt	r4, r4, r3
 8005e94:	f000 f8d0 	bl	8006038 <__malloc_lock>
 8005e98:	4a1e      	ldr	r2, [pc, #120]	; (8005f14 <_free_r+0x94>)
 8005e9a:	6813      	ldr	r3, [r2, #0]
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	b933      	cbnz	r3, 8005eae <_free_r+0x2e>
 8005ea0:	6063      	str	r3, [r4, #4]
 8005ea2:	6014      	str	r4, [r2, #0]
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eaa:	f000 b8cb 	b.w	8006044 <__malloc_unlock>
 8005eae:	42a3      	cmp	r3, r4
 8005eb0:	d90a      	bls.n	8005ec8 <_free_r+0x48>
 8005eb2:	6821      	ldr	r1, [r4, #0]
 8005eb4:	1862      	adds	r2, r4, r1
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	bf01      	itttt	eq
 8005eba:	681a      	ldreq	r2, [r3, #0]
 8005ebc:	685b      	ldreq	r3, [r3, #4]
 8005ebe:	1852      	addeq	r2, r2, r1
 8005ec0:	6022      	streq	r2, [r4, #0]
 8005ec2:	6063      	str	r3, [r4, #4]
 8005ec4:	6004      	str	r4, [r0, #0]
 8005ec6:	e7ed      	b.n	8005ea4 <_free_r+0x24>
 8005ec8:	461a      	mov	r2, r3
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	b10b      	cbz	r3, 8005ed2 <_free_r+0x52>
 8005ece:	42a3      	cmp	r3, r4
 8005ed0:	d9fa      	bls.n	8005ec8 <_free_r+0x48>
 8005ed2:	6811      	ldr	r1, [r2, #0]
 8005ed4:	1850      	adds	r0, r2, r1
 8005ed6:	42a0      	cmp	r0, r4
 8005ed8:	d10b      	bne.n	8005ef2 <_free_r+0x72>
 8005eda:	6820      	ldr	r0, [r4, #0]
 8005edc:	4401      	add	r1, r0
 8005ede:	1850      	adds	r0, r2, r1
 8005ee0:	4283      	cmp	r3, r0
 8005ee2:	6011      	str	r1, [r2, #0]
 8005ee4:	d1de      	bne.n	8005ea4 <_free_r+0x24>
 8005ee6:	6818      	ldr	r0, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	4401      	add	r1, r0
 8005eec:	6011      	str	r1, [r2, #0]
 8005eee:	6053      	str	r3, [r2, #4]
 8005ef0:	e7d8      	b.n	8005ea4 <_free_r+0x24>
 8005ef2:	d902      	bls.n	8005efa <_free_r+0x7a>
 8005ef4:	230c      	movs	r3, #12
 8005ef6:	602b      	str	r3, [r5, #0]
 8005ef8:	e7d4      	b.n	8005ea4 <_free_r+0x24>
 8005efa:	6820      	ldr	r0, [r4, #0]
 8005efc:	1821      	adds	r1, r4, r0
 8005efe:	428b      	cmp	r3, r1
 8005f00:	bf01      	itttt	eq
 8005f02:	6819      	ldreq	r1, [r3, #0]
 8005f04:	685b      	ldreq	r3, [r3, #4]
 8005f06:	1809      	addeq	r1, r1, r0
 8005f08:	6021      	streq	r1, [r4, #0]
 8005f0a:	6063      	str	r3, [r4, #4]
 8005f0c:	6054      	str	r4, [r2, #4]
 8005f0e:	e7c9      	b.n	8005ea4 <_free_r+0x24>
 8005f10:	bd38      	pop	{r3, r4, r5, pc}
 8005f12:	bf00      	nop
 8005f14:	200000bc 	.word	0x200000bc

08005f18 <_malloc_r>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	1ccd      	adds	r5, r1, #3
 8005f1c:	f025 0503 	bic.w	r5, r5, #3
 8005f20:	3508      	adds	r5, #8
 8005f22:	2d0c      	cmp	r5, #12
 8005f24:	bf38      	it	cc
 8005f26:	250c      	movcc	r5, #12
 8005f28:	2d00      	cmp	r5, #0
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	db01      	blt.n	8005f32 <_malloc_r+0x1a>
 8005f2e:	42a9      	cmp	r1, r5
 8005f30:	d903      	bls.n	8005f3a <_malloc_r+0x22>
 8005f32:	230c      	movs	r3, #12
 8005f34:	6033      	str	r3, [r6, #0]
 8005f36:	2000      	movs	r0, #0
 8005f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f3a:	f000 f87d 	bl	8006038 <__malloc_lock>
 8005f3e:	4921      	ldr	r1, [pc, #132]	; (8005fc4 <_malloc_r+0xac>)
 8005f40:	680a      	ldr	r2, [r1, #0]
 8005f42:	4614      	mov	r4, r2
 8005f44:	b99c      	cbnz	r4, 8005f6e <_malloc_r+0x56>
 8005f46:	4f20      	ldr	r7, [pc, #128]	; (8005fc8 <_malloc_r+0xb0>)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	b923      	cbnz	r3, 8005f56 <_malloc_r+0x3e>
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	4630      	mov	r0, r6
 8005f50:	f000 f862 	bl	8006018 <_sbrk_r>
 8005f54:	6038      	str	r0, [r7, #0]
 8005f56:	4629      	mov	r1, r5
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f000 f85d 	bl	8006018 <_sbrk_r>
 8005f5e:	1c43      	adds	r3, r0, #1
 8005f60:	d123      	bne.n	8005faa <_malloc_r+0x92>
 8005f62:	230c      	movs	r3, #12
 8005f64:	4630      	mov	r0, r6
 8005f66:	6033      	str	r3, [r6, #0]
 8005f68:	f000 f86c 	bl	8006044 <__malloc_unlock>
 8005f6c:	e7e3      	b.n	8005f36 <_malloc_r+0x1e>
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	1b5b      	subs	r3, r3, r5
 8005f72:	d417      	bmi.n	8005fa4 <_malloc_r+0x8c>
 8005f74:	2b0b      	cmp	r3, #11
 8005f76:	d903      	bls.n	8005f80 <_malloc_r+0x68>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	441c      	add	r4, r3
 8005f7c:	6025      	str	r5, [r4, #0]
 8005f7e:	e004      	b.n	8005f8a <_malloc_r+0x72>
 8005f80:	6863      	ldr	r3, [r4, #4]
 8005f82:	42a2      	cmp	r2, r4
 8005f84:	bf0c      	ite	eq
 8005f86:	600b      	streq	r3, [r1, #0]
 8005f88:	6053      	strne	r3, [r2, #4]
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	f000 f85a 	bl	8006044 <__malloc_unlock>
 8005f90:	f104 000b 	add.w	r0, r4, #11
 8005f94:	1d23      	adds	r3, r4, #4
 8005f96:	f020 0007 	bic.w	r0, r0, #7
 8005f9a:	1ac2      	subs	r2, r0, r3
 8005f9c:	d0cc      	beq.n	8005f38 <_malloc_r+0x20>
 8005f9e:	1a1b      	subs	r3, r3, r0
 8005fa0:	50a3      	str	r3, [r4, r2]
 8005fa2:	e7c9      	b.n	8005f38 <_malloc_r+0x20>
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	6864      	ldr	r4, [r4, #4]
 8005fa8:	e7cc      	b.n	8005f44 <_malloc_r+0x2c>
 8005faa:	1cc4      	adds	r4, r0, #3
 8005fac:	f024 0403 	bic.w	r4, r4, #3
 8005fb0:	42a0      	cmp	r0, r4
 8005fb2:	d0e3      	beq.n	8005f7c <_malloc_r+0x64>
 8005fb4:	1a21      	subs	r1, r4, r0
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f000 f82e 	bl	8006018 <_sbrk_r>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d1dd      	bne.n	8005f7c <_malloc_r+0x64>
 8005fc0:	e7cf      	b.n	8005f62 <_malloc_r+0x4a>
 8005fc2:	bf00      	nop
 8005fc4:	200000bc 	.word	0x200000bc
 8005fc8:	200000c0 	.word	0x200000c0

08005fcc <_realloc_r>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	4607      	mov	r7, r0
 8005fd0:	4614      	mov	r4, r2
 8005fd2:	460e      	mov	r6, r1
 8005fd4:	b921      	cbnz	r1, 8005fe0 <_realloc_r+0x14>
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005fdc:	f7ff bf9c 	b.w	8005f18 <_malloc_r>
 8005fe0:	b922      	cbnz	r2, 8005fec <_realloc_r+0x20>
 8005fe2:	f7ff ff4d 	bl	8005e80 <_free_r>
 8005fe6:	4625      	mov	r5, r4
 8005fe8:	4628      	mov	r0, r5
 8005fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fec:	f000 f830 	bl	8006050 <_malloc_usable_size_r>
 8005ff0:	42a0      	cmp	r0, r4
 8005ff2:	d20f      	bcs.n	8006014 <_realloc_r+0x48>
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	f7ff ff8e 	bl	8005f18 <_malloc_r>
 8005ffc:	4605      	mov	r5, r0
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d0f2      	beq.n	8005fe8 <_realloc_r+0x1c>
 8006002:	4631      	mov	r1, r6
 8006004:	4622      	mov	r2, r4
 8006006:	f7ff fbeb 	bl	80057e0 <memcpy>
 800600a:	4631      	mov	r1, r6
 800600c:	4638      	mov	r0, r7
 800600e:	f7ff ff37 	bl	8005e80 <_free_r>
 8006012:	e7e9      	b.n	8005fe8 <_realloc_r+0x1c>
 8006014:	4635      	mov	r5, r6
 8006016:	e7e7      	b.n	8005fe8 <_realloc_r+0x1c>

08006018 <_sbrk_r>:
 8006018:	b538      	push	{r3, r4, r5, lr}
 800601a:	2300      	movs	r3, #0
 800601c:	4d05      	ldr	r5, [pc, #20]	; (8006034 <_sbrk_r+0x1c>)
 800601e:	4604      	mov	r4, r0
 8006020:	4608      	mov	r0, r1
 8006022:	602b      	str	r3, [r5, #0]
 8006024:	f7fc fd64 	bl	8002af0 <_sbrk>
 8006028:	1c43      	adds	r3, r0, #1
 800602a:	d102      	bne.n	8006032 <_sbrk_r+0x1a>
 800602c:	682b      	ldr	r3, [r5, #0]
 800602e:	b103      	cbz	r3, 8006032 <_sbrk_r+0x1a>
 8006030:	6023      	str	r3, [r4, #0]
 8006032:	bd38      	pop	{r3, r4, r5, pc}
 8006034:	20000d74 	.word	0x20000d74

08006038 <__malloc_lock>:
 8006038:	4801      	ldr	r0, [pc, #4]	; (8006040 <__malloc_lock+0x8>)
 800603a:	f000 b811 	b.w	8006060 <__retarget_lock_acquire_recursive>
 800603e:	bf00      	nop
 8006040:	20000d7c 	.word	0x20000d7c

08006044 <__malloc_unlock>:
 8006044:	4801      	ldr	r0, [pc, #4]	; (800604c <__malloc_unlock+0x8>)
 8006046:	f000 b80c 	b.w	8006062 <__retarget_lock_release_recursive>
 800604a:	bf00      	nop
 800604c:	20000d7c 	.word	0x20000d7c

08006050 <_malloc_usable_size_r>:
 8006050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006054:	1f18      	subs	r0, r3, #4
 8006056:	2b00      	cmp	r3, #0
 8006058:	bfbc      	itt	lt
 800605a:	580b      	ldrlt	r3, [r1, r0]
 800605c:	18c0      	addlt	r0, r0, r3
 800605e:	4770      	bx	lr

08006060 <__retarget_lock_acquire_recursive>:
 8006060:	4770      	bx	lr

08006062 <__retarget_lock_release_recursive>:
 8006062:	4770      	bx	lr

08006064 <_init>:
 8006064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006066:	bf00      	nop
 8006068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800606a:	bc08      	pop	{r3}
 800606c:	469e      	mov	lr, r3
 800606e:	4770      	bx	lr

08006070 <_fini>:
 8006070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006072:	bf00      	nop
 8006074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006076:	bc08      	pop	{r3}
 8006078:	469e      	mov	lr, r3
 800607a:	4770      	bx	lr
